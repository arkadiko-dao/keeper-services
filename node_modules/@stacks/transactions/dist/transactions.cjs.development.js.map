{"version":3,"file":"transactions.cjs.development.js","sources":["../src/constants.ts","../../../node_modules/regenerator-runtime/runtime.js","../src/keys.ts","../src/errors.ts","../src/postcondition.ts","../src/payload.ts","../src/types.ts","../src/clarity/types/principalCV.ts","../src/clarity/clarityValue.ts","../src/clarity/types/booleanCV.ts","../src/clarity/types/intCV.ts","../src/clarity/types/bufferCV.ts","../src/clarity/types/optionalCV.ts","../src/clarity/types/responseCV.ts","../src/clarity/types/listCV.ts","../src/clarity/types/tupleCV.ts","../src/clarity/types/stringCV.ts","../src/clarity/serialize.ts","../src/bufferReader.ts","../src/clarity/deserialize.ts","../src/utils.ts","../src/authorization.ts","../src/transaction.ts","../src/signer.ts","../src/contract-abi.ts","../src/builders.ts"],"sourcesContent":["/**\n * Unsigned 32-bit integer\n */\nenum ChainID {\n  Testnet = 0x80000000,\n  Mainnet = 0x00000001,\n}\n\nconst DEFAULT_CHAIN_ID = ChainID.Mainnet;\nconst MAX_STRING_LENGTH_BYTES = 128;\nconst CLARITY_INT_SIZE = 128;\nconst COINBASE_BUFFER_LENGTH_BYTES = 32;\nconst RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = 65;\nconst COMPRESSED_PUBKEY_LENGTH_BYTES = 32;\nconst UNCOMPRESSED_PUBKEY_LENGTH_BYTES = 64;\nconst MEMO_MAX_LENGTH_BYTES = 34;\nconst DEFAULT_CORE_NODE_API_URL = 'https://stacks-node-api.mainnet.stacks.co';\n\nenum StacksMessageType {\n  Address,\n  Principal,\n  LengthPrefixedString,\n  MemoString,\n  AssetInfo,\n  PostCondition,\n  PublicKey,\n  LengthPrefixedList,\n  Payload,\n  MessageSignature,\n  TransactionAuthField,\n}\n\nenum PayloadType {\n  TokenTransfer = 0x00,\n  SmartContract = 0x01,\n  ContractCall = 0x02,\n  PoisonMicroblock = 0x03,\n  Coinbase = 0x04,\n}\n\nenum AnchorMode {\n  OnChainOnly = 0x01,\n  OffChainOnly = 0x02,\n  Any = 0x03,\n}\n\nenum TransactionVersion {\n  Mainnet = 0x00,\n  Testnet = 0x80,\n}\n\nconst DEFAULT_TRANSACTION_VERSION = TransactionVersion.Mainnet;\n\nenum PostConditionMode {\n  Allow = 0x01,\n  Deny = 0x02,\n}\n\nenum PostConditionType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\nenum AuthType {\n  Standard = 0x04,\n  Sponsored = 0x05,\n}\n\nenum AddressHashMode {\n  // serialization modes for public keys to addresses.\n  // We support four different modes due to legacy compatibility with Stacks v1 addresses:\n  /** SingleSigHashMode - hash160(public-key), same as bitcoin's p2pkh */\n  SerializeP2PKH = 0x00,\n  /** MultiSigHashMode - hash160(multisig-redeem-script), same as bitcoin's multisig p2sh */\n  SerializeP2SH = 0x01,\n  /** SingleSigHashMode - hash160(segwit-program-00(p2pkh)), same as bitcoin's p2sh-p2wpkh */\n  SerializeP2WPKH = 0x02,\n  /** MultiSigHashMode - hash160(segwit-program-00(public-keys)), same as bitcoin's p2sh-p2wsh */\n  SerializeP2WSH = 0x03,\n}\n\ntype SingleSigHashMode = AddressHashMode.SerializeP2PKH | AddressHashMode.SerializeP2WPKH;\ntype MultiSigHashMode = AddressHashMode.SerializeP2SH | AddressHashMode.SerializeP2WSH;\n\nenum AddressVersion {\n  MainnetSingleSig = 22,\n  MainnetMultiSig = 20,\n  TestnetSingleSig = 26,\n  TestnetMultiSig = 21,\n}\n\nenum PubKeyEncoding {\n  Compressed = 0x00,\n  Uncompressed = 0x01,\n}\n\nenum FungibleConditionCode {\n  Equal = 0x01,\n  Greater = 0x02,\n  GreaterEqual = 0x03,\n  Less = 0x04,\n  LessEqual = 0x05,\n}\n\nenum NonFungibleConditionCode {\n  DoesNotOwn = 0x10,\n  Owns = 0x11,\n}\n\nenum PostConditionPrincipalID {\n  Origin = 0x01,\n  Standard = 0x02,\n  Contract = 0x03,\n}\n\nenum AssetType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\nenum TxRejectedReason {\n  Serialization = 'Serialization',\n  Deserialization = 'Deserialization',\n  SignatureValidation = 'SignatureValidation',\n  FeeTooLow = 'FeeTooLow',\n  BadNonce = 'BadNonce',\n  NotEnoughFunds = 'NotEnoughFunds',\n  NoSuchContract = 'NoSuchContract',\n  NoSuchPublicFunction = 'NoSuchPublicFunction',\n  BadFunctionArgument = 'BadFunctionArgument',\n  ContractAlreadyExists = 'ContractAlreadyExists',\n  PoisonMicroblocksDoNotConflict = 'PoisonMicroblocksDoNotConflict',\n  PoisonMicroblockHasUnknownPubKeyHash = 'PoisonMicroblockHasUnknownPubKeyHash',\n  PoisonMicroblockIsInvalid = 'PoisonMicroblockIsInvalid',\n  BadAddressVersionByte = 'BadAddressVersionByte',\n  NoCoinbaseViaMempool = 'NoCoinbaseViaMempool',\n  ServerFailureNoSuchChainTip = 'ServerFailureNoSuchChainTip',\n  ServerFailureDatabase = 'ServerFailureDatabase',\n  ServerFailureOther = 'ServerFailureOther',\n}\n\nexport {\n  MAX_STRING_LENGTH_BYTES,\n  CLARITY_INT_SIZE,\n  COINBASE_BUFFER_LENGTH_BYTES,\n  DEFAULT_CHAIN_ID,\n  DEFAULT_TRANSACTION_VERSION,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  COMPRESSED_PUBKEY_LENGTH_BYTES,\n  UNCOMPRESSED_PUBKEY_LENGTH_BYTES,\n  MEMO_MAX_LENGTH_BYTES,\n  DEFAULT_CORE_NODE_API_URL,\n  ChainID,\n  StacksMessageType,\n  PayloadType,\n  AnchorMode,\n  TransactionVersion,\n  PostConditionMode,\n  PostConditionType,\n  PostConditionPrincipalID,\n  AuthType,\n  AddressHashMode,\n  SingleSigHashMode,\n  MultiSigHashMode,\n  AddressVersion,\n  PubKeyEncoding,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  AssetType,\n  TxRejectedReason,\n};\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import {\n  AddressHashMode,\n  AddressVersion,\n  COMPRESSED_PUBKEY_LENGTH_BYTES,\n  UNCOMPRESSED_PUBKEY_LENGTH_BYTES,\n  StacksMessageType,\n  TransactionVersion,\n  PubKeyEncoding,\n} from './constants';\n\nimport {\n  BufferArray,\n  hash160,\n  hashP2PKH,\n  hexStringToInt,\n  intToHexString,\n  leftPadHexToLength,\n  randomBytes,\n} from './utils';\n\nimport { ec as EC } from 'elliptic';\n\nimport { MessageSignature, createMessageSignature } from './authorization';\nimport { BufferReader } from './bufferReader';\nimport { c32address } from 'c32check';\nimport { addressHashModeToVersion, addressFromVersionHash, addressToString } from './types';\n\nexport interface StacksPublicKey {\n  readonly type: StacksMessageType.PublicKey;\n  readonly data: Buffer;\n}\n\n/** Creates a P2PKH address string from the given private key and tx version. */\nexport function getAddressFromPrivateKey(\n  /** Private key buffer or hex string */\n  privateKey: string | Buffer,\n  transactionVersion = TransactionVersion.Mainnet\n): string {\n  const pubKey = pubKeyfromPrivKey(privateKey);\n  return getAddressFromPublicKey(pubKey.data, transactionVersion);\n}\n\n/** Creates a P2PKH address string from the given public key and tx version. */\nexport function getAddressFromPublicKey(\n  /** Public key buffer or hex string */\n  publicKey: string | Buffer,\n  transactionVersion = TransactionVersion.Mainnet\n): string {\n  publicKey = typeof publicKey === 'string' ? publicKey : publicKey.toString('hex');\n  const addrVer = addressHashModeToVersion(AddressHashMode.SerializeP2PKH, transactionVersion);\n  const addr = addressFromVersionHash(addrVer, hashP2PKH(Buffer.from(publicKey, 'hex')));\n  const addrString = addressToString(addr);\n  return addrString;\n}\n\nexport function createStacksPublicKey(key: string): StacksPublicKey {\n  return {\n    type: StacksMessageType.PublicKey,\n    data: Buffer.from(key, 'hex'),\n  };\n}\n\nexport function publicKeyFromSignature(\n  message: string,\n  messageSignature: MessageSignature,\n  pubKeyEncoding = PubKeyEncoding.Compressed\n) {\n  const ec = new EC('secp256k1');\n  const messageBN = ec.keyFromPrivate(message, 'hex').getPrivate().toString(10);\n\n  const parsedSignature = parseRecoverableSignature(messageSignature.data);\n\n  const publicKey = ec.recoverPubKey(\n    messageBN,\n    parsedSignature,\n    parsedSignature.recoveryParam,\n    'hex'\n  );\n\n  if (pubKeyEncoding == PubKeyEncoding.Uncompressed) {\n    return publicKey.encode('hex');\n  }\n\n  return publicKey.encodeCompressed('hex');\n}\n\nexport function publicKeyFromBuffer(data: Buffer): StacksPublicKey {\n  return { type: StacksMessageType.PublicKey, data };\n}\n\nexport function isCompressed(key: StacksPublicKey): boolean {\n  return !key.data.toString('hex').startsWith('04');\n}\n\nexport function publicKeyToString(key: StacksPublicKey): string {\n  return key.data.toString('hex');\n}\n\nexport function serializePublicKey(key: StacksPublicKey): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.push(key.data);\n  return bufferArray.concatBuffer();\n}\n\nexport function pubKeyfromPrivKey(privateKey: string | Buffer): StacksPublicKey {\n  const privKey = createStacksPrivateKey(privateKey);\n  const ec = new EC('secp256k1');\n  const keyPair = ec.keyFromPrivate(privKey.data.toString('hex').slice(0, 64), 'hex');\n  const pubKey = keyPair.getPublic(privKey.compressed, 'hex');\n  return createStacksPublicKey(pubKey);\n}\n\nexport function compressPublicKey(publicKey: string | Buffer): StacksPublicKey {\n  const ec = new EC('secp256k1');\n  const key = ec.keyFromPublic(publicKey);\n  const pubKey = key.getPublic(true, 'hex');\n  return createStacksPublicKey(pubKey);\n}\n\nexport function deserializePublicKey(bufferReader: BufferReader): StacksPublicKey {\n  const fieldId = bufferReader.readUInt8();\n  const keyLength =\n    fieldId !== 4 ? COMPRESSED_PUBKEY_LENGTH_BYTES : UNCOMPRESSED_PUBKEY_LENGTH_BYTES;\n  return publicKeyFromBuffer(\n    Buffer.concat([Buffer.from([fieldId]), bufferReader.readBuffer(keyLength)])\n  );\n}\n\nexport interface StacksPrivateKey {\n  data: Buffer;\n  compressed: boolean;\n}\n\nexport function createStacksPrivateKey(key: string | Buffer): StacksPrivateKey {\n  const data = typeof key === 'string' ? Buffer.from(key, 'hex') : key;\n  let compressed: boolean;\n  if (data.length === 33) {\n    if (data[data.length - 1] !== 1) {\n      throw new Error(\n        'Improperly formatted private-key. 33 byte length usually ' +\n          'indicates compressed key, but last byte must be == 0x01'\n      );\n    }\n    compressed = true;\n  } else if (data.length === 32) {\n    compressed = false;\n  } else {\n    throw new Error(\n      `Improperly formatted private-key hex string: length should be 32 or 33 bytes, provided with length ${data.length}`\n    );\n  }\n  return { data, compressed };\n}\n\nexport function makeRandomPrivKey(entropy?: Buffer): StacksPrivateKey {\n  const ec = new EC('secp256k1');\n  const options = { entropy: entropy || randomBytes(32) };\n  const keyPair = ec.genKeyPair(options);\n  const privateKey = keyPair.getPrivate().toString('hex', 32);\n  return createStacksPrivateKey(privateKey);\n}\n\nexport function signWithKey(privateKey: StacksPrivateKey, input: string): MessageSignature {\n  const ec = new EC('secp256k1');\n  const key = ec.keyFromPrivate(privateKey.data.toString('hex').slice(0, 64), 'hex');\n  const signature = key.sign(input, 'hex', { canonical: true });\n  const coordinateValueBytes = 32;\n  const r = leftPadHexToLength(signature.r.toString('hex'), coordinateValueBytes * 2);\n  const s = leftPadHexToLength(signature.s.toString('hex'), coordinateValueBytes * 2);\n  if (signature.recoveryParam === undefined || signature.recoveryParam === null) {\n    throw new Error('\"signature.recoveryParam\" is not set');\n  }\n  const recoveryParam = intToHexString(signature.recoveryParam, 1);\n  const recoverableSignatureString = recoveryParam + r + s;\n  return createMessageSignature(recoverableSignatureString);\n}\n\nexport function getSignatureRecoveryParam(signature: string) {\n  const coordinateValueBytes = 32;\n  if (signature.length < coordinateValueBytes * 2 * 2 + 1) {\n    throw new Error('Invalid signature');\n  }\n  const recoveryParamHex = signature.substr(0, 2);\n  return hexStringToInt(recoveryParamHex);\n}\n\nexport function parseRecoverableSignature(signature: string) {\n  const coordinateValueBytes = 32;\n  if (signature.length < coordinateValueBytes * 2 * 2 + 1) {\n    throw new Error('Invalid signature');\n  }\n  const recoveryParamHex = signature.substr(0, 2);\n  const r = signature.substr(2, coordinateValueBytes * 2);\n  const s = signature.substr(2 + coordinateValueBytes * 2, coordinateValueBytes * 2);\n  return {\n    recoveryParam: hexStringToInt(recoveryParamHex),\n    r,\n    s,\n  };\n}\n\nexport function getPublicKey(privateKey: StacksPrivateKey): StacksPublicKey {\n  return pubKeyfromPrivKey(privateKey.data);\n}\n\nexport function privateKeyToString(privateKey: StacksPrivateKey): string {\n  return privateKey.data.toString('hex');\n}\n\nexport function publicKeyToAddress(version: AddressVersion, publicKey: StacksPublicKey): string {\n  return c32address(version, hash160(publicKey.data).toString('hex'));\n}\n","export class StacksTransactionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class SerializationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class DeserializationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class NotImplementedError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class SigningError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\nexport class VerificationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n","import {\n  PostConditionType,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  StacksMessageType,\n} from './constants';\n\nimport { BufferArray } from './utils';\n\nimport {\n  AssetInfo,\n  serializeAssetInfo,\n  deserializeAssetInfo,\n  PostConditionPrincipal,\n  serializePrincipal,\n  deserializePrincipal,\n  parseAssetInfoString,\n  parsePrincipalString,\n} from './types';\n\nimport BigNum from 'bn.js';\nimport { BufferReader } from './bufferReader';\nimport { ClarityValue, serializeCV, deserializeCV } from './clarity';\nimport { DeserializationError } from './errors';\n\nexport type PostCondition = STXPostCondition | FungiblePostCondition | NonFungiblePostCondition;\n\nexport interface STXPostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.STX;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: BigNum;\n}\n\nexport function createSTXPostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum\n): STXPostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.STX,\n    principal,\n    conditionCode,\n    amount,\n  };\n}\n\nexport interface FungiblePostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.Fungible;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: BigNum;\n  readonly assetInfo: AssetInfo;\n}\n\nexport function createFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.Fungible,\n    principal,\n    conditionCode,\n    amount,\n    assetInfo,\n  };\n}\n\nexport interface NonFungiblePostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.NonFungible;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: NonFungibleConditionCode;\n  /** Structure that identifies the token type. */\n  readonly assetInfo: AssetInfo;\n  /** The Clarity value that names the token instance. */\n  readonly assetName: ClarityValue;\n}\n\nexport function createNonFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.NonFungible,\n    principal,\n    conditionCode,\n    assetInfo,\n    assetName,\n  };\n}\n\nexport function serializePostCondition(postCondition: PostCondition): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(postCondition.conditionType);\n  bufferArray.push(serializePrincipal(postCondition.principal));\n\n  if (\n    postCondition.conditionType === PostConditionType.Fungible ||\n    postCondition.conditionType === PostConditionType.NonFungible\n  ) {\n    bufferArray.push(serializeAssetInfo(postCondition.assetInfo));\n  }\n\n  if (postCondition.conditionType === PostConditionType.NonFungible) {\n    bufferArray.push(serializeCV(postCondition.assetName));\n  }\n\n  bufferArray.appendByte(postCondition.conditionCode);\n\n  if (\n    postCondition.conditionType === PostConditionType.STX ||\n    postCondition.conditionType === PostConditionType.Fungible\n  ) {\n    bufferArray.push(postCondition.amount.toArrayLike(Buffer, 'be', 8));\n  }\n\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializePostCondition(bufferReader: BufferReader): PostCondition {\n  const postConditionType = bufferReader.readUInt8Enum(PostConditionType, n => {\n    throw new DeserializationError(`Could not read ${n} as PostConditionType`);\n  });\n\n  const principal = deserializePrincipal(bufferReader);\n\n  let conditionCode;\n  let assetInfo;\n  let amount;\n  switch (postConditionType) {\n    case PostConditionType.STX:\n      conditionCode = bufferReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.STX,\n        principal,\n        conditionCode,\n        amount,\n      };\n    case PostConditionType.Fungible:\n      assetInfo = deserializeAssetInfo(bufferReader);\n      conditionCode = bufferReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.Fungible,\n        principal,\n        conditionCode,\n        amount,\n        assetInfo,\n      };\n    case PostConditionType.NonFungible:\n      assetInfo = deserializeAssetInfo(bufferReader);\n      const assetName = deserializeCV(bufferReader);\n      conditionCode = bufferReader.readUInt8Enum(NonFungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.NonFungible,\n        principal,\n        conditionCode,\n        assetInfo,\n        assetName,\n      };\n  }\n}\n","import { COINBASE_BUFFER_LENGTH_BYTES, PayloadType, StacksMessageType } from './constants';\n\nimport { BufferArray } from './utils';\n\nimport {\n  Address,\n  MemoString,\n  createAddress,\n  createMemoString,\n  LengthPrefixedString,\n  createLPString,\n  serializeStacksMessage,\n  deserializeAddress,\n  deserializeLPString,\n  deserializeMemoString,\n  codeBodyString,\n} from './types';\n\nimport { ClarityValue, serializeCV, deserializeCV } from './clarity/';\n\nimport BigNum from 'bn.js';\nimport { BufferReader } from './bufferReader';\nimport { PrincipalCV, principalCV } from './clarity/types/principalCV';\n\nexport type Payload =\n  | TokenTransferPayload\n  | ContractCallPayload\n  | SmartContractPayload\n  | PoisonPayload\n  | CoinbasePayload;\n\nexport interface TokenTransferPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.TokenTransfer;\n  readonly recipient: PrincipalCV;\n  readonly amount: BigNum;\n  readonly memo: MemoString;\n}\n\nexport function createTokenTransferPayload(\n  recipient: string | PrincipalCV,\n  amount: BigNum,\n  memo?: string | MemoString\n): TokenTransferPayload {\n  if (typeof recipient === 'string') {\n    recipient = principalCV(recipient);\n  }\n  if (typeof memo === 'string') {\n    memo = createMemoString(memo);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.TokenTransfer,\n    recipient,\n    amount,\n    memo: memo ?? createMemoString(''),\n  };\n}\n\nexport interface ContractCallPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.ContractCall;\n  readonly contractAddress: Address;\n  readonly contractName: LengthPrefixedString;\n  readonly functionName: LengthPrefixedString;\n  readonly functionArgs: ClarityValue[];\n}\n\nexport function createContractCallPayload(\n  contractAddress: string | Address,\n  contractName: string | LengthPrefixedString,\n  functionName: string | LengthPrefixedString,\n  functionArgs: ClarityValue[]\n): ContractCallPayload {\n  if (typeof contractAddress === 'string') {\n    contractAddress = createAddress(contractAddress);\n  }\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof functionName === 'string') {\n    functionName = createLPString(functionName);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.ContractCall,\n    contractAddress,\n    contractName,\n    functionName,\n    functionArgs,\n  };\n}\n\nexport interface SmartContractPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.SmartContract;\n  readonly contractName: LengthPrefixedString;\n  readonly codeBody: LengthPrefixedString;\n}\n\nexport function createSmartContractPayload(\n  contractName: string | LengthPrefixedString,\n  codeBody: string | LengthPrefixedString\n): SmartContractPayload {\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof codeBody === 'string') {\n    codeBody = codeBodyString(codeBody);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.SmartContract,\n    contractName,\n    codeBody,\n  };\n}\n\nexport interface PoisonPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.PoisonMicroblock;\n}\n\nexport function createPoisonPayload(): PoisonPayload {\n  return { type: StacksMessageType.Payload, payloadType: PayloadType.PoisonMicroblock };\n}\n\nexport interface CoinbasePayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.Coinbase;\n  readonly coinbaseBuffer: Buffer;\n}\n\nexport function createCoinbasePayload(coinbaseBuffer: Buffer): CoinbasePayload {\n  if (coinbaseBuffer.byteLength != COINBASE_BUFFER_LENGTH_BYTES) {\n    throw Error(`Coinbase buffer size must be ${COINBASE_BUFFER_LENGTH_BYTES} bytes`);\n  }\n  return { type: StacksMessageType.Payload, payloadType: PayloadType.Coinbase, coinbaseBuffer };\n}\n\nexport function serializePayload(payload: Payload): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(payload.payloadType);\n\n  switch (payload.payloadType) {\n    case PayloadType.TokenTransfer:\n      bufferArray.push(serializeCV(payload.recipient));\n      bufferArray.push(payload.amount.toArrayLike(Buffer, 'be', 8));\n      bufferArray.push(serializeStacksMessage(payload.memo));\n      break;\n    case PayloadType.ContractCall:\n      bufferArray.push(serializeStacksMessage(payload.contractAddress));\n      bufferArray.push(serializeStacksMessage(payload.contractName));\n      bufferArray.push(serializeStacksMessage(payload.functionName));\n      const numArgs = Buffer.alloc(4);\n      numArgs.writeUInt32BE(payload.functionArgs.length, 0);\n      bufferArray.push(numArgs);\n      payload.functionArgs.forEach(arg => {\n        bufferArray.push(serializeCV(arg));\n      });\n      break;\n    case PayloadType.SmartContract:\n      bufferArray.push(serializeStacksMessage(payload.contractName));\n      bufferArray.push(serializeStacksMessage(payload.codeBody));\n      break;\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      break;\n    case PayloadType.Coinbase:\n      bufferArray.push(payload.coinbaseBuffer);\n      break;\n  }\n\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializePayload(bufferReader: BufferReader): Payload {\n  const payloadType = bufferReader.readUInt8Enum(PayloadType, n => {\n    throw new Error(`Cannot recognize PayloadType: ${n}`);\n  });\n\n  switch (payloadType) {\n    case PayloadType.TokenTransfer:\n      const recipient = deserializeCV(bufferReader) as PrincipalCV;\n      const amount = new BigNum(bufferReader.readBuffer(8));\n      const memo = deserializeMemoString(bufferReader);\n      return createTokenTransferPayload(recipient, amount, memo);\n    case PayloadType.ContractCall:\n      const contractAddress = deserializeAddress(bufferReader);\n      const contractCallName = deserializeLPString(bufferReader);\n      const functionName = deserializeLPString(bufferReader);\n      const functionArgs = [];\n      const numberOfArgs = bufferReader.readUInt32BE();\n      for (let i = 0; i < numberOfArgs; i++) {\n        const clarityValue = deserializeCV(bufferReader);\n        functionArgs.push(clarityValue);\n      }\n      return createContractCallPayload(\n        contractAddress,\n        contractCallName,\n        functionName,\n        functionArgs\n      );\n    case PayloadType.SmartContract:\n      const smartContractName = deserializeLPString(bufferReader);\n      const codeBody = deserializeLPString(bufferReader, 4, 100000);\n      return createSmartContractPayload(smartContractName, codeBody);\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      return createPoisonPayload();\n    case PayloadType.Coinbase:\n      const coinbaseBuffer = bufferReader.readBuffer(COINBASE_BUFFER_LENGTH_BYTES);\n      return createCoinbasePayload(coinbaseBuffer);\n  }\n}\n","import {\n  MAX_STRING_LENGTH_BYTES,\n  MEMO_MAX_LENGTH_BYTES,\n  AddressHashMode,\n  AddressVersion,\n  TransactionVersion,\n  StacksMessageType,\n  PostConditionPrincipalID,\n} from './constants';\n\nimport { StacksPublicKey, serializePublicKey, deserializePublicKey, isCompressed } from './keys';\n\nimport {\n  BufferArray,\n  intToHexString,\n  hexStringToInt,\n  exceedsMaxLengthBytes,\n  hashP2PKH,\n  rightPadHexToLength,\n  hashP2SH,\n} from './utils';\n\nimport { c32addressDecode, c32address } from 'c32check';\nimport { BufferReader } from './bufferReader';\nimport { PostCondition, serializePostCondition, deserializePostCondition } from './postcondition';\nimport { Payload, deserializePayload, serializePayload } from './payload';\nimport { DeserializationError } from './errors';\nimport {\n  deserializeTransactionAuthField,\n  deserializeMessageSignature,\n  MessageSignature,\n  serializeMessageSignature,\n  serializeTransactionAuthField,\n  TransactionAuthField,\n} from './authorization';\n\nexport type StacksMessage =\n  | Address\n  | PostConditionPrincipal\n  | LengthPrefixedString\n  | LengthPrefixedList\n  | Payload\n  | MemoString\n  | AssetInfo\n  | PostCondition\n  | StacksPublicKey\n  | TransactionAuthField\n  | MessageSignature;\n\nexport function serializeStacksMessage(message: StacksMessage): Buffer {\n  switch (message.type) {\n    case StacksMessageType.Address:\n      return serializeAddress(message);\n    case StacksMessageType.Principal:\n      return serializePrincipal(message);\n    case StacksMessageType.LengthPrefixedString:\n      return serializeLPString(message);\n    case StacksMessageType.MemoString:\n      return serializeMemoString(message);\n    case StacksMessageType.AssetInfo:\n      return serializeAssetInfo(message);\n    case StacksMessageType.PostCondition:\n      return serializePostCondition(message);\n    case StacksMessageType.PublicKey:\n      return serializePublicKey(message);\n    case StacksMessageType.LengthPrefixedList:\n      return serializeLPList(message);\n    case StacksMessageType.Payload:\n      return serializePayload(message);\n    case StacksMessageType.TransactionAuthField:\n      return serializeTransactionAuthField(message);\n    case StacksMessageType.MessageSignature:\n      return serializeMessageSignature(message);\n  }\n}\n\nexport function deserializeStacksMessage(\n  bufferReader: BufferReader,\n  type: StacksMessageType,\n  listType?: StacksMessageType\n): StacksMessage {\n  switch (type) {\n    case StacksMessageType.Address:\n      return deserializeAddress(bufferReader);\n    case StacksMessageType.Principal:\n      return deserializePrincipal(bufferReader);\n    case StacksMessageType.LengthPrefixedString:\n      return deserializeLPString(bufferReader);\n    case StacksMessageType.MemoString:\n      return deserializeMemoString(bufferReader);\n    case StacksMessageType.AssetInfo:\n      return deserializeAssetInfo(bufferReader);\n    case StacksMessageType.PostCondition:\n      return deserializePostCondition(bufferReader);\n    case StacksMessageType.PublicKey:\n      return deserializePublicKey(bufferReader);\n    case StacksMessageType.Payload:\n      return deserializePayload(bufferReader);\n    case StacksMessageType.LengthPrefixedList:\n      if (!listType) {\n        throw new DeserializationError('No List Type specified');\n      }\n      return deserializeLPList(bufferReader, listType);\n    case StacksMessageType.MessageSignature:\n      return deserializeMessageSignature(bufferReader);\n    default:\n      throw new Error('Could not recognize StacksMessageType');\n  }\n}\n\nexport interface Address {\n  readonly type: StacksMessageType.Address;\n  readonly version: AddressVersion;\n  readonly hash160: string;\n}\n\nexport function createAddress(c32AddressString: string): Address {\n  const addressData = c32addressDecode(c32AddressString);\n  return {\n    type: StacksMessageType.Address,\n    version: addressData[0],\n    hash160: addressData[1],\n  };\n}\n\nexport function createEmptyAddress(): Address {\n  return {\n    type: StacksMessageType.Address,\n    version: AddressVersion.MainnetSingleSig,\n    hash160: '0'.repeat(40),\n  };\n}\n\nexport function addressFromVersionHash(version: AddressVersion, hash: string): Address {\n  return { type: StacksMessageType.Address, version, hash160: hash };\n}\n\n/**\n * Translates the tx auth hash mode to the corresponding address version.\n * @see https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#transaction-authorization\n */\nexport function addressHashModeToVersion(\n  hashMode: AddressHashMode,\n  txVersion: TransactionVersion\n): AddressVersion {\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetSingleSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetSingleSig;\n        default:\n          throw new Error(\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\n          );\n      }\n    case AddressHashMode.SerializeP2SH:\n    case AddressHashMode.SerializeP2WPKH:\n    case AddressHashMode.SerializeP2WSH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetMultiSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetMultiSig;\n        default:\n          throw new Error(\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\n          );\n      }\n    default:\n      throw new Error(`Unexpected hashMode ${JSON.stringify(hashMode)}`);\n  }\n}\n\nexport function addressFromHashMode(\n  hashMode: AddressHashMode,\n  txVersion: TransactionVersion,\n  data: string\n): Address {\n  const version = addressHashModeToVersion(hashMode, txVersion);\n  return addressFromVersionHash(version, data);\n}\n\nexport function addressFromPublicKeys(\n  version: AddressVersion,\n  hashMode: AddressHashMode,\n  numSigs: number,\n  publicKeys: StacksPublicKey[]\n): Address {\n  if (publicKeys.length === 0) {\n    throw Error('Invalid number of public keys');\n  }\n\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    if (publicKeys.length !== 1 || numSigs !== 1) {\n      throw Error('Invalid number of public keys or signatures');\n    }\n  }\n\n  if (hashMode === AddressHashMode.SerializeP2WPKH || hashMode === AddressHashMode.SerializeP2WSH) {\n    for (let i = 0; i < publicKeys.length; i++) {\n      if (!isCompressed(publicKeys[i])) {\n        throw Error('Public keys must be compressed for segwit');\n      }\n    }\n  }\n\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      return addressFromVersionHash(version, hashP2PKH(publicKeys[0].data));\n    case AddressHashMode.SerializeP2SH:\n      return addressFromVersionHash(version, hashP2SH(numSigs, publicKeys.map(serializePublicKey)));\n    default:\n      throw Error(\n        `Not yet implemented: address construction using public keys for hash mode: ${hashMode}`\n      );\n  }\n}\n\nexport function addressToString(address: Address): string {\n  return c32address(address.version, address.hash160).toString();\n}\n\nexport function serializeAddress(address: Address): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendHexString(intToHexString(address.version, 1));\n  bufferArray.appendHexString(address.hash160);\n\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeAddress(bufferReader: BufferReader): Address {\n  const version = hexStringToInt(bufferReader.readBuffer(1).toString('hex'));\n  const data = bufferReader.readBuffer(20).toString('hex');\n\n  return { type: StacksMessageType.Address, version, hash160: data };\n}\n\nexport type PostConditionPrincipal = StandardPrincipal | ContractPrincipal;\n\nexport interface StandardPrincipal {\n  readonly type: StacksMessageType.Principal;\n  readonly prefix: PostConditionPrincipalID.Standard;\n  readonly address: Address;\n}\n\nexport interface ContractPrincipal {\n  readonly type: StacksMessageType.Principal;\n  readonly prefix: PostConditionPrincipalID.Contract;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n}\n\n/**\n * Parses a principal string for either a standard principal or contract principal.\n * @param principalString - String in the format `{address}.{contractName}`\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G.example-contract\"\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G\"\n */\nexport function parsePrincipalString(\n  principalString: string\n): StandardPrincipal | ContractPrincipal {\n  if (principalString.includes('.')) {\n    const [address, contractName] = principalString.split('.');\n    return createContractPrincipal(address, contractName);\n  } else {\n    return createStandardPrincipal(principalString);\n  }\n}\n\nexport function createStandardPrincipal(addressString: string): StandardPrincipal {\n  const addr = createAddress(addressString);\n  return {\n    type: StacksMessageType.Principal,\n    prefix: PostConditionPrincipalID.Standard,\n    address: addr,\n  };\n}\n\nexport function createContractPrincipal(\n  addressString: string,\n  contractName: string\n): ContractPrincipal {\n  const addr = createAddress(addressString);\n  const name = createLPString(contractName);\n  return {\n    type: StacksMessageType.Principal,\n    prefix: PostConditionPrincipalID.Contract,\n    address: addr,\n    contractName: name,\n  };\n}\n\nexport function serializePrincipal(principal: PostConditionPrincipal): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.push(Buffer.from([principal.prefix]));\n  bufferArray.push(serializeAddress(principal.address));\n  if (principal.prefix === PostConditionPrincipalID.Contract) {\n    bufferArray.push(serializeLPString(principal.contractName));\n  }\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializePrincipal(bufferReader: BufferReader): PostConditionPrincipal {\n  const prefix = bufferReader.readUInt8Enum(PostConditionPrincipalID, _ => {\n    throw new DeserializationError('Unexpected Principal payload type: ${n}');\n  });\n  const address = deserializeAddress(bufferReader);\n  if (prefix === PostConditionPrincipalID.Standard) {\n    return { type: StacksMessageType.Principal, prefix, address } as StandardPrincipal;\n  }\n  const contractName = deserializeLPString(bufferReader);\n  return {\n    type: StacksMessageType.Principal,\n    prefix,\n    address,\n    contractName,\n  } as ContractPrincipal;\n}\n\nexport interface LengthPrefixedString {\n  readonly type: StacksMessageType.LengthPrefixedString;\n  readonly content: string;\n  readonly lengthPrefixBytes: number;\n  readonly maxLengthBytes: number;\n}\n\nexport function createLPString(content: string): LengthPrefixedString;\nexport function createLPString(content: string, lengthPrefixBytes: number): LengthPrefixedString;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes: number,\n  maxLengthBytes: number\n): LengthPrefixedString;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes?: number,\n  maxLengthBytes?: number\n): LengthPrefixedString {\n  const prefixLength = lengthPrefixBytes || 1;\n  const maxLength = maxLengthBytes || MAX_STRING_LENGTH_BYTES;\n  if (exceedsMaxLengthBytes(content, maxLength)) {\n    throw new Error(`String length exceeds maximum bytes ${maxLength.toString()}`);\n  }\n  return {\n    type: StacksMessageType.LengthPrefixedString,\n    content,\n    lengthPrefixBytes: prefixLength,\n    maxLengthBytes: maxLength,\n  };\n}\n\nexport function serializeLPString(lps: LengthPrefixedString) {\n  const bufferArray: BufferArray = new BufferArray();\n  const contentBuffer = Buffer.from(lps.content);\n  const length = contentBuffer.byteLength;\n  bufferArray.appendHexString(intToHexString(length, lps.lengthPrefixBytes));\n  bufferArray.push(contentBuffer);\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeLPString(\n  bufferReader: BufferReader,\n  prefixBytes?: number,\n  maxLength?: number\n): LengthPrefixedString {\n  prefixBytes = prefixBytes ? prefixBytes : 1;\n  const length = hexStringToInt(bufferReader.readBuffer(prefixBytes).toString('hex'));\n  const content = bufferReader.readBuffer(length).toString();\n  return createLPString(content, prefixBytes, maxLength ?? 128);\n}\n\nexport function codeBodyString(content: string): LengthPrefixedString {\n  return createLPString(content, 4, 100000);\n}\n\nexport interface MemoString {\n  readonly type: StacksMessageType.MemoString;\n  readonly content: string;\n}\n\nexport function createMemoString(content: string): MemoString {\n  if (content && exceedsMaxLengthBytes(content, MEMO_MAX_LENGTH_BYTES)) {\n    throw new Error(`Memo exceeds maximum length of ${MEMO_MAX_LENGTH_BYTES.toString()} bytes`);\n  }\n  return { type: StacksMessageType.MemoString, content };\n}\n\nexport function serializeMemoString(memoString: MemoString): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  const contentBuffer = Buffer.from(memoString.content);\n  const paddedContent = rightPadHexToLength(\n    contentBuffer.toString('hex'),\n    MEMO_MAX_LENGTH_BYTES * 2\n  );\n  bufferArray.push(Buffer.from(paddedContent, 'hex'));\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeMemoString(bufferReader: BufferReader): MemoString {\n  const content = bufferReader.readBuffer(MEMO_MAX_LENGTH_BYTES).toString();\n  return { type: StacksMessageType.MemoString, content };\n}\n\nexport interface AssetInfo {\n  readonly type: StacksMessageType.AssetInfo;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n  readonly assetName: LengthPrefixedString;\n}\n\n/**\n * Parse a fully qualified string that identifies the token type.\n * @param id - String in the format `{address}.{contractName}::{assetName}`\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G.example-contract::example-token\"\n */\nexport function parseAssetInfoString(id: string): AssetInfo {\n  const [assetAddress, assetContractName, assetTokenName] = id.split(/\\.|::/);\n  const assetInfo = createAssetInfo(assetAddress, assetContractName, assetTokenName);\n  return assetInfo;\n}\n\nexport function createAssetInfo(\n  addressString: string,\n  contractName: string,\n  assetName: string\n): AssetInfo {\n  return {\n    type: StacksMessageType.AssetInfo,\n    address: createAddress(addressString),\n    contractName: createLPString(contractName),\n    assetName: createLPString(assetName),\n  };\n}\n\nexport function serializeAssetInfo(info: AssetInfo): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.push(serializeAddress(info.address));\n  bufferArray.push(serializeLPString(info.contractName));\n  bufferArray.push(serializeLPString(info.assetName));\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeAssetInfo(bufferReader: BufferReader): AssetInfo {\n  return {\n    type: StacksMessageType.AssetInfo,\n    address: deserializeAddress(bufferReader),\n    contractName: deserializeLPString(bufferReader),\n    assetName: deserializeLPString(bufferReader),\n  };\n}\n\nexport interface LengthPrefixedList {\n  readonly type: StacksMessageType.LengthPrefixedList;\n  readonly lengthPrefixBytes: number;\n  readonly values: StacksMessage[];\n}\n\nexport function createLPList<T extends StacksMessage>(\n  values: T[],\n  lengthPrefixBytes?: number\n): LengthPrefixedList {\n  return {\n    type: StacksMessageType.LengthPrefixedList,\n    lengthPrefixBytes: lengthPrefixBytes || 4,\n    values,\n  };\n}\n\nexport function serializeLPList(lpList: LengthPrefixedList): Buffer {\n  const list = lpList.values;\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendHexString(intToHexString(list.length, lpList.lengthPrefixBytes));\n  for (let index = 0; index < list.length; index++) {\n    bufferArray.push(serializeStacksMessage(list[index]));\n  }\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeLPList(\n  bufferReader: BufferReader,\n  type: StacksMessageType,\n  lengthPrefixBytes?: number\n): LengthPrefixedList {\n  const length = hexStringToInt(bufferReader.readBuffer(lengthPrefixBytes || 4).toString('hex'));\n  const l: StacksMessage[] = [];\n  for (let index = 0; index < length; index++) {\n    switch (type) {\n      case StacksMessageType.Address:\n        l.push(deserializeAddress(bufferReader));\n        break;\n      case StacksMessageType.LengthPrefixedString:\n        l.push(deserializeLPString(bufferReader));\n        break;\n      case StacksMessageType.MemoString:\n        l.push(deserializeMemoString(bufferReader));\n        break;\n      case StacksMessageType.AssetInfo:\n        l.push(deserializeAssetInfo(bufferReader));\n        break;\n      case StacksMessageType.PostCondition:\n        l.push(deserializePostCondition(bufferReader));\n        break;\n      case StacksMessageType.PublicKey:\n        l.push(deserializePublicKey(bufferReader));\n        break;\n      case StacksMessageType.TransactionAuthField:\n        l.push(deserializeTransactionAuthField(bufferReader));\n        break;\n    }\n  }\n  return createLPList(l, lengthPrefixBytes);\n}\n","import {\n  Address,\n  LengthPrefixedString,\n  createAddress,\n  createLPString,\n  addressToString,\n} from '../../types';\nimport { ClarityType } from '../clarityValue';\n\ntype PrincipalCV = StandardPrincipalCV | ContractPrincipalCV;\n\ninterface StandardPrincipalCV {\n  readonly type: ClarityType.PrincipalStandard;\n  readonly address: Address;\n}\n\ninterface ContractPrincipalCV {\n  readonly type: ClarityType.PrincipalContract;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n}\n\nfunction principalToString(principal: PrincipalCV): string {\n  if (principal.type === ClarityType.PrincipalStandard) {\n    return addressToString(principal.address);\n  } else if (principal.type === ClarityType.PrincipalContract) {\n    const address = addressToString(principal.address);\n    return `${address}.${principal.contractName.content}`;\n  } else {\n    throw new Error(`Unexpected principal data: ${JSON.stringify(principal)}`);\n  }\n}\n\nfunction principalCV(principal: string): PrincipalCV {\n  if (principal.includes('.')) {\n    const [address, contractName] = principal.split('.');\n    return contractPrincipalCV(address, contractName);\n  } else {\n    return standardPrincipalCV(principal);\n  }\n}\n\nfunction standardPrincipalCV(addressString: string): StandardPrincipalCV {\n  const addr = createAddress(addressString);\n  return { type: ClarityType.PrincipalStandard, address: addr };\n}\n\nfunction standardPrincipalCVFromAddress(address: Address): StandardPrincipalCV {\n  return { type: ClarityType.PrincipalStandard, address };\n}\n\nfunction contractPrincipalCV(addressString: string, contractName: string): ContractPrincipalCV {\n  const addr = createAddress(addressString);\n  const lengthPrefixedContractName = createLPString(contractName);\n  return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\n\nfunction contractPrincipalCVFromAddress(\n  address: Address,\n  contractName: LengthPrefixedString\n): ContractPrincipalCV {\n  if (Buffer.byteLength(contractName.content) >= 128) {\n    throw new Error('Contract name must be less than 128 bytes');\n  }\n  return { type: ClarityType.PrincipalContract, address, contractName };\n}\n\nfunction contractPrincipalCVFromStandard(\n  sp: StandardPrincipalCV,\n  contractName: string\n): ContractPrincipalCV {\n  const lengthPrefixedContractName = createLPString(contractName);\n  return {\n    type: ClarityType.PrincipalContract,\n    address: sp.address,\n    contractName: lengthPrefixedContractName,\n  };\n}\n\nexport {\n  PrincipalCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  principalCV,\n  principalToString,\n  standardPrincipalCV,\n  standardPrincipalCVFromAddress,\n  contractPrincipalCV,\n  contractPrincipalCVFromAddress,\n  contractPrincipalCVFromStandard,\n};\n","import {\n  BooleanCV,\n  OptionalCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseErrorCV,\n  ResponseOkCV,\n  ListCV,\n  TupleCV,\n  StringAsciiCV,\n  StringUtf8CV,\n} from '.';\n\nimport { principalToString } from './types/principalCV';\nimport { CLARITY_INT_SIZE } from '../constants';\n\n/**\n * Type IDs corresponding to each of the Clarity value types as described here:\n * {@link https://github.com/blockstack/blockstack-core/blob/sip/sip-005/sip/sip-005-blocks-and-transactions.md#clarity-value-representation}\n */\nexport enum ClarityType {\n  Int = 0x00,\n  UInt = 0x01,\n  Buffer = 0x02,\n  BoolTrue = 0x03,\n  BoolFalse = 0x04,\n  PrincipalStandard = 0x05,\n  PrincipalContract = 0x06,\n  ResponseOk = 0x07,\n  ResponseErr = 0x08,\n  OptionalNone = 0x09,\n  OptionalSome = 0x0a,\n  List = 0x0b,\n  Tuple = 0x0c,\n  StringASCII = 0x0d,\n  StringUTF8 = 0x0e,\n}\n\nexport type ClarityValue =\n  | BooleanCV\n  | OptionalCV\n  | BufferCV\n  | IntCV\n  | UIntCV\n  | StandardPrincipalCV\n  | ContractPrincipalCV\n  | ResponseErrorCV\n  | ResponseOkCV\n  | ListCV\n  | TupleCV\n  | StringAsciiCV\n  | StringUtf8CV;\n\nexport function cvToString(val: ClarityValue, encoding: 'tryAscii' | 'hex' = 'hex'): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return 'true';\n    case ClarityType.BoolFalse:\n      return 'false';\n    case ClarityType.Int:\n      return val.value.fromTwos(CLARITY_INT_SIZE).toString();\n    case ClarityType.UInt:\n      return `u${val.value.toString()}`;\n    case ClarityType.Buffer:\n      if (encoding === 'tryAscii') {\n        const str = val.buffer.toString('ascii');\n        if (/[ -~]/.test(str)) {\n          return JSON.stringify(str);\n        }\n      }\n      return `0x${val.buffer.toString('hex')}`;\n    case ClarityType.OptionalNone:\n      return 'none';\n    case ClarityType.OptionalSome:\n      return `(some ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseErr:\n      return `(err ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseOk:\n      return `(ok ${cvToString(val.value, encoding)})`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return `(list ${val.list.map(v => cvToString(v, encoding)).join(' ')})`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.data)\n        .map(key => `(${key} ${cvToString(val.data[key], encoding)})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `\"${val.data}\"`;\n    case ClarityType.StringUTF8:\n      return `u\"${val.data}\"`;\n  }\n}\n\nexport function cvToValue(val: ClarityValue): any {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return true;\n    case ClarityType.BoolFalse:\n      return false;\n    case ClarityType.Int:\n      return val.value.fromTwos(CLARITY_INT_SIZE).toNumber();\n    case ClarityType.UInt:\n      return val.value.toNumber();\n    case ClarityType.Buffer:\n      return `0x${val.buffer.toString('hex')}`;\n    case ClarityType.OptionalNone:\n      return null;\n    case ClarityType.OptionalSome:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseErr:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseOk:\n      return cvToJSON(val.value);\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return val.list.map(v => cvToJSON(v));\n    case ClarityType.Tuple:\n      const result: { [key: string]: any } = {};\n      Object.keys(val.data).forEach(key => {\n        result[key] = cvToJSON(val.data[key]);\n      });\n      return result;\n    case ClarityType.StringASCII:\n      return val.data;\n    case ClarityType.StringUTF8:\n      return val.data;\n  }\n}\n\nexport function cvToJSON(val: ClarityValue): any {\n  switch (val.type) {\n    case ClarityType.ResponseErr:\n      return { type: getCVTypeString(val), value: cvToValue(val), success: false };\n    case ClarityType.ResponseOk:\n      return { type: getCVTypeString(val), value: cvToValue(val), success: true };\n    default:\n      return { type: getCVTypeString(val), value: cvToValue(val) };\n  }\n}\n\nexport function getCVTypeString(val: ClarityValue): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return 'bool';\n    case ClarityType.Int:\n      return 'int';\n    case ClarityType.UInt:\n      return 'uint';\n    case ClarityType.Buffer:\n      return `(buff ${val.buffer.length})`;\n    case ClarityType.OptionalNone:\n      return '(optional none)';\n    case ClarityType.OptionalSome:\n      return `(optional ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseErr:\n      return `(response UnknownType ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseOk:\n      return `(response ${getCVTypeString(val.value)} UnknownType)`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return 'principal';\n    case ClarityType.List:\n      return `(list ${val.list.length} ${getCVTypeString(val.list[0])})`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.data)\n        .map(key => `(${key} ${getCVTypeString(val.data[key])})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `(string-ascii ${Buffer.from(val.data, 'ascii').length})`;\n    case ClarityType.StringUTF8:\n      return `(string-utf8 ${Buffer.from(val.data, 'utf8').length})`;\n  }\n}\n","import { ClarityType } from '../clarityValue';\n\ntype BooleanCV = TrueCV | FalseCV;\n\ninterface TrueCV {\n  type: ClarityType.BoolTrue;\n}\n\ninterface FalseCV {\n  type: ClarityType.BoolFalse;\n}\n\nconst trueCV = (): BooleanCV => ({ type: ClarityType.BoolTrue });\nconst falseCV = (): BooleanCV => ({ type: ClarityType.BoolFalse });\n\nexport { BooleanCV, TrueCV, FalseCV, trueCV, falseCV };\n","import BigNum from 'bn.js';\nimport { CLARITY_INT_SIZE } from '../../constants';\nimport { ClarityType } from '../clarityValue';\n\ninterface IntCV {\n  readonly type: ClarityType.Int;\n  readonly value: BigNum;\n}\n\nconst intCV = (value: number | string | Buffer): IntCV => {\n  const bn = new BigNum(value);\n  const twos = bn.toTwos(CLARITY_INT_SIZE);\n\n  if (twos.bitLength() > CLARITY_INT_SIZE) {\n    throw new Error('Cannot construct clarity integer from value greater than INT_SIZE bits');\n  }\n\n  return { type: ClarityType.Int, value: twos };\n};\n\ninterface UIntCV {\n  readonly type: ClarityType.UInt;\n  readonly value: BigNum;\n}\n\nconst uintCV = (value: number | string | Buffer): UIntCV => {\n  const bn = new BigNum(value);\n  const twos = bn.toTwos(CLARITY_INT_SIZE);\n\n  if (twos.isNeg()) {\n    throw new Error('Cannot construct unsigned clarity integer from negative value');\n  } else if (twos.bitLength() > CLARITY_INT_SIZE) {\n    throw new Error('Cannot construct unsigned clarity integer from value greater than 128 bits');\n  }\n\n  return { type: ClarityType.UInt, value: twos };\n};\n\nexport { IntCV, UIntCV, intCV, uintCV };\n","import { ClarityType } from '../clarityValue';\n\ninterface BufferCV {\n  readonly type: ClarityType.Buffer;\n  readonly buffer: Buffer;\n}\n\nconst bufferCV = (buffer: Buffer): BufferCV => {\n  if (buffer.length > 1000000) {\n    throw new Error('Cannot construct clarity buffer that is greater than 1MB');\n  }\n\n  return { type: ClarityType.Buffer, buffer };\n};\n\nconst bufferCVFromString = (str: string): BufferCV => bufferCV(Buffer.from(str));\n\nexport { BufferCV, bufferCV, bufferCVFromString };\n","import { ClarityType, ClarityValue } from '../clarityValue';\n\ntype OptionalCV = NoneCV | SomeCV;\n\ninterface NoneCV {\n  readonly type: ClarityType.OptionalNone;\n}\n\ninterface SomeCV {\n  readonly type: ClarityType.OptionalSome;\n  readonly value: ClarityValue;\n}\n\nconst noneCV = (): OptionalCV => ({ type: ClarityType.OptionalNone });\nconst someCV = (value: ClarityValue): OptionalCV => ({ type: ClarityType.OptionalSome, value });\nconst optionalCVOf = (value?: ClarityValue): OptionalCV => {\n  if (value) {\n    return someCV(value);\n  } else {\n    return noneCV();\n  }\n};\n\nexport { OptionalCV, NoneCV, SomeCV, noneCV, someCV, optionalCVOf };\n","import { ClarityType, ClarityValue } from '../clarityValue';\n\ntype ResponseCV = ResponseErrorCV | ResponseOkCV;\n\ninterface ResponseErrorCV {\n  readonly type: ClarityType.ResponseErr;\n  readonly value: ClarityValue;\n}\n\ninterface ResponseOkCV {\n  readonly type: ClarityType.ResponseOk;\n  readonly value: ClarityValue;\n}\n\nfunction responseErrorCV(value: ClarityValue): ResponseErrorCV {\n  return { type: ClarityType.ResponseErr, value };\n}\n\nfunction responseOkCV(value: ClarityValue): ResponseOkCV {\n  return { type: ClarityType.ResponseOk, value };\n}\n\nexport { ResponseCV, ResponseErrorCV, ResponseOkCV, responseErrorCV, responseOkCV };\n","import { ClarityValue, ClarityType } from '../clarityValue';\n\ninterface ListCV {\n  type: ClarityType.List;\n  list: ClarityValue[];\n}\n\nfunction listCV<T extends ClarityValue>(values: T[]): ListCV {\n  return { type: ClarityType.List, list: values };\n}\n\nexport { ListCV, listCV };\n","import { ClarityType, ClarityValue } from '../clarityValue';\nimport { isClarityName } from '../../utils';\n\ntype TupleData = { [key: string]: ClarityValue };\n\ninterface TupleCV {\n  type: ClarityType.Tuple;\n  data: TupleData;\n}\n\nfunction tupleCV(data: TupleData): TupleCV {\n  for (const key in data) {\n    if (!isClarityName(key)) {\n      throw new Error(`\"${key}\" is not a valid Clarity name`);\n    }\n  }\n\n  return { type: ClarityType.Tuple, data };\n}\n\nexport { TupleCV, tupleCV };\n","import { ClarityType } from '../clarityValue';\n\ninterface StringAsciiCV {\n  readonly type: ClarityType.StringASCII;\n  readonly data: string;\n}\n\ninterface StringUtf8CV {\n  readonly type: ClarityType.StringUTF8;\n  readonly data: string;\n}\n\nconst stringAsciiCV = (data: string): StringAsciiCV => {\n  return { type: ClarityType.StringASCII, data };\n};\n\nconst stringUtf8CV = (data: string): StringUtf8CV => {\n  return { type: ClarityType.StringUTF8, data };\n};\n\nconst stringCV = (data: string, encoding: 'ascii' | 'utf8'): StringAsciiCV | StringUtf8CV => {\n  switch (encoding) {\n    case 'ascii':\n      return stringAsciiCV(data);\n    case 'utf8':\n      return stringAsciiCV(data);\n  }\n};\n\nexport { StringAsciiCV, StringUtf8CV, stringAsciiCV, stringUtf8CV, stringCV };\n","import { serializeAddress, serializeLPString, createLPString } from '../types';\nimport {\n  BooleanCV,\n  OptionalCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseCV,\n  ListCV,\n  TupleCV,\n  ClarityType,\n  ClarityValue,\n} from '.';\nimport { BufferArray } from '../utils';\nimport { SerializationError } from '../errors';\nimport { StringAsciiCV, StringUtf8CV } from './types/stringCV';\n\nfunction bufferWithTypeID(typeId: ClarityType, buffer: Buffer): Buffer {\n  const id = Buffer.from([typeId]);\n  return Buffer.concat([id, buffer]);\n}\n\nfunction serializeBoolCV(value: BooleanCV): Buffer {\n  return Buffer.from([value.type]);\n}\n\nfunction serializeOptionalCV(cv: OptionalCV): Buffer {\n  if (cv.type === ClarityType.OptionalNone) {\n    return Buffer.from([cv.type]);\n  } else {\n    return bufferWithTypeID(cv.type, serializeCV(cv.value));\n  }\n}\n\nfunction serializeBufferCV(cv: BufferCV): Buffer {\n  const length = Buffer.alloc(4);\n  length.writeUInt32BE(cv.buffer.length, 0);\n  return bufferWithTypeID(cv.type, Buffer.concat([length, cv.buffer]));\n}\n\nfunction serializeIntCV(cv: IntCV | UIntCV): Buffer {\n  const buffer = cv.value.toArrayLike(Buffer, 'be', 16);\n  return bufferWithTypeID(cv.type, buffer);\n}\n\nfunction serializeStandardPrincipalCV(cv: StandardPrincipalCV): Buffer {\n  return bufferWithTypeID(cv.type, serializeAddress(cv.address));\n}\n\nfunction serializeContractPrincipalCV(cv: ContractPrincipalCV): Buffer {\n  return bufferWithTypeID(\n    cv.type,\n    Buffer.concat([serializeAddress(cv.address), serializeLPString(cv.contractName)])\n  );\n}\n\nfunction serializeResponseCV(cv: ResponseCV) {\n  return bufferWithTypeID(cv.type, serializeCV(cv.value));\n}\n\nfunction serializeListCV(cv: ListCV) {\n  const buffers = new BufferArray();\n\n  const length = Buffer.alloc(4);\n  length.writeUInt32BE(cv.list.length, 0);\n  buffers.push(length);\n\n  for (const value of cv.list) {\n    const serializedValue = serializeCV(value);\n    buffers.push(serializedValue);\n  }\n\n  return bufferWithTypeID(cv.type, buffers.concatBuffer());\n}\n\nfunction serializeTupleCV(cv: TupleCV) {\n  const buffers = new BufferArray();\n\n  const length = Buffer.alloc(4);\n  length.writeUInt32BE(Object.keys(cv.data).length, 0);\n  buffers.push(length);\n\n  const lexicographicOrder = Object.keys(cv.data).sort((a, b) => {\n    const bufA = Buffer.from(a);\n    const bufB = Buffer.from(b);\n    return bufA.compare(bufB);\n  });\n\n  for (const key of lexicographicOrder) {\n    const nameWithLength = createLPString(key);\n    buffers.push(serializeLPString(nameWithLength));\n\n    const serializedValue = serializeCV(cv.data[key]);\n    buffers.push(serializedValue);\n  }\n\n  return bufferWithTypeID(cv.type, buffers.concatBuffer());\n}\n\nfunction serializeStringCV(cv: StringAsciiCV | StringUtf8CV, encoding: 'ascii' | 'utf8') {\n  const buffers = new BufferArray();\n\n  const str = Buffer.from(cv.data, encoding);\n  const len = Buffer.alloc(4);\n  len.writeUInt32BE(str.length, 0);\n\n  buffers.push(len);\n  buffers.push(str);\n\n  return bufferWithTypeID(cv.type, buffers.concatBuffer());\n}\n\nfunction serializeStringAsciiCV(cv: StringAsciiCV) {\n  return serializeStringCV(cv, 'ascii');\n}\n\nfunction serializeStringUtf8CV(cv: StringUtf8CV) {\n  return serializeStringCV(cv, 'utf8');\n}\n\nexport function serializeCV(value: ClarityValue): Buffer {\n  switch (value.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return serializeBoolCV(value);\n    case ClarityType.OptionalNone:\n    case ClarityType.OptionalSome:\n      return serializeOptionalCV(value);\n    case ClarityType.Buffer:\n      return serializeBufferCV(value);\n    case ClarityType.Int:\n    case ClarityType.UInt:\n      return serializeIntCV(value);\n    case ClarityType.PrincipalStandard:\n      return serializeStandardPrincipalCV(value);\n    case ClarityType.PrincipalContract:\n      return serializeContractPrincipalCV(value);\n    case ClarityType.ResponseOk:\n    case ClarityType.ResponseErr:\n      return serializeResponseCV(value);\n    case ClarityType.List:\n      return serializeListCV(value);\n    case ClarityType.Tuple:\n      return serializeTupleCV(value);\n    case ClarityType.StringASCII:\n      return serializeStringAsciiCV(value);\n    case ClarityType.StringUTF8:\n      return serializeStringUtf8CV(value);\n    default:\n      throw new SerializationError('Unable to serialize. Invalid Clarity Value.');\n  }\n}\n","import { SmartBuffer, SmartBufferOptions } from 'smart-buffer';\n\nfunction createEnumChecker<T extends string, TEnumValue extends number>(\n  enumVariable: { [key in T]: TEnumValue }\n): (value: number) => value is TEnumValue {\n  // Create a set of valid enum number values.\n  const enumValues = Object.values<number>(enumVariable).filter(v => typeof v === 'number');\n  const enumValueSet = new Set<number>(enumValues);\n  return (value: number): value is TEnumValue => enumValueSet.has(value);\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst enumCheckFunctions = new Map<object, (value: number) => boolean>();\n\n/**\n * Type guard to check if a given value is a valid enum value.\n * @param enumVariable - Literal `enum` type.\n * @param value - A value to check against the enum's values.\n * @example\n * ```ts\n * enum Color {\n *   Purple = 3,\n *   Orange = 5\n * }\n * const val: number = 3;\n * if (isEnum(Color, val)) {\n *   // `val` is known as enum type `Color`, e.g.:\n *   const colorVal: Color = val;\n * }\n * ```\n */\nexport function isEnum<T extends string, TEnumValue extends number>(\n  enumVariable: { [key in T]: TEnumValue },\n  value: number\n): value is TEnumValue {\n  const checker = enumCheckFunctions.get(enumVariable);\n  if (checker !== undefined) {\n    return checker(value);\n  }\n  const newChecker = createEnumChecker(enumVariable);\n  enumCheckFunctions.set(enumVariable, newChecker);\n  return isEnum(enumVariable, value);\n}\n\nexport class BufferReader {\n  smartBuffer: SmartBuffer;\n\n  static fromBuffer(buffer: Buffer): BufferReader {\n    return new BufferReader({ buff: buffer });\n  }\n\n  constructor(options?: SmartBufferOptions | Buffer) {\n    if (Buffer.isBuffer(options)) {\n      this.smartBuffer = new SmartBuffer({ buff: options });\n    } else {\n      this.smartBuffer = new SmartBuffer(options);\n    }\n  }\n\n  readBuffer(length: number): Buffer {\n    return this.smartBuffer.readBuffer(length);\n  }\n\n  readUInt32BE(offset?: number): number {\n    return this.smartBuffer.readUInt32BE(offset);\n  }\n\n  readUInt8(): number {\n    return this.smartBuffer.readUInt8();\n  }\n\n  readUInt16BE(): number {\n    return this.smartBuffer.readUInt16BE();\n  }\n\n  readBigUIntLE(length: number): bigint {\n    const buffer = Buffer.from(this.smartBuffer.readBuffer(length)).reverse();\n    const hex = buffer.toString();\n    const num = BigInt(`0x${hex}`);\n    return num;\n  }\n\n  readBigUIntBE(length: number): bigint {\n    const buffer = this.smartBuffer.readBuffer(length);\n    const hex = buffer.toString('hex');\n    const num = BigInt(`0x${hex}`);\n    return num;\n  }\n\n  readBigUInt64BE(): bigint {\n    return this.smartBuffer.readBigUInt64BE();\n  }\n\n  readString(arg?: number | BufferEncoding, encoding?: BufferEncoding): string {\n    return this.smartBuffer.readString(arg, encoding);\n  }\n\n  get readOffset(): number {\n    return this.smartBuffer.readOffset;\n  }\n\n  set readOffset(val: number) {\n    this.smartBuffer.readOffset = val;\n  }\n\n  get internalBuffer(): Buffer {\n    return this.smartBuffer.internalBuffer;\n  }\n\n  readUInt8Enum<T extends string, TEnumValue extends number>(\n    enumVariable: { [key in T]: TEnumValue },\n    invalidEnumErrorFormatter: (val: number) => Error\n  ): TEnumValue {\n    const num = this.smartBuffer.readUInt8();\n    if (isEnum(enumVariable, num)) {\n      return num;\n    } else {\n      throw invalidEnumErrorFormatter(num);\n    }\n  }\n}\n","import {\n  ClarityType,\n  ClarityValue,\n  intCV,\n  uintCV,\n  bufferCV,\n  trueCV,\n  falseCV,\n  standardPrincipalCVFromAddress,\n  contractPrincipalCVFromAddress,\n  responseOkCV,\n  responseErrorCV,\n  noneCV,\n  someCV,\n  listCV,\n  tupleCV,\n} from '.';\nimport { BufferReader } from '../bufferReader';\nimport { deserializeAddress, deserializeLPString } from '../types';\nimport { DeserializationError } from '../errors';\nimport { stringAsciiCV, stringUtf8CV } from './types/stringCV';\n\nexport default function deserializeCV(buffer: BufferReader | Buffer): ClarityValue {\n  const bufferReader = Buffer.isBuffer(buffer) ? new BufferReader(buffer) : buffer;\n  const type = bufferReader.readUInt8Enum(ClarityType, n => {\n    throw new DeserializationError(`Cannot recognize Clarity Type: ${n}`);\n  });\n\n  switch (type) {\n    case ClarityType.Int:\n      return intCV(bufferReader.readBuffer(16));\n\n    case ClarityType.UInt:\n      return uintCV(bufferReader.readBuffer(16));\n\n    case ClarityType.Buffer:\n      const bufferLength = bufferReader.readUInt32BE();\n      return bufferCV(bufferReader.readBuffer(bufferLength));\n\n    case ClarityType.BoolTrue:\n      return trueCV();\n\n    case ClarityType.BoolFalse:\n      return falseCV();\n\n    case ClarityType.PrincipalStandard:\n      const sAddress = deserializeAddress(bufferReader);\n      return standardPrincipalCVFromAddress(sAddress);\n\n    case ClarityType.PrincipalContract:\n      const cAddress = deserializeAddress(bufferReader);\n      const contractName = deserializeLPString(bufferReader);\n      return contractPrincipalCVFromAddress(cAddress, contractName);\n\n    case ClarityType.ResponseOk:\n      return responseOkCV(deserializeCV(bufferReader));\n\n    case ClarityType.ResponseErr:\n      return responseErrorCV(deserializeCV(bufferReader));\n\n    case ClarityType.OptionalNone:\n      return noneCV();\n\n    case ClarityType.OptionalSome:\n      return someCV(deserializeCV(bufferReader));\n\n    case ClarityType.List:\n      const listLength = bufferReader.readUInt32BE();\n      const listContents: ClarityValue[] = [];\n      for (let i = 0; i < listLength; i++) {\n        listContents.push(deserializeCV(bufferReader));\n      }\n      return listCV(listContents);\n\n    case ClarityType.Tuple:\n      const tupleLength = bufferReader.readUInt32BE();\n      const tupleContents: { [key: string]: ClarityValue } = {};\n      for (let i = 0; i < tupleLength; i++) {\n        const clarityName = deserializeLPString(bufferReader).content;\n        if (clarityName === undefined) {\n          throw new DeserializationError('\"content\" is undefined');\n        }\n        tupleContents[clarityName] = deserializeCV(bufferReader);\n      }\n      return tupleCV(tupleContents);\n\n    case ClarityType.StringASCII:\n      const asciiStrLen = bufferReader.readUInt32BE();\n      const asciiStr = bufferReader.readBuffer(asciiStrLen).toString('ascii');\n      return stringAsciiCV(asciiStr);\n\n    case ClarityType.StringUTF8:\n      const utf8StrLen = bufferReader.readUInt32BE();\n      const utf8Str = bufferReader.readBuffer(utf8StrLen).toString('utf8');\n      return stringUtf8CV(utf8Str);\n\n    default:\n      throw new DeserializationError(\n        'Unable to deserialize Clarity Value from buffer. Could not find valid Clarity Type.'\n      );\n  }\n}\n","import { sha256, sha512 } from 'sha.js';\nimport { ClarityValue, serializeCV } from './clarity';\nimport RIPEMD160 from 'ripemd160-min';\nimport randombytes from 'randombytes';\nimport { deserializeCV } from './clarity';\nimport fetch from 'cross-fetch';\nimport { c32addressDecode } from 'c32check';\nimport lodashCloneDeep from 'lodash/cloneDeep';\n\nexport { randombytes as randomBytes };\n\nexport class BufferArray {\n  _value: Buffer[] = [];\n  get value() {\n    return this._value;\n  }\n  appendHexString(hexString: string) {\n    this.value.push(Buffer.from(hexString, 'hex'));\n  }\n\n  push(buffer: Buffer) {\n    return this._value.push(buffer);\n  }\n  appendByte(octet: number) {\n    if (!Number.isInteger(octet) || octet < 0 || octet > 255) {\n      throw new Error(`Value ${octet} is not a valid byte`);\n    }\n    this.value.push(Buffer.from([octet]));\n  }\n\n  concatBuffer(): Buffer {\n    return Buffer.concat(this.value);\n  }\n}\n\nexport const leftPadHex = (hexString: string): string =>\n  hexString.length % 2 == 0 ? hexString : `0${hexString}`;\n\nexport const leftPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padStart(length, '0');\n\nexport const rightPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padEnd(length, '0');\n\nexport const intToHexString = (integer: number, lengthBytes = 8): string =>\n  integer.toString(16).padStart(lengthBytes * 2, '0');\n\nexport const hexStringToInt = (hexString: string): number => parseInt(hexString, 16);\n\nexport const exceedsMaxLengthBytes = (string: string, maxLengthBytes: number): boolean =>\n  string ? Buffer.from(string).length > maxLengthBytes : false;\n\nexport function cloneDeep<T>(obj: T): T {\n  return lodashCloneDeep(obj);\n}\n\nexport function omit<T, K extends keyof any>(obj: T, prop: K): Omit<T, K> {\n  const clone = cloneDeep(obj);\n  // @ts-expect-error\n  delete clone[prop];\n  return clone;\n}\n\nexport class sha512_256 extends sha512 {\n  constructor() {\n    super();\n    // set the \"SHA-512/256\" initialization vector\n    // see https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n    Object.assign(this, {\n      _ah: 0x22312194,\n      _al: 0xfc2bf72c,\n      _bh: 0x9f555fa3,\n      _bl: 0xc84c64c2,\n      _ch: 0x2393b86b,\n      _cl: 0x6f53b151,\n      _dh: 0x96387719,\n      _dl: 0x5940eabd,\n      _eh: 0x96283ee2,\n      _el: 0xa88effe3,\n      _fh: 0xbe5e1e25,\n      _fl: 0x53863992,\n      _gh: 0x2b0199fc,\n      _gl: 0x2c85b8aa,\n      _hh: 0x0eb72ddc,\n      _hl: 0x81c52ca2,\n    });\n  }\n  digest(): Buffer;\n  digest(encoding: import('crypto').HexBase64Latin1Encoding): string;\n  digest(encoding?: import('crypto').HexBase64Latin1Encoding): string | Buffer {\n    // \"SHA-512/256\" truncates the digest to 32 bytes\n    const buff = super.digest().slice(0, 32);\n    return encoding ? buff.toString(encoding) : buff;\n  }\n}\n\nexport const txidFromData = (data: Buffer): string => new sha512_256().update(data).digest('hex');\n\nexport const hash160 = (input: Buffer): Buffer => {\n  const sha256Result = new sha256().update(input).digest();\n  return Buffer.from(new RIPEMD160().update(sha256Result).digest());\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// single-sig address (p2pkh)\nexport const hashP2PKH = (input: Buffer): string => {\n  return hash160(input).toString('hex');\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// multi-sig address (p2sh)\nexport const hashP2SH = (numSigs: number, pubKeys: Buffer[]): string => {\n  if (numSigs > 15 || pubKeys.length > 15) {\n    throw Error('P2SH multisig address can only contain up to 15 public keys');\n  }\n\n  // construct P2SH script\n  const bufferArray = new BufferArray();\n  // OP_n\n  bufferArray.appendByte(80 + numSigs);\n  // public keys prepended by their length\n  pubKeys.forEach(pubKey => {\n    bufferArray.appendByte(pubKey.length);\n    bufferArray.push(pubKey);\n  });\n  // OP_m\n  bufferArray.appendByte(80 + pubKeys.length);\n  // OP_CHECKMULTISIG\n  bufferArray.appendByte(174);\n\n  const redeemScript = bufferArray.concatBuffer();\n  const redeemScriptHash = hash160(redeemScript);\n  return redeemScriptHash.toString('hex');\n};\n\nexport function isClarityName(name: string) {\n  const regex = /^[a-zA-Z]([a-zA-Z0-9]|[-_!?+<>=/*])*$|^[-+=/*]$|^[<>]=?$/;\n  return regex.test(name) && name.length < 128;\n}\n\n/** @ignore */\nexport async function fetchPrivate(input: RequestInfo, init?: RequestInit): Promise<Response> {\n  const defaultFetchOpts: RequestInit = {\n    referrer: 'no-referrer',\n    referrerPolicy: 'no-referrer',\n  };\n  const fetchOpts = Object.assign(defaultFetchOpts, init);\n  const fetchResult = await fetch(input, fetchOpts);\n  return fetchResult;\n}\n/**\n * Converts a clarity value to a hex encoded string with `0x` prefix\n * @param {ClarityValue} cv  - the clarity value to convert\n */\nexport function cvToHex(cv: ClarityValue) {\n  const serialized = serializeCV(cv);\n  return `0x${serialized.toString('hex')}`;\n}\n\n/**\n * Converts a hex encoded string to a clarity value\n * @param {string} hex - the hex encoded string with or without `0x` prefix\n */\nexport function hexToCV(hex: string) {\n  const hexWithoutPrefix = hex.startsWith('0x') ? hex.slice(2) : hex;\n  const bufferCV = Buffer.from(hexWithoutPrefix, 'hex');\n  return deserializeCV(bufferCV);\n}\n/**\n * Read only function response object\n *\n * @param {Boolean} okay - the status of the response\n * @param {string} result - serialized hex clarity value\n */\n\nexport interface ReadOnlyFunctionSuccessResponse {\n  okay: true;\n  result: string;\n}\n\nexport interface ReadOnlyFunctionErrorResponse {\n  okay: false;\n  cause: string;\n}\n\nexport type ReadOnlyFunctionResponse =\n  | ReadOnlyFunctionSuccessResponse\n  | ReadOnlyFunctionErrorResponse;\n\n/**\n * Converts the response of a read-only function call into its Clarity Value\n * @param param\n */\nexport const parseReadOnlyResponse = (response: ReadOnlyFunctionResponse): ClarityValue => {\n  if (response.okay) {\n    return hexToCV(response.result);\n  } else {\n    throw new Error(response.cause);\n  }\n};\n\nexport const validateStacksAddress = (stacksAddress: string): boolean => {\n  try {\n    c32addressDecode(stacksAddress);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n","import {\n  AddressHashMode,\n  AuthType,\n  MultiSigHashMode,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  SingleSigHashMode,\n  StacksMessageType,\n} from './constants';\n\nimport { BufferArray, cloneDeep, leftPadHex, txidFromData } from './utils';\n\nimport {\n  addressFromPublicKeys,\n  createEmptyAddress,\n  createLPList,\n  deserializeLPList,\n  serializeLPList,\n} from './types';\n\nimport {\n  compressPublicKey,\n  createStacksPublicKey,\n  deserializePublicKey,\n  getPublicKey,\n  isCompressed,\n  publicKeyFromSignature,\n  serializePublicKey,\n  signWithKey,\n  StacksPrivateKey,\n  StacksPublicKey,\n} from './keys';\n\nimport BigNum from 'bn.js';\nimport { BufferReader } from './bufferReader';\nimport { DeserializationError, SerializationError, SigningError } from './errors';\n\nabstract class Deserializable {\n  abstract serialize(): Buffer;\n  abstract deserialize(bufferReader: BufferReader): void;\n  static deserialize<T extends Deserializable>(this: new () => T, bufferReader: BufferReader): T {\n    const message = new this();\n    message.deserialize(bufferReader);\n    return message;\n  }\n}\n\nexport interface MessageSignature {\n  readonly type: StacksMessageType.MessageSignature;\n  data: string;\n}\n\nexport function createMessageSignature(signature: string): MessageSignature {\n  const length = Buffer.from(signature, 'hex').byteLength;\n  if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n    throw Error('Invalid signature');\n  }\n\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: signature,\n  };\n}\n\nexport function emptyMessageSignature(): MessageSignature {\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: Buffer.alloc(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, 0x00).toString('hex'),\n  };\n}\n\nexport function serializeMessageSignature(messageSignature: MessageSignature): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendHexString(messageSignature.data);\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeMessageSignature(bufferReader: BufferReader): MessageSignature {\n  return createMessageSignature(\n    bufferReader.readBuffer(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES).toString('hex')\n  );\n}\n\nenum AuthFieldType {\n  PublicKeyCompressed = 0x00,\n  PublicKeyUncompressed = 0x01,\n  SignatureCompressed = 0x02,\n  SignatureUncompressed = 0x03,\n}\n\nexport type TransactionAuthFieldContents = StacksPublicKey | MessageSignature;\n\nexport interface TransactionAuthField {\n  type: StacksMessageType.TransactionAuthField;\n  pubKeyEncoding: PubKeyEncoding;\n  contents: TransactionAuthFieldContents;\n}\n\nexport function createTransactionAuthField(\n  pubKeyEncoding: PubKeyEncoding,\n  contents: TransactionAuthFieldContents\n): TransactionAuthField {\n  return {\n    pubKeyEncoding,\n    type: StacksMessageType.TransactionAuthField,\n    contents,\n  };\n}\n\nexport function serializeTransactionAuthField(field: TransactionAuthField): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n\n  switch (field.contents.type) {\n    case StacksMessageType.PublicKey:\n      if (field.pubKeyEncoding == PubKeyEncoding.Compressed) {\n        bufferArray.appendByte(AuthFieldType.PublicKeyCompressed);\n        bufferArray.push(serializePublicKey(field.contents));\n      } else {\n        bufferArray.appendByte(AuthFieldType.PublicKeyUncompressed);\n        bufferArray.push(serializePublicKey(compressPublicKey(field.contents.data)));\n      }\n      break;\n    case StacksMessageType.MessageSignature:\n      if (field.pubKeyEncoding == PubKeyEncoding.Compressed) {\n        bufferArray.appendByte(AuthFieldType.SignatureCompressed);\n      } else {\n        bufferArray.appendByte(AuthFieldType.SignatureUncompressed);\n      }\n      bufferArray.push(serializeMessageSignature(field.contents));\n      break;\n  }\n\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeTransactionAuthField(bufferReader: BufferReader): TransactionAuthField {\n  const authFieldType = bufferReader.readUInt8Enum(AuthFieldType, n => {\n    throw new DeserializationError(`Could not read ${n} as AuthFieldType`);\n  });\n\n  switch (authFieldType) {\n    case AuthFieldType.PublicKeyCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializePublicKey(bufferReader)\n      );\n    case AuthFieldType.PublicKeyUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        deserializePublicKey(bufferReader)\n      );\n    case AuthFieldType.SignatureCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializeMessageSignature(bufferReader)\n      );\n    case AuthFieldType.SignatureUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        deserializeMessageSignature(bufferReader)\n      );\n    default:\n      throw new Error(`Unknown auth field type: ${JSON.stringify(authFieldType)}`);\n  }\n}\n\nexport interface SingleSigSpendingCondition {\n  hashMode: SingleSigHashMode;\n  signer: string;\n  nonce: BigNum;\n  fee: BigNum;\n  keyEncoding: PubKeyEncoding;\n  signature: MessageSignature;\n}\n\nexport interface MultiSigSpendingCondition {\n  hashMode: MultiSigHashMode;\n  signer: string;\n  nonce: BigNum;\n  fee: BigNum;\n  fields: TransactionAuthField[];\n  signaturesRequired: number;\n}\n\nexport type SpendingCondition = SingleSigSpendingCondition | MultiSigSpendingCondition;\n\nexport function createSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  pubKey: string,\n  nonce: BigNum,\n  fee: BigNum\n): SingleSigSpendingCondition {\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, 1, [createStacksPublicKey(pubKey)]).hash160;\n  const keyEncoding = isCompressed(createStacksPublicKey(pubKey))\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature: emptyMessageSignature(),\n  };\n}\n\nexport function createMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  numSigs: number,\n  pubKeys: string[],\n  nonce: BigNum,\n  fee: BigNum\n): MultiSigSpendingCondition {\n  const stacksPublicKeys = pubKeys.map(createStacksPublicKey);\n\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, numSigs, stacksPublicKeys).hash160;\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields: [],\n    signaturesRequired: numSigs,\n  };\n}\n\nexport function isSingleSig(condition: SpendingCondition): condition is SingleSigSpendingCondition {\n  return 'signature' in condition;\n}\n\nfunction clearCondition(condition: SpendingCondition): SpendingCondition {\n  const cloned = cloneDeep(condition);\n  cloned.nonce = new BigNum(0);\n  cloned.fee = new BigNum(0);\n\n  if (isSingleSig(cloned)) {\n    cloned.signature = emptyMessageSignature();\n  } else {\n    cloned.fields = [];\n  }\n\n  return cloned;\n}\n\nexport function serializeSingleSigSpendingCondition(condition: SingleSigSpendingCondition): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(condition.hashMode);\n  bufferArray.appendHexString(condition.signer);\n  bufferArray.push(condition.nonce.toArrayLike(Buffer, 'be', 8));\n  bufferArray.push(condition.fee.toArrayLike(Buffer, 'be', 8));\n  bufferArray.appendByte(condition.keyEncoding);\n  bufferArray.push(serializeMessageSignature(condition.signature));\n  return bufferArray.concatBuffer();\n}\n\nexport function serializeMultiSigSpendingCondition(condition: MultiSigSpendingCondition): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(condition.hashMode);\n  bufferArray.appendHexString(condition.signer);\n  bufferArray.push(condition.nonce.toArrayLike(Buffer, 'be', 8));\n  bufferArray.push(condition.fee.toArrayLike(Buffer, 'be', 8));\n\n  const fields = createLPList(condition.fields);\n  bufferArray.push(serializeLPList(fields));\n\n  const numSigs = Buffer.alloc(2);\n  numSigs.writeUInt16BE(condition.signaturesRequired, 0);\n  bufferArray.push(numSigs);\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  bufferReader: BufferReader\n): SingleSigSpendingCondition {\n  const signer = bufferReader.readBuffer(20).toString('hex');\n  const nonce = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n  const fee = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n\n  const keyEncoding = bufferReader.readUInt8Enum(PubKeyEncoding, n => {\n    throw new DeserializationError(`Could not parse ${n} as PubKeyEncoding`);\n  });\n  const signature = deserializeMessageSignature(bufferReader);\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature,\n  };\n}\n\nexport function deserializeMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  bufferReader: BufferReader\n): MultiSigSpendingCondition {\n  const signer = bufferReader.readBuffer(20).toString('hex');\n  const nonce = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n  const fee = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n\n  const fields = deserializeLPList(bufferReader, StacksMessageType.TransactionAuthField)\n    .values as TransactionAuthField[];\n\n  const signaturesRequired = bufferReader.readUInt16BE();\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields,\n    signaturesRequired,\n  };\n}\n\nexport function serializeSpendingCondition(condition: SpendingCondition): Buffer {\n  if (isSingleSig(condition)) {\n    return serializeSingleSigSpendingCondition(condition);\n  } else {\n    return serializeMultiSigSpendingCondition(condition);\n  }\n}\n\nexport function deserializeSpendingCondition(bufferReader: BufferReader): SpendingCondition {\n  const hashMode = bufferReader.readUInt8Enum(AddressHashMode, n => {\n    throw new DeserializationError(`Could not parse ${n} as AddressHashMode`);\n  });\n\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    return deserializeSingleSigSpendingCondition(hashMode, bufferReader);\n  } else {\n    return deserializeMultiSigSpendingCondition(hashMode, bufferReader);\n  }\n}\n\nexport function makeSigHashPreSign(\n  curSigHash: string,\n  authType: AuthType,\n  fee: BigNum,\n  nonce: BigNum\n): string {\n  // new hash combines the previous hash and all the new data this signature will add. This\n  // includes:\n  // * the previous hash\n  // * the auth flag\n  // * the tx fee (big-endian 8-byte number)\n  // * nonce (big-endian 8-byte number)\n  const hashLength = 32 + 1 + 8 + 8;\n\n  const sigHash =\n    curSigHash +\n    Buffer.from([authType]).toString('hex') +\n    fee.toArrayLike(Buffer, 'be', 8).toString('hex') +\n    nonce.toArrayLike(Buffer, 'be', 8).toString('hex');\n\n  if (Buffer.from(sigHash, 'hex').byteLength !== hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(Buffer.from(sigHash, 'hex'));\n}\n\nfunction makeSigHashPostSign(\n  curSigHash: string,\n  pubKey: StacksPublicKey,\n  signature: MessageSignature\n): string {\n  // new hash combines the previous hash and all the new data this signature will add.  This\n  // includes:\n  // * the public key compression flag\n  // * the signature\n  const hashLength = 32 + 1 + RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;\n\n  const pubKeyEncoding = isCompressed(pubKey)\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  const sigHash = curSigHash + leftPadHex(pubKeyEncoding.toString(16)) + signature.data;\n\n  const sigHashBuffer = Buffer.from(sigHash, 'hex');\n  if (sigHashBuffer.byteLength > hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(sigHashBuffer);\n}\n\nexport function nextSignature(\n  curSigHash: string,\n  authType: AuthType,\n  fee: BigNum,\n  nonce: BigNum,\n  privateKey: StacksPrivateKey\n): {\n  nextSig: MessageSignature;\n  nextSigHash: string;\n} {\n  const sigHashPreSign = makeSigHashPreSign(curSigHash, authType, fee, nonce);\n\n  const signature = signWithKey(privateKey, sigHashPreSign);\n  const publicKey = getPublicKey(privateKey);\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n\n  return {\n    nextSig: signature,\n    nextSigHash,\n  };\n}\n\nexport function nextVerification(\n  initialSigHash: string,\n  authType: AuthType,\n  fee: BigNum,\n  nonce: BigNum,\n  // @ts-ignore\n  pubKeyEncoding: PubKeyEncoding,\n  signature: MessageSignature\n) {\n  const sigHashPreSign = makeSigHashPreSign(initialSigHash, authType, fee, nonce);\n\n  const publicKey = createStacksPublicKey(\n    publicKeyFromSignature(sigHashPreSign, signature, pubKeyEncoding)\n  );\n\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n\n  return {\n    pubKey: publicKey,\n    nextSigHash,\n  };\n}\n\nfunction newInitialSigHash(): SpendingCondition {\n  const spendingCondition = createSingleSigSpendingCondition(\n    AddressHashMode.SerializeP2PKH,\n    '',\n    new BigNum(0),\n    new BigNum(0)\n  );\n  spendingCondition.signer = createEmptyAddress().hash160;\n  spendingCondition.keyEncoding = PubKeyEncoding.Compressed;\n  spendingCondition.signature = emptyMessageSignature();\n  return spendingCondition;\n}\n\nfunction verify(condition: SpendingCondition, initialSigHash: string, authType: AuthType): string {\n  if (isSingleSig(condition)) {\n    return verifySingleSig(condition, initialSigHash, authType);\n  } else {\n    // TODO: verify multisig\n    return '';\n  }\n}\n\nfunction verifySingleSig(\n  condition: SingleSigSpendingCondition,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const { nextSigHash } = nextVerification(\n    initialSigHash,\n    authType,\n    condition.fee,\n    condition.nonce,\n    condition.keyEncoding,\n    condition.signature\n  );\n\n  // TODO: verify pub key\n\n  return nextSigHash;\n}\n\nexport class Authorization extends Deserializable {\n  authType?: AuthType;\n  spendingCondition?: SpendingCondition;\n  sponsorSpendingCondition?: SpendingCondition;\n\n  constructor(\n    authType?: AuthType,\n    spendingConditions?: SpendingCondition,\n    sponsorSpendingCondition?: SpendingCondition\n  ) {\n    super();\n    this.authType = authType;\n    this.spendingCondition = spendingConditions;\n    this.sponsorSpendingCondition = sponsorSpendingCondition;\n  }\n\n  intoInitialSighashAuth(): Authorization {\n    if (this.spendingCondition) {\n      switch (this.authType) {\n        case AuthType.Standard:\n          return new Authorization(AuthType.Standard, clearCondition(this.spendingCondition));\n        case AuthType.Sponsored:\n          return new Authorization(\n            AuthType.Sponsored,\n            clearCondition(this.spendingCondition),\n            newInitialSigHash()\n          );\n        default:\n          throw new SigningError('Unexpected authorization type for signing');\n      }\n    }\n\n    throw new Error('Authorization missing SpendingCondition');\n  }\n\n  setFee(amount: BigNum) {\n    switch (this.authType) {\n      case AuthType.Standard:\n        this.spendingCondition!.fee = amount;\n        break;\n      case AuthType.Sponsored:\n        this.sponsorSpendingCondition!.fee = amount;\n        break;\n    }\n  }\n\n  getFee() {\n    switch (this.authType) {\n      case AuthType.Standard:\n        return this.spendingCondition!.fee;\n      case AuthType.Sponsored:\n        return this.sponsorSpendingCondition!.fee;\n      default:\n        return 0;\n    }\n  }\n\n  setNonce(nonce: BigNum) {\n    this.spendingCondition!.nonce = nonce;\n  }\n\n  setSponsorNonce(nonce: BigNum) {\n    this.sponsorSpendingCondition!.nonce = nonce;\n  }\n\n  setSponsor(sponsorSpendingCondition: SpendingCondition) {\n    this.sponsorSpendingCondition = sponsorSpendingCondition;\n  }\n\n  verifyOrigin(initialSigHash: string): string {\n    switch (this.authType) {\n      case AuthType.Standard:\n        return verify(this.spendingCondition!, initialSigHash, AuthType.Standard);\n      case AuthType.Sponsored:\n        return verify(this.spendingCondition!, initialSigHash, AuthType.Standard);\n      default:\n        throw new SigningError('Invalid origin auth type');\n    }\n  }\n\n  serialize(): Buffer {\n    const bufferArray: BufferArray = new BufferArray();\n    if (this.authType === undefined) {\n      throw new SerializationError('\"authType\" is undefined');\n    }\n    bufferArray.appendByte(this.authType);\n\n    switch (this.authType) {\n      case AuthType.Standard:\n        if (this.spendingCondition === undefined) {\n          throw new SerializationError('\"spendingCondition\" is undefined');\n        }\n        bufferArray.push(serializeSpendingCondition(this.spendingCondition));\n        break;\n      case AuthType.Sponsored:\n        if (this.spendingCondition === undefined) {\n          throw new SerializationError('\"spendingCondition\" is undefined');\n        }\n        if (this.sponsorSpendingCondition === undefined) {\n          throw new SerializationError('\"spendingCondition\" is undefined');\n        }\n        bufferArray.push(serializeSpendingCondition(this.spendingCondition));\n        bufferArray.push(serializeSpendingCondition(this.sponsorSpendingCondition));\n        break;\n      default:\n        throw new SerializationError(\n          `Unexpected transaction AuthType while serializing: ${JSON.stringify(this.authType)}`\n        );\n    }\n\n    return bufferArray.concatBuffer();\n  }\n\n  deserialize(bufferReader: BufferReader) {\n    this.authType = bufferReader.readUInt8Enum(AuthType, n => {\n      throw new DeserializationError(`Could not parse ${n} as AuthType`);\n    });\n\n    switch (this.authType) {\n      case AuthType.Standard:\n        this.spendingCondition = deserializeSpendingCondition(bufferReader);\n        break;\n      case AuthType.Sponsored:\n        this.spendingCondition = deserializeSpendingCondition(bufferReader);\n        this.sponsorSpendingCondition = deserializeSpendingCondition(bufferReader);\n        break;\n      // throw new DeserializationError('Not yet implemented: deserializing sponsored transactions');\n      default:\n        throw new DeserializationError(\n          `Unexpected transaction AuthType while deserializing: ${JSON.stringify(this.authType)}`\n        );\n    }\n  }\n}\n\nexport class StandardAuthorization extends Authorization {\n  constructor(spendingCondition: SpendingCondition) {\n    super(AuthType.Standard, spendingCondition);\n  }\n}\n\nexport class SponsoredAuthorization extends Authorization {\n  constructor(\n    originSpendingCondition: SpendingCondition,\n    sponsorSpendingCondition?: SpendingCondition\n  ) {\n    let sponsorSC = sponsorSpendingCondition;\n    if (!sponsorSC) {\n      sponsorSC = createSingleSigSpendingCondition(\n        AddressHashMode.SerializeP2PKH,\n        '0'.repeat(66),\n        new BigNum(0),\n        new BigNum(0)\n      );\n    }\n    super(AuthType.Sponsored, originSpendingCondition, sponsorSC);\n  }\n}\n","import {\n  AnchorMode,\n  AuthType,\n  ChainID,\n  DEFAULT_CHAIN_ID,\n  PayloadType,\n  PostConditionMode,\n  PubKeyEncoding,\n  StacksMessageType,\n  TransactionVersion,\n} from './constants';\n\nimport {\n  Authorization,\n  createMessageSignature,\n  createTransactionAuthField,\n  isSingleSig,\n  nextSignature,\n  SingleSigSpendingCondition,\n  SpendingCondition,\n} from './authorization';\n\nimport { BufferArray, cloneDeep, txidFromData } from './utils';\n\nimport { deserializePayload, Payload, serializePayload } from './payload';\n\nimport { createLPList, deserializeLPList, LengthPrefixedList, serializeLPList } from './types';\n\nimport { isCompressed, StacksPrivateKey, StacksPublicKey } from './keys';\n\nimport { BufferReader } from './bufferReader';\n\nimport BigNum from 'bn.js';\nimport { SerializationError, SigningError } from './errors';\n\nexport class StacksTransaction {\n  version: TransactionVersion;\n  chainId: ChainID;\n  auth: Authorization;\n  anchorMode: AnchorMode;\n  payload: Payload;\n  postConditionMode: PostConditionMode;\n  postConditions: LengthPrefixedList;\n\n  constructor(\n    version: TransactionVersion,\n    auth: Authorization,\n    payload: Payload,\n    postConditions?: LengthPrefixedList,\n    postConditionMode?: PostConditionMode,\n    anchorMode?: AnchorMode,\n    chainId?: ChainID\n  ) {\n    this.version = version;\n    this.auth = auth;\n    this.payload = payload;\n    this.chainId = chainId ?? DEFAULT_CHAIN_ID;\n    this.postConditionMode = postConditionMode ?? PostConditionMode.Deny;\n    this.postConditions = postConditions ?? createLPList([]);\n\n    if (anchorMode) {\n      this.anchorMode = anchorMode;\n    } else {\n      switch (payload.payloadType) {\n        case PayloadType.Coinbase:\n        case PayloadType.PoisonMicroblock: {\n          this.anchorMode = AnchorMode.OnChainOnly;\n          break;\n        }\n        case PayloadType.ContractCall:\n        case PayloadType.SmartContract:\n        case PayloadType.TokenTransfer: {\n          this.anchorMode = AnchorMode.Any;\n          break;\n        }\n      }\n    }\n  }\n\n  signBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = tx.auth.intoInitialSighashAuth();\n    return tx.txid();\n  }\n\n  verifyBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = tx.auth.intoInitialSighashAuth();\n    return tx.txid();\n  }\n\n  createTxWithSignature(signature: string | Buffer): StacksTransaction {\n    const parsedSig = typeof signature === 'string' ? signature : signature.toString('hex');\n    const tx = cloneDeep(this);\n    if (!tx.auth.spendingCondition) {\n      throw new Error('Cannot set signature on transaction without spending condition');\n    }\n    (tx.auth.spendingCondition as SingleSigSpendingCondition).signature = createMessageSignature(\n      parsedSig\n    );\n    return tx;\n  }\n\n  verifyOrigin(): string {\n    return this.auth.verifyOrigin(this.verifyBegin());\n  }\n\n  signNextOrigin(sigHash: string, privateKey: StacksPrivateKey): string {\n    if (this.auth.spendingCondition === undefined) {\n      throw new Error('\"auth.spendingCondition\" is undefined');\n    }\n    if (this.auth.authType === undefined) {\n      throw new Error('\"auth.authType\" is undefined');\n    }\n    return this.signAndAppend(this.auth.spendingCondition, sigHash, AuthType.Standard, privateKey);\n  }\n\n  signNextSponsor(sigHash: string, privateKey: StacksPrivateKey): string {\n    if (this.auth.sponsorSpendingCondition === undefined) {\n      throw new Error('\"auth.spendingCondition\" is undefined');\n    }\n    if (this.auth.authType === undefined) {\n      throw new Error('\"auth.authType\" is undefined');\n    }\n    return this.signAndAppend(\n      this.auth.sponsorSpendingCondition,\n      sigHash,\n      AuthType.Sponsored,\n      privateKey\n    );\n  }\n\n  appendPubkey(publicKey: StacksPublicKey) {\n    const cond = this.auth.spendingCondition;\n    if (cond && !isSingleSig(cond)) {\n      const compressed = isCompressed(publicKey);\n      cond.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          publicKey\n        )\n      );\n    } else {\n      throw new Error(`Can't append public key to a singlesig condition`);\n    }\n  }\n\n  signAndAppend(\n    condition: SpendingCondition,\n    curSigHash: string,\n    authType: AuthType,\n    privateKey: StacksPrivateKey\n  ): string {\n    const { nextSig, nextSigHash } = nextSignature(\n      curSigHash,\n      authType,\n      condition.fee,\n      condition.nonce,\n      privateKey\n    );\n    if (isSingleSig(condition)) {\n      condition.signature = nextSig;\n    } else {\n      const compressed = privateKey.data.toString('hex').endsWith('01');\n      condition.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          nextSig\n        )\n      );\n    }\n\n    return nextSigHash;\n  }\n\n  txid(): string {\n    const serialized = this.serialize();\n    return txidFromData(serialized);\n  }\n\n  setSponsor(sponsorSpendingCondition: SpendingCondition) {\n    if (this.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n    }\n\n    this.auth.setSponsor(sponsorSpendingCondition);\n  }\n\n  /**\n   * Set the total fee to be paid for this transaction\n   *\n   * @param {BigNum} fee - the fee amount in microstacks\n   */\n  setFee(amount: BigNum) {\n    this.auth.setFee(amount);\n  }\n\n  /**\n   * Set the transaction nonce\n   *\n   * @param {BigNum} nonce - the nonce value\n   */\n  setNonce(nonce: BigNum) {\n    this.auth.setNonce(nonce);\n  }\n\n  /**\n   * Set the transaction sponsor nonce\n   *\n   * @param {BigNum} nonce - the sponsor nonce value\n   */\n  setSponsorNonce(nonce: BigNum) {\n    this.auth.setSponsorNonce(nonce);\n  }\n\n  serialize(): Buffer {\n    if (this.version === undefined) {\n      throw new SerializationError('\"version\" is undefined');\n    }\n    if (this.chainId === undefined) {\n      throw new SerializationError('\"chainId\" is undefined');\n    }\n    if (this.auth === undefined) {\n      throw new SerializationError('\"auth\" is undefined');\n    }\n    if (this.anchorMode === undefined) {\n      throw new SerializationError('\"anchorMode\" is undefined');\n    }\n    if (this.payload === undefined) {\n      throw new SerializationError('\"payload\" is undefined');\n    }\n\n    const bufferArray: BufferArray = new BufferArray();\n\n    bufferArray.appendByte(this.version);\n    const chainIdBuffer = Buffer.alloc(4);\n    chainIdBuffer.writeUInt32BE(this.chainId, 0);\n    bufferArray.push(chainIdBuffer);\n    bufferArray.push(this.auth.serialize());\n    bufferArray.appendByte(this.anchorMode);\n    bufferArray.appendByte(this.postConditionMode);\n    bufferArray.push(serializeLPList(this.postConditions));\n    bufferArray.push(serializePayload(this.payload));\n\n    return bufferArray.concatBuffer();\n  }\n}\n\n/**\n * @param data Buffer or hex string\n */\nexport function deserializeTransaction(data: BufferReader | Buffer | string) {\n  let bufferReader: BufferReader;\n  if (typeof data === 'string') {\n    if (data.slice(0, 2).toLowerCase() === '0x') {\n      bufferReader = new BufferReader(Buffer.from(data.slice(2), 'hex'));\n    } else {\n      bufferReader = new BufferReader(Buffer.from(data, 'hex'));\n    }\n  } else if (Buffer.isBuffer(data)) {\n    bufferReader = new BufferReader(data);\n  } else {\n    bufferReader = data;\n  }\n  const version = bufferReader.readUInt8Enum(TransactionVersion, n => {\n    throw new Error(`Could not parse ${n} as TransactionVersion`);\n  });\n  const chainId = bufferReader.readUInt32BE();\n  const auth = Authorization.deserialize(bufferReader);\n  const anchorMode = bufferReader.readUInt8Enum(AnchorMode, n => {\n    throw new Error(`Could not parse ${n} as AnchorMode`);\n  });\n  const postConditionMode = bufferReader.readUInt8Enum(PostConditionMode, n => {\n    throw new Error(`Could not parse ${n} as PostConditionMode`);\n  });\n  const postConditions = deserializeLPList(bufferReader, StacksMessageType.PostCondition);\n  const payload = deserializePayload(bufferReader);\n\n  return new StacksTransaction(\n    version,\n    auth,\n    payload,\n    postConditions,\n    postConditionMode,\n    anchorMode,\n    chainId\n  );\n}\n","import { StacksTransaction } from './transaction';\n\nimport { StacksPrivateKey, StacksPublicKey } from './keys';\nimport { isSingleSig } from './authorization';\nimport { cloneDeep } from './utils';\nimport { SpendingCondition } from './authorization';\nimport { AuthType } from './constants';\nimport { SigningError } from './errors';\n\nexport class TransactionSigner {\n  transaction: StacksTransaction;\n  sigHash: string;\n  originDone: boolean;\n  checkOversign: boolean;\n  checkOverlap: boolean;\n\n  constructor(transaction: StacksTransaction) {\n    this.transaction = transaction;\n    this.sigHash = transaction.signBegin();\n    this.originDone = false;\n    this.checkOversign = true;\n    this.checkOverlap = true;\n  }\n\n  static createSponsorSigner(transaction: StacksTransaction, spendingCondition: SpendingCondition) {\n    if (transaction.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot add sponsor to non-sponsored transaction');\n    }\n\n    const tx: StacksTransaction = cloneDeep(transaction);\n    tx.setSponsor(spendingCondition);\n    const originSigHash = tx.verifyOrigin();\n    const signer = new this(tx);\n    signer.originDone = true;\n    signer.sigHash = originSigHash;\n    signer.checkOversign = true;\n    signer.checkOverlap = true;\n    return signer;\n  }\n\n  signOrigin(privateKey: StacksPrivateKey) {\n    if (this.checkOverlap && this.originDone) {\n      throw new SigningError('Cannot sign origin after sponsor key');\n    }\n\n    if (this.transaction.auth === undefined) {\n      throw new SigningError('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.spendingCondition === undefined) {\n      throw new SigningError('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    if (!isSingleSig(this.transaction.auth.spendingCondition)) {\n      const spendingCondition = this.transaction.auth.spendingCondition;\n      if (\n        this.checkOversign &&\n        spendingCondition.fields.length >= spendingCondition.signaturesRequired\n      ) {\n        throw new Error('Origin would have too many signatures');\n      }\n    }\n\n    const nextSighash = this.transaction.signNextOrigin(this.sigHash, privateKey);\n    this.sigHash = nextSighash;\n  }\n\n  appendOrigin(publicKey: StacksPublicKey) {\n    if (this.checkOverlap && this.originDone) {\n      throw Error('Cannot append public key to origin after sponsor key');\n    }\n\n    if (this.transaction.auth === undefined) {\n      throw new Error('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.spendingCondition === undefined) {\n      throw new Error('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    this.transaction.appendPubkey(publicKey);\n  }\n\n  signSponsor(privateKey: StacksPrivateKey) {\n    if (this.transaction.auth === undefined) {\n      throw new SigningError('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.sponsorSpendingCondition === undefined) {\n      throw new SigningError('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    const nextSighash = this.transaction.signNextSponsor(this.sigHash, privateKey);\n    this.sigHash = nextSighash;\n    this.originDone = true;\n  }\n\n  getTxInComplete(): StacksTransaction {\n    return cloneDeep(this.transaction);\n  }\n\n  resume(transaction: StacksTransaction) {\n    this.transaction = cloneDeep(transaction);\n    this.sigHash = transaction.signBegin();\n  }\n}\n","import { cloneDeep } from './utils';\nimport {\n  ClarityValue,\n  uintCV,\n  intCV,\n  contractPrincipalCV,\n  standardPrincipalCV,\n  noneCV,\n  bufferCV,\n  falseCV,\n  trueCV,\n  ClarityType,\n  getCVTypeString,\n  bufferCVFromString,\n} from './clarity';\nimport { ContractCallPayload } from './payload';\nimport { NotImplementedError } from './errors';\nimport { stringAsciiCV, stringUtf8CV } from './clarity/types/stringCV';\n\n// From https://github.com/blockstack/stacks-blockchain-sidecar/blob/master/src/event-stream/contract-abi.ts\n\nexport type ClarityAbiTypeBuffer = { buffer: { length: number } };\nexport type ClarityAbiTypeStringAscii = { 'string-ascii': { length: number } };\nexport type ClarityAbiTypeStringUtf8 = { 'string-utf8': { length: number } };\nexport type ClarityAbiTypeResponse = { response: { ok: ClarityAbiType; error: ClarityAbiType } };\nexport type ClarityAbiTypeOptional = { optional: ClarityAbiType };\nexport type ClarityAbiTypeTuple = { tuple: { name: string; type: ClarityAbiType }[] };\nexport type ClarityAbiTypeList = { list: { type: ClarityAbiType; length: number } };\n\nexport type ClarityAbiTypeUInt128 = 'uint128';\nexport type ClarityAbiTypeInt128 = 'int128';\nexport type ClarityAbiTypeBool = 'bool';\nexport type ClarityAbiTypePrincipal = 'principal';\nexport type ClarityAbiTypeTraitReference = 'trait_reference';\nexport type ClarityAbiTypeNone = 'none';\n\nexport type ClarityAbiTypePrimitive =\n  | ClarityAbiTypeUInt128\n  | ClarityAbiTypeInt128\n  | ClarityAbiTypeBool\n  | ClarityAbiTypePrincipal\n  | ClarityAbiTypeTraitReference\n  | ClarityAbiTypeNone;\n\nexport type ClarityAbiType =\n  | ClarityAbiTypePrimitive\n  | ClarityAbiTypeBuffer\n  | ClarityAbiTypeResponse\n  | ClarityAbiTypeOptional\n  | ClarityAbiTypeTuple\n  | ClarityAbiTypeList\n  | ClarityAbiTypeStringAscii\n  | ClarityAbiTypeStringUtf8\n  | ClarityAbiTypeTraitReference;\n\nexport enum ClarityAbiTypeId {\n  ClarityAbiTypeUInt128 = 1,\n  ClarityAbiTypeInt128 = 2,\n  ClarityAbiTypeBool = 3,\n  ClarityAbiTypePrincipal = 4,\n  ClarityAbiTypeNone = 5,\n  ClarityAbiTypeBuffer = 6,\n  ClarityAbiTypeResponse = 7,\n  ClarityAbiTypeOptional = 8,\n  ClarityAbiTypeTuple = 9,\n  ClarityAbiTypeList = 10,\n  ClarityAbiTypeStringAscii = 11,\n  ClarityAbiTypeStringUtf8 = 12,\n  ClarityAbiTypeTraitReference = 13,\n}\n\nexport const isClarityAbiPrimitive = (val: ClarityAbiType): val is ClarityAbiTypePrimitive =>\n  typeof val === 'string';\nexport const isClarityAbiBuffer = (val: ClarityAbiType): val is ClarityAbiTypeBuffer =>\n  (val as ClarityAbiTypeBuffer).buffer !== undefined;\nexport const isClarityAbiStringAscii = (val: ClarityAbiType): val is ClarityAbiTypeStringAscii =>\n  (val as ClarityAbiTypeStringAscii)['string-ascii'] !== undefined;\nexport const isClarityAbiStringUtf8 = (val: ClarityAbiType): val is ClarityAbiTypeStringUtf8 =>\n  (val as ClarityAbiTypeStringUtf8)['string-utf8'] !== undefined;\nexport const isClarityAbiResponse = (val: ClarityAbiType): val is ClarityAbiTypeResponse =>\n  (val as ClarityAbiTypeResponse).response !== undefined;\nexport const isClarityAbiOptional = (val: ClarityAbiType): val is ClarityAbiTypeOptional =>\n  (val as ClarityAbiTypeOptional).optional !== undefined;\nexport const isClarityAbiTuple = (val: ClarityAbiType): val is ClarityAbiTypeTuple =>\n  (val as ClarityAbiTypeTuple).tuple !== undefined;\nexport const isClarityAbiList = (val: ClarityAbiType): val is ClarityAbiTypeList =>\n  (val as ClarityAbiTypeList).list !== undefined;\n\nexport type ClarityAbiTypeUnion =\n  | { id: ClarityAbiTypeId.ClarityAbiTypeUInt128; type: ClarityAbiTypeUInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeInt128; type: ClarityAbiTypeInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBool; type: ClarityAbiTypeBool }\n  | { id: ClarityAbiTypeId.ClarityAbiTypePrincipal; type: ClarityAbiTypePrincipal }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference; type: ClarityAbiTypeTraitReference }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeNone; type: ClarityAbiTypeNone }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBuffer; type: ClarityAbiTypeBuffer }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeResponse; type: ClarityAbiTypeResponse }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeOptional; type: ClarityAbiTypeOptional }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTuple; type: ClarityAbiTypeTuple }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeList; type: ClarityAbiTypeList }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii; type: ClarityAbiTypeStringAscii }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8; type: ClarityAbiTypeStringUtf8 };\n\nexport function getTypeUnion(val: ClarityAbiType): ClarityAbiTypeUnion {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'uint128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeUInt128, type: val };\n    } else if (val === 'int128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeInt128, type: val };\n    } else if (val === 'bool') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeBool, type: val };\n    } else if (val === 'principal') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypePrincipal, type: val };\n    } else if (val === 'trait_reference') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference, type: val };\n    } else if (val === 'none') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeNone, type: val };\n    } else {\n      throw new Error(`Unexpected Clarity ABI type primitive: ${JSON.stringify(val)}`);\n    }\n  } else if (isClarityAbiBuffer(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeBuffer, type: val };\n  } else if (isClarityAbiResponse(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeResponse, type: val };\n  } else if (isClarityAbiOptional(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeOptional, type: val };\n  } else if (isClarityAbiTuple(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeTuple, type: val };\n  } else if (isClarityAbiList(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeList, type: val };\n  } else if (isClarityAbiStringAscii(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii, type: val };\n  } else if (isClarityAbiStringUtf8(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8, type: val };\n  } else {\n    throw new Error(`Unexpected Clarity ABI type: ${JSON.stringify(val)}`);\n  }\n}\n\nfunction encodeClarityValue(type: ClarityAbiType, val: string): ClarityValue;\nfunction encodeClarityValue(type: ClarityAbiTypeUnion, val: string): ClarityValue;\nfunction encodeClarityValue(\n  input: ClarityAbiTypeUnion | ClarityAbiType,\n  val: string\n): ClarityValue {\n  let union: ClarityAbiTypeUnion;\n  if ((input as ClarityAbiTypeUnion).id !== undefined) {\n    union = input as ClarityAbiTypeUnion;\n  } else {\n    union = getTypeUnion(input as ClarityAbiType);\n  }\n  switch (union.id) {\n    case ClarityAbiTypeId.ClarityAbiTypeUInt128:\n      return uintCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeInt128:\n      return intCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeBool:\n      if (val === 'false' || val === '0') return falseCV();\n      else if (val === 'true' || val === '1') return trueCV();\n      else throw new Error(`Unexpected Clarity bool value: ${JSON.stringify(val)}`);\n    case ClarityAbiTypeId.ClarityAbiTypePrincipal:\n      if (val.includes('.')) {\n        const [addr, name] = val.split('.');\n        return contractPrincipalCV(addr, name);\n      } else {\n        return standardPrincipalCV(val);\n      }\n    case ClarityAbiTypeId.ClarityAbiTypeTraitReference:\n      const [addr, name] = val.split('.');\n      return contractPrincipalCV(addr, name);\n    case ClarityAbiTypeId.ClarityAbiTypeNone:\n      return noneCV();\n    case ClarityAbiTypeId.ClarityAbiTypeBuffer:\n      return bufferCV(Buffer.from(val, 'utf8'));\n    case ClarityAbiTypeId.ClarityAbiTypeStringAscii:\n      return stringAsciiCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeStringUtf8:\n      return stringUtf8CV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeResponse:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeOptional:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeTuple:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeList:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    default:\n      throw new Error(`Unexpected Clarity type ID: ${JSON.stringify(union)}`);\n  }\n}\nexport { encodeClarityValue };\n\nexport function getTypeString(val: ClarityAbiType): string {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'int128') {\n      return 'int';\n    } else if (val === 'uint128') {\n      return 'uint';\n    }\n    return val;\n  } else if (isClarityAbiBuffer(val)) {\n    return `(buff ${val.buffer.length})`;\n  } else if (isClarityAbiStringAscii(val)) {\n    return `(string-ascii ${val['string-ascii'].length})`;\n  } else if (isClarityAbiStringUtf8(val)) {\n    return `(string-utf8 ${val['string-utf8'].length})`;\n  } else if (isClarityAbiResponse(val)) {\n    return `(response ${getTypeString(val.response.ok)} ${getTypeString(val.response.error)})`;\n  } else if (isClarityAbiOptional(val)) {\n    return `(optional ${getTypeString(val.optional)})`;\n  } else if (isClarityAbiTuple(val)) {\n    return `(tuple ${val.tuple.map(t => `(${t.name} ${getTypeString(t.type)})`).join(' ')})`;\n  } else if (isClarityAbiList(val)) {\n    return `(list ${val.list.length} ${getTypeString(val.list.type)})`;\n  } else {\n    throw new Error(`Type string unsupported for Clarity type: ${JSON.stringify(val)}`);\n  }\n}\n\nexport interface ClarityAbiFunction {\n  name: string;\n  access: 'private' | 'public' | 'read_only';\n  args: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  outputs: {\n    type: ClarityAbiType;\n  };\n}\n\nexport function abiFunctionToString(func: ClarityAbiFunction): string {\n  const access = func.access === 'read_only' ? 'read-only' : func.access;\n  return `(define-${access} (${func.name} ${func.args\n    .map(arg => `(${arg.name} ${getTypeString(arg.type)})`)\n    .join(' ')}))`;\n}\n\nexport interface ClarityAbiVariable {\n  name: string;\n  access: 'variable' | 'constant';\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbiMap {\n  name: string;\n  key: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  value: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n}\n\nexport interface ClarityAbiTypeFungibleToken {\n  name: string;\n}\n\nexport interface ClarityAbiTypeNonFungibleToken {\n  name: string;\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbi {\n  functions: ClarityAbiFunction[];\n  variables: ClarityAbiVariable[];\n  maps: ClarityAbiMap[];\n  fungible_tokens: ClarityAbiTypeFungibleToken[];\n  non_fungible_tokens: ClarityAbiTypeNonFungibleToken[];\n}\n\nfunction matchType(cv: ClarityValue, abiType: ClarityAbiType): boolean {\n  const union = getTypeUnion(abiType);\n\n  switch (cv.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeBool;\n    case ClarityType.Int:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeInt128;\n    case ClarityType.UInt:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeUInt128;\n    case ClarityType.Buffer:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer &&\n        union.type.buffer.length >= cv.buffer.length\n      );\n    case ClarityType.StringASCII:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringAscii &&\n        union.type['string-ascii'].length >= cv.data.length\n      );\n    case ClarityType.StringUTF8:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringUtf8 &&\n        union.type['string-utf8'].length >= cv.data.length\n      );\n    case ClarityType.OptionalNone:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeNone ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional\n      );\n    case ClarityType.OptionalSome:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional &&\n        matchType(cv.value, union.type.optional)\n      );\n    case ClarityType.ResponseErr:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.error)\n      );\n    case ClarityType.ResponseOk:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.ok)\n      );\n    case ClarityType.PrincipalContract:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeTraitReference\n      );\n    case ClarityType.PrincipalStandard:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal;\n    case ClarityType.List:\n      return (\n        union.id == ClarityAbiTypeId.ClarityAbiTypeList &&\n        union.type.list.length === cv.list.length &&\n        cv.list.every(val => matchType(val, union.type.list.type))\n      );\n    case ClarityType.Tuple:\n      if (union.id == ClarityAbiTypeId.ClarityAbiTypeTuple) {\n        const tuple = cloneDeep(cv.data);\n        for (let i = 0; i < union.type.tuple.length; i++) {\n          const abiTupleEntry = union.type.tuple[i];\n          const key = abiTupleEntry.name;\n          const val = tuple[key];\n\n          // if key exists in cv tuple, check if its type matches the abi\n          // return false if key doesn't exist\n          if (val) {\n            if (!matchType(val, abiTupleEntry.type)) {\n              return false;\n            }\n            delete tuple[key];\n          } else {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    default:\n      return false;\n  }\n}\n\n/**\n * Validates a contract-call payload with a contract ABI\n *\n * @param {ContractCallPayload} payload - a contract-call payload\n * @param {ClarityAbi} abi - a contract ABI\n *\n * @returns {boolean} true if the payloads functionArgs type check against those in the ABI\n */\nexport function validateContractCall(payload: ContractCallPayload, abi: ClarityAbi): boolean {\n  const filtered = abi.functions.filter(fn => fn.name === payload.functionName.content);\n  if (filtered.length === 1) {\n    const abiFunc = filtered[0];\n    const abiArgs = abiFunc.args;\n\n    if (payload.functionArgs.length !== abiArgs.length) {\n      throw new Error(\n        `Clarity function expects ${abiArgs.length} argument(s) but received ${payload.functionArgs.length}`\n      );\n    }\n\n    for (let i = 0; i < payload.functionArgs.length; i++) {\n      const payloadArg = payload.functionArgs[i];\n      const abiArg = abiArgs[i];\n\n      if (!matchType(payloadArg, abiArg.type)) {\n        const argNum = i + 1;\n        throw new Error(\n          `Clarity function \\`${\n            payload.functionName.content\n          }\\` expects argument ${argNum} to be of type ${getTypeString(\n            abiArg.type\n          )}, not ${getCVTypeString(payloadArg)}`\n        );\n      }\n    }\n\n    return true;\n  } else if (filtered.length === 0) {\n    throw new Error(`ABI doesn't contain a function with the name ${payload.functionName.content}`);\n  } else {\n    throw new Error(\n      `Malformed ABI. Contains multiple functions with the name ${payload.functionName.content}`\n    );\n  }\n}\n\n/**\n * Convert string input to Clarity value based on contract ABI data. Only handles Clarity\n * primitives and buffers. Responses, optionals, tuples and lists are not supported.\n *\n * @param {string} input - string to be parsed into Clarity value\n * @param {ClarityAbiType} type - the contract function argument object\n *\n * @returns {ClarityValue} returns a Clarity value\n */\nexport function parseToCV(input: string, type: ClarityAbiType): ClarityValue {\n  const typeString = getTypeString(type);\n  if (isClarityAbiPrimitive(type)) {\n    if (type === 'uint128') {\n      return uintCV(input);\n    } else if (type === 'int128') {\n      return intCV(input);\n    } else if (type === 'bool') {\n      if (input.toLowerCase() === 'true') {\n        return trueCV();\n      } else if (input.toLowerCase() === 'false') {\n        return falseCV();\n      } else {\n        throw new Error(`Invalid bool value: ${input}`);\n      }\n    } else if (type === 'principal') {\n      if (input.includes('.')) {\n        const [address, contractName] = input.split('.');\n        return contractPrincipalCV(address, contractName);\n      } else {\n        return standardPrincipalCV(input);\n      }\n    } else {\n      throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n  } else if (isClarityAbiBuffer(type)) {\n    const inputLength = Buffer.from(input).byteLength;\n    if (inputLength > type.buffer.length) {\n      throw new Error(`Input exceeds specified buffer length limit of ${type.buffer.length}`);\n    }\n    return bufferCVFromString(input);\n  } else if (isClarityAbiResponse(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiOptional(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiTuple(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiList(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  }\n}\n","import { StacksTransaction } from './transaction';\n\nimport { StacksNetwork, StacksMainnet, StacksTestnet } from '@stacks/network';\n\nimport {\n  createTokenTransferPayload,\n  createSmartContractPayload,\n  createContractCallPayload,\n} from './payload';\n\nimport {\n  StandardAuthorization,\n  SponsoredAuthorization,\n  createSingleSigSpendingCondition,\n  createMultiSigSpendingCondition,\n} from './authorization';\n\nimport {\n  publicKeyToString,\n  createStacksPrivateKey,\n  getPublicKey,\n  publicKeyToAddress,\n  pubKeyfromPrivKey,\n  publicKeyFromBuffer,\n} from './keys';\n\nimport { TransactionSigner } from './signer';\n\nimport {\n  PostCondition,\n  STXPostCondition,\n  FungiblePostCondition,\n  NonFungiblePostCondition,\n  createSTXPostCondition,\n  createFungiblePostCondition,\n  createNonFungiblePostCondition,\n} from './postcondition';\n\nimport {\n  AddressHashMode,\n  AddressVersion,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  PostConditionMode,\n  PayloadType,\n  AnchorMode,\n  TransactionVersion,\n  TxRejectedReason,\n  SingleSigHashMode,\n} from './constants';\n\nimport { AssetInfo, createLPList, createStandardPrincipal, createContractPrincipal } from './types';\n\nimport { cvToHex, parseReadOnlyResponse, omit } from './utils';\n\nimport { fetchPrivate } from '@stacks/common';\n\nimport BigNum from 'bn.js';\nimport { ClarityValue, PrincipalCV } from './clarity';\nimport { validateContractCall, ClarityAbi } from './contract-abi';\nimport { c32address } from 'c32check';\n\n/**\n * Lookup the nonce for an address from a core node\n *\n * @param {string} address - the c32check address to look up\n * @param {StacksNetwork} network - the Stacks network to look up address on\n *\n * @return a promise that resolves to an integer\n */\nexport async function getNonce(address: string, network?: StacksNetwork): Promise<BigNum> {\n  const defaultNetwork = new StacksMainnet();\n  const url = network\n    ? network.getAccountApiUrl(address)\n    : defaultNetwork.getAccountApiUrl(address);\n\n  const response = await fetchPrivate(url);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error fetching nonce. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const result = (await response.json()) as { nonce: string };\n  return new BigNum(result.nonce);\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a token transfer\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateTransfer(\n  transaction: StacksTransaction,\n  network?: StacksNetwork\n): Promise<BigNum> {\n  if (transaction.payload.payloadType !== PayloadType.TokenTransfer) {\n    throw new Error(\n      `Transaction fee estimation only possible with ${\n        PayloadType[PayloadType.TokenTransfer]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  const defaultNetwork = new StacksMainnet();\n  const url = network\n    ? network.getTransferFeeEstimateApiUrl()\n    : defaultNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await fetchPrivate(url, fetchOptions);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = new BigNum(transaction.serialize().byteLength);\n  const feeRate = new BigNum(feeRateResult);\n  return feeRate.mul(txBytes);\n}\n\nexport type TxBroadcastResultOk = string;\nexport type TxBroadcastResultRejected = {\n  error: string;\n  reason: TxRejectedReason;\n  reason_data: any;\n  txid: string;\n};\nexport type TxBroadcastResult = TxBroadcastResultOk | TxBroadcastResultRejected;\n\n/**\n * Broadcast the signed transaction to a core node\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to broadcast\n * @param {StacksNetwork} network - the Stacks network to broadcast transaction to\n *\n * @returns {Promise} that resolves to a response if the operation succeeds\n */\nexport async function broadcastTransaction(\n  transaction: StacksTransaction,\n  network: StacksNetwork,\n  attachment?: Buffer\n): Promise<TxBroadcastResult> {\n  const rawTx = transaction.serialize();\n  const url = network.getBroadcastApiUrl();\n\n  return broadcastRawTransaction(rawTx, url, attachment);\n}\n\n/**\n * Broadcast the signed transaction to a core node\n *\n * @param {Buffer} rawTx - the raw serialized transaction buffer to broadcast\n * @param {string} url - the broadcast endpoint URL\n *\n * @returns {Promise} that resolves to a response if the operation succeeds\n */\nexport async function broadcastRawTransaction(\n  rawTx: Buffer,\n  url: string,\n  attachment?: Buffer\n): Promise<TxBroadcastResult> {\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': attachment ? 'application/json' : 'application/octet-stream' },\n    body: attachment\n      ? JSON.stringify({\n          tx: rawTx.toString('hex'),\n          attachment: attachment.toString('hex'),\n        })\n      : rawTx,\n  };\n\n  const response = await fetchPrivate(url, options);\n  if (!response.ok) {\n    try {\n      return (await response.json()) as TxBroadcastResult;\n    } catch (e) {\n      throw Error(`Failed to broadcast transaction: ${(e as Error).message}`);\n    }\n  }\n\n  const text = await response.text();\n  try {\n    return JSON.parse(text) as TxBroadcastResult;\n  } catch (e) {\n    return text;\n  }\n}\n\n/**\n * Fetch a contract's ABI\n *\n * @param {string} address - the contracts address\n * @param {string} contractName - the contracts name\n * @param {StacksNetwork} network - the Stacks network to broadcast transaction to\n *\n * @returns {Promise} that resolves to a ClarityAbi if the operation succeeds\n */\nexport async function getAbi(\n  address: string,\n  contractName: string,\n  network: StacksNetwork\n): Promise<ClarityAbi> {\n  const options = {\n    method: 'GET',\n  };\n\n  const url = network.getAbiApiUrl(address, contractName);\n\n  const response = await fetchPrivate(url, options);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error fetching contract ABI for contract \"${contractName}\" at address ${address}. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return JSON.parse(await response.text()) as ClarityAbi;\n}\n\nexport interface MultiSigOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys?: string[];\n}\n\n/**\n * STX token transfer transaction options\n *\n * @param  {String|PrincipalCV} recipientAddress - the c32check address of the recipient or a\n *                                                  principal clarity value\n * @param  {BigNum} amount - number of tokens to transfer in microstacks\n * @param  {BigNum} fee - transaction fee in microstacks\n * @param  {BigNum} nonce - a nonce must be increased monotonically with each new transaction\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param  {anchorMode} anchorMode - identify how the the transaction should be mined\n * @param  {String} memo - an arbitrary string to include with the transaction, must be less than\n *                          34 bytes\n * @param  {PostConditionMode} postConditionMode - whether post conditions must fully cover all\n *                                                 transferred assets\n * @param  {PostCondition[]} postConditions - an array of post conditions to add to the\n *                                                  transaction\n * @param  {Boolean} sponsored - true if another account is sponsoring the transaction fees\n */\nexport interface TokenTransferOptions {\n  recipient: string | PrincipalCV;\n  amount: BigNum;\n  fee?: BigNum;\n  nonce?: BigNum;\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  memo?: string;\n  postConditionMode?: PostConditionMode;\n  postConditions?: PostCondition[];\n  sponsored?: boolean;\n}\n\nexport interface UnsignedTokenTransferOptions extends TokenTransferOptions {\n  publicKey: string;\n}\n\nexport interface SignedTokenTransferOptions extends TokenTransferOptions {\n  senderKey: string;\n}\n\nexport interface UnsignedMultiSigTokenTransferOptions extends TokenTransferOptions {\n  numSignatures: number;\n  publicKeys: string[];\n}\n\nexport interface SignedMultiSigTokenTransferOptions extends TokenTransferOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys: string[];\n}\n\n/**\n * Generates an unsigned Stacks token transfer transaction\n *\n * Returns a Stacks token transfer transaction.\n *\n * @param  {UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {Promis<StacksTransaction>}\n */\nexport async function makeUnsignedSTXTokenTransfer(\n  txOptions: UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: new BigNum(0),\n    nonce: new BigNum(0),\n    network: new StacksMainnet(),\n    anchorMode: AnchorMode.Any,\n    postConditionMode: PostConditionMode.Deny,\n    memo: '',\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createTokenTransferPayload(options.recipient, options.amount, options.memo);\n\n  let authorization = null;\n  let spendingCondition = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.SerializeP2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    spendingCondition = createMultiSigSpendingCondition(\n      AddressHashMode.SerializeP2SH,\n      options.numSignatures,\n      options.publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  if (options.sponsored) {\n    authorization = new SponsoredAuthorization(spendingCondition);\n  } else {\n    authorization = new StandardAuthorization(spendingCondition);\n  }\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n\n  const lpPostConditions = createLPList(postConditions);\n  const transaction = new StacksTransaction(\n    options.network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    defaultOptions.anchorMode,\n    options.network.chainId\n  );\n\n  if (!txOptions.fee) {\n    const txFee = await estimateTransfer(transaction, options.network);\n    transaction.setFee(txFee);\n  }\n\n  if (!txOptions.nonce) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a signed Stacks token transfer transaction\n *\n * Returns a signed Stacks token transfer transaction.\n *\n * @param  {SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {StacksTransaction}\n */\nexport async function makeSTXTokenTransfer(\n  txOptions: SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions\n): Promise<StacksTransaction> {\n  if ('senderKey' in txOptions) {\n    const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedSTXTokenTransfer({ publicKey, ...options });\n\n    const privKey = createStacksPrivateKey(txOptions.senderKey);\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedSTXTokenTransfer(options);\n\n    const signer = new TransactionSigner(transaction);\n    let pubKeys = txOptions.publicKeys;\n    for (const key of txOptions.signerKeys) {\n      const pubKey = pubKeyfromPrivKey(key);\n      pubKeys = pubKeys.filter(pk => pk !== pubKey.data.toString('hex'));\n      signer.signOrigin(createStacksPrivateKey(key));\n    }\n\n    for (const key of pubKeys) {\n      signer.appendOrigin(publicKeyFromBuffer(Buffer.from(key, 'hex')));\n    }\n\n    return transaction;\n  }\n}\n\n/**\n * Contract deploy transaction options\n *\n * @param  {String} contractName - the contract name\n * @param  {String} codeBody - the code body string\n * @param  {String} senderKey - hex string sender private key used to sign transaction\n * @param  {BigNum} fee - transaction fee in microstacks\n * @param  {BigNum} nonce - a nonce must be increased monotonically with each new transaction\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param  {anchorMode} anchorMode - identify how the the transaction should be mined\n * @param  {PostConditionMode} postConditionMode - whether post conditions must fully cover all\n *                                                 transferred assets\n * @param  {PostCondition[]} postConditions - an array of post conditions to add to the\n *                                                  transaction\n * @param  {Boolean} sponsored - true if another account is sponsoring the transaction fees\n */\nexport interface ContractDeployOptions {\n  contractName: string;\n  codeBody: string;\n  senderKey: string;\n  fee?: BigNum;\n  nonce?: BigNum;\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  postConditionMode?: PostConditionMode;\n  postConditions?: PostCondition[];\n  sponsored?: boolean;\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a contract deploy\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateContractDeploy(\n  transaction: StacksTransaction,\n  network?: StacksNetwork\n): Promise<BigNum> {\n  if (transaction.payload.payloadType !== PayloadType.SmartContract) {\n    throw new Error(\n      `Contract deploy fee estimation only possible with ${\n        PayloadType[PayloadType.SmartContract]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  // Place holder estimate until contract deploy fee estimation is fully implemented on Stacks\n  // blockchain core\n  const defaultNetwork = new StacksMainnet();\n  const url = network\n    ? network.getTransferFeeEstimateApiUrl()\n    : defaultNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await fetchPrivate(url, fetchOptions);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error estimating contract deploy fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = new BigNum(transaction.serialize().byteLength);\n  const feeRate = new BigNum(feeRateResult);\n  return feeRate.mul(txBytes);\n}\n\n/**\n * Generates a Clarity smart contract deploy transaction\n *\n * @param  {ContractDeployOptions} txOptions - an options object for the contract deploy\n *\n * Returns a signed Stacks smart contract deploy transaction.\n *\n * @return {StacksTransaction}\n */\nexport async function makeContractDeploy(\n  txOptions: ContractDeployOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: new BigNum(0),\n    nonce: new BigNum(0),\n    network: new StacksMainnet(),\n    anchorMode: AnchorMode.Any,\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createSmartContractPayload(options.contractName, options.codeBody);\n\n  const addressHashMode = AddressHashMode.SerializeP2PKH;\n  const privKey = createStacksPrivateKey(options.senderKey);\n  const pubKey = getPublicKey(privKey);\n\n  let authorization = null;\n\n  const spendingCondition = createSingleSigSpendingCondition(\n    addressHashMode,\n    publicKeyToString(pubKey),\n    options.nonce,\n    options.fee\n  );\n\n  if (options.sponsored) {\n    authorization = new SponsoredAuthorization(spendingCondition);\n  } else {\n    authorization = new StandardAuthorization(spendingCondition);\n  }\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n\n  const lpPostConditions = createLPList(postConditions);\n  const transaction = new StacksTransaction(\n    options.network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    options.network.chainId\n  );\n\n  if (!txOptions.fee) {\n    const txFee = await estimateContractDeploy(transaction, options.network);\n    transaction.setFee(txFee);\n  }\n\n  if (!txOptions.nonce) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = publicKeyToAddress(addressVersion, pubKey);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  if (options.senderKey) {\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n  }\n\n  return transaction;\n}\n\n/**\n * Contract function call transaction options\n * @param  {String} contractAddress - the c32check address of the contract\n * @param  {String} contractName - the contract name\n * @param  {String} functionName - name of the function to be called\n * @param  {[ClarityValue]} functionArgs - an array of Clarity values as arguments to the function call\n * @param  {String} senderKey - hex string sender private key used to sign transaction\n * @param  {BigNum} fee - transaction fee in microstacks\n * @param  {BigNum} nonce - a nonce must be increased monotonically with each new transaction\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param  {anchorMode} anchorMode - identify how the the transaction should be mined\n * @param  {PostConditionMode} postConditionMode - whether post conditions must fully cover all\n *                                                 transferred assets\n * @param  {PostCondition[]} postConditions - an array of post conditions to add to the\n *                                                  transaction\n * @param  {Boolean} sponsored - true if another account is sponsoring the transaction fees\n */\nexport interface ContractCallOptions {\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  fee?: BigNum;\n  feeEstimateApiUrl?: string;\n  nonce?: BigNum;\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  postConditionMode?: PostConditionMode;\n  postConditions?: PostCondition[];\n  validateWithAbi?: boolean | ClarityAbi;\n  sponsored?: boolean;\n}\n\nexport interface UnsignedContractCallOptions extends ContractCallOptions {\n  publicKey: string;\n}\n\nexport interface SignedContractCallOptions extends ContractCallOptions {\n  senderKey: string;\n}\n\nexport interface UnsignedMultiSigContractCallOptions extends ContractCallOptions {\n  numSignatures: number;\n  publicKeys: string[];\n}\n\nexport interface SignedMultiSigContractCallOptions extends ContractCallOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys: string[];\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a contract function call\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateContractFunctionCall(\n  transaction: StacksTransaction,\n  network?: StacksNetwork\n): Promise<BigNum> {\n  if (transaction.payload.payloadType !== PayloadType.ContractCall) {\n    throw new Error(\n      `Contract call fee estimation only possible with ${\n        PayloadType[PayloadType.ContractCall]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  // Place holder estimate until contract call fee estimation is fully implemented on Stacks\n  // blockchain core\n  const defaultNetwork = new StacksMainnet();\n  const url = network\n    ? network.getTransferFeeEstimateApiUrl()\n    : defaultNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await fetchPrivate(url, fetchOptions);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error estimating contract call fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = new BigNum(transaction.serialize().byteLength);\n  const feeRate = new BigNum(feeRateResult);\n  return feeRate.mul(txBytes);\n}\n\n/**\n * Generates an unsigned Clarity smart contract function call transaction\n *\n * @param {UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions} txOptions - an options object for the contract call\n *\n * @returns {Promise<StacksTransaction>}\n */\nexport async function makeUnsignedContractCall(\n  txOptions: UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: new BigNum(0),\n    nonce: new BigNum(0),\n    network: new StacksMainnet(),\n    anchorMode: AnchorMode.Any,\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createContractCallPayload(\n    options.contractAddress,\n    options.contractName,\n    options.functionName,\n    options.functionArgs\n  );\n\n  if (options?.validateWithAbi) {\n    let abi: ClarityAbi;\n    if (typeof options.validateWithAbi === 'boolean') {\n      if (options?.network) {\n        abi = await getAbi(options.contractAddress, options.contractName, options.network);\n      } else {\n        throw new Error('Network option must be provided in order to validate with ABI');\n      }\n    } else {\n      abi = options.validateWithAbi;\n    }\n\n    validateContractCall(payload, abi);\n  }\n\n  let spendingCondition = null;\n  let authorization = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.SerializeP2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    spendingCondition = createMultiSigSpendingCondition(\n      AddressHashMode.SerializeP2SH,\n      options.numSignatures,\n      options.publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  if (options.sponsored) {\n    authorization = new SponsoredAuthorization(spendingCondition);\n  } else {\n    authorization = new StandardAuthorization(spendingCondition);\n  }\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n\n  const lpPostConditions = createLPList(postConditions);\n  const transaction = new StacksTransaction(\n    options.network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    options.network.chainId\n  );\n\n  if (!txOptions.fee) {\n    const txFee = await estimateContractFunctionCall(transaction, options.network);\n    transaction.setFee(txFee);\n  }\n\n  if (!txOptions.nonce) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a Clarity smart contract function call transaction\n *\n * @param  {SignedContractCallOptions | SignedMultiSigContractCallOptions} txOptions - an options object for the contract function call\n *\n * Returns a signed Stacks smart contract function call transaction.\n *\n * @return {StacksTransaction}\n */\nexport async function makeContractCall(\n  txOptions: SignedContractCallOptions | SignedMultiSigContractCallOptions\n): Promise<StacksTransaction> {\n  if ('senderKey' in txOptions) {\n    const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedContractCall({ publicKey, ...options });\n\n    const privKey = createStacksPrivateKey(txOptions.senderKey);\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedContractCall(options);\n\n    const signer = new TransactionSigner(transaction);\n    let pubKeys = txOptions.publicKeys;\n    for (const key of txOptions.signerKeys) {\n      const pubKey = pubKeyfromPrivKey(key);\n      pubKeys = pubKeys.filter(pk => pk !== pubKey.data.toString('hex'));\n      signer.signOrigin(createStacksPrivateKey(key));\n    }\n\n    for (const key of pubKeys) {\n      signer.appendOrigin(publicKeyFromBuffer(Buffer.from(key, 'hex')));\n    }\n\n    return transaction;\n  }\n}\n\n/**\n * Generates a STX post condition with a standard principal\n *\n * Returns a STX post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {BigNum} amount - the amount of STX tokens\n *\n * @return {STXPostCondition}\n */\nexport function makeStandardSTXPostCondition(\n  address: string,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum\n): STXPostCondition {\n  return createSTXPostCondition(createStandardPrincipal(address), conditionCode, amount);\n}\n\n/**\n * Generates a STX post condition with a contract principal\n *\n * Returns a STX post condition object\n *\n * @param  {String} address - the c32check address of the contract\n * @param  {String} contractName - the name of the contract\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {BigNum} amount - the amount of STX tokens\n *\n * @return {STXPostCondition}\n */\nexport function makeContractSTXPostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum\n): STXPostCondition {\n  return createSTXPostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    amount\n  );\n}\n\n/**\n * Generates a fungible token post condition with a standard principal\n *\n * Returns a fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {BigNum} amount - the amount of fungible tokens\n * @param  {AssetInfo} assetInfo - asset info describing the fungible token\n *\n * @return {FungiblePostCondition}\n */\nexport function makeStandardFungiblePostCondition(\n  address: string,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  return createFungiblePostCondition(\n    createStandardPrincipal(address),\n    conditionCode,\n    amount,\n    assetInfo\n  );\n}\n\n/**\n * Generates a fungible token post condition with a contract principal\n *\n * Returns a fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {String} contractName - the name of the contract\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {BigNum} amount - the amount of fungible tokens\n * @param  {AssetInfo} assetInfo - asset info describing the fungible token\n *\n * @return {FungiblePostCondition}\n */\nexport function makeContractFungiblePostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  return createFungiblePostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    amount,\n    assetInfo\n  );\n}\n\n/**\n * Generates a non-fungible token post condition with a standard principal\n *\n * Returns a non-fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {AssetInfo} assetInfo - asset info describing the non-fungible token\n * @param  {ClarityValue} assetName - asset name describing the non-fungible token\n *\n * @return {NonFungiblePostCondition}\n */\nexport function makeStandardNonFungiblePostCondition(\n  address: string,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  return createNonFungiblePostCondition(\n    createStandardPrincipal(address),\n    conditionCode,\n    assetInfo,\n    assetName\n  );\n}\n\n/**\n * Generates a non-fungible token post condition with a contract principal\n *\n * Returns a non-fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {String} contractName - the name of the contract\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {AssetInfo} assetInfo - asset info describing the non-fungible token\n * @param  {ClarityValue} assetName - asset name describing the non-fungible token\n *\n * @return {NonFungiblePostCondition}\n */\nexport function makeContractNonFungiblePostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  return createNonFungiblePostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    assetInfo,\n    assetName\n  );\n}\n\n/**\n * Read only function options\n *\n * @param  {String} contractAddress - the c32check address of the contract\n * @param  {String} contractName - the contract name\n * @param  {String} functionName - name of the function to be called\n * @param  {[ClarityValue]} functionArgs - an array of Clarity values as arguments to the function call\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param  {String} senderAddress - the c32check address of the sender\n */\n\nexport interface ReadOnlyFunctionOptions {\n  contractName: string;\n  contractAddress: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  network?: StacksNetwork;\n  senderAddress: string;\n}\n\n/**\n * Calls a read only function from a contract interface\n *\n * @param  {ReadOnlyFunctionOptions} readOnlyFunctionOptions - the options object\n *\n * Returns an object with a status bool (okay) and a result string that is a serialized clarity value in hex format.\n *\n * @return {ClarityValue}\n */\nexport async function callReadOnlyFunction(\n  readOnlyFunctionOptions: ReadOnlyFunctionOptions\n): Promise<ClarityValue> {\n  const defaultOptions = {\n    network: new StacksMainnet(),\n  };\n\n  const options = Object.assign(defaultOptions, readOnlyFunctionOptions);\n\n  const {\n    contractName,\n    contractAddress,\n    functionName,\n    functionArgs,\n    network,\n    senderAddress,\n  } = options;\n\n  const url = network.getReadOnlyFunctionCallApiUrl(contractAddress, contractName, functionName);\n\n  const args = functionArgs.map(arg => cvToHex(arg));\n\n  const body = JSON.stringify({\n    sender: senderAddress,\n    arguments: args,\n  });\n\n  const response = await fetchPrivate(url, {\n    method: 'POST',\n    body,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error calling read-only function. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return response.json().then(responseJson => parseReadOnlyResponse(responseJson));\n}\n\n/**\n * Sponsored transaction options\n *\n * @param  {StacksTransaction} transaction - the origin-signed transaction to sponsor\n * @param  {String} sponsorPrivateKey - the sponsor's private key\n * @param  {BigNum} fee - the transaction fee amount to sponsor\n * @param  {BigNum} sponsorNonce - the nonce of the sponsor account\n * @param  {AddressHashMode} sponsorAddressHashmode - the sponsor address hashmode\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n */\nexport interface SponsorOptions {\n  transaction: StacksTransaction;\n  sponsorPrivateKey: string;\n  fee?: BigNum;\n  sponsorNonce?: BigNum;\n  sponsorAddressHashmode?: AddressHashMode;\n  network?: StacksNetwork;\n}\n\n/**\n * Constructs and signs a sponsored transaction as the sponsor\n *\n * @param  {SponsorOptions} sponsorOptions - the sponsor options object\n *\n * Returns a signed sponsored transaction.\n *\n * @return {ClarityValue}\n */\nexport async function sponsorTransaction(\n  sponsorOptions: SponsorOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: new BigNum(0),\n    sponsorNonce: new BigNum(0),\n    sponsorAddressHashmode: AddressHashMode.SerializeP2PKH as SingleSigHashMode,\n  };\n\n  const options = Object.assign(defaultOptions, sponsorOptions);\n  const network =\n    sponsorOptions.network ??\n    (options.transaction.version === TransactionVersion.Mainnet\n      ? new StacksMainnet()\n      : new StacksTestnet());\n  const sponsorPubKey = pubKeyfromPrivKey(options.sponsorPrivateKey);\n\n  if (!sponsorOptions.fee) {\n    let txFee = new BigNum(0);\n    switch (options.transaction.payload.payloadType) {\n      case PayloadType.TokenTransfer:\n        txFee = await estimateTransfer(options.transaction, network);\n        break;\n      case PayloadType.SmartContract:\n        txFee = await estimateContractDeploy(options.transaction, network);\n        break;\n      case PayloadType.ContractCall:\n        txFee = await estimateContractFunctionCall(options.transaction, network);\n        break;\n      default:\n        throw new Error(\n          `Sponsored transactions not supported for transaction type ${\n            PayloadType[options.transaction.payload.payloadType]\n          }`\n        );\n    }\n    options.transaction.setFee(txFee);\n    options.fee = txFee;\n  }\n\n  if (!sponsorOptions.sponsorNonce) {\n    const addressVersion =\n      network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n\n    const senderAddress = publicKeyToAddress(addressVersion, sponsorPubKey);\n    const sponsorNonce = await getNonce(senderAddress, network);\n    options.sponsorNonce = sponsorNonce;\n  }\n\n  const sponsorSpendingCondition = createSingleSigSpendingCondition(\n    options.sponsorAddressHashmode,\n    publicKeyToString(sponsorPubKey),\n    options.sponsorNonce,\n    options.fee\n  );\n\n  options.transaction.setSponsor(sponsorSpendingCondition);\n\n  const privKey = createStacksPrivateKey(options.sponsorPrivateKey);\n  const signer = TransactionSigner.createSponsorSigner(\n    options.transaction,\n    sponsorSpendingCondition\n  );\n  signer.signSponsor(privKey);\n\n  return options.transaction;\n}\n"],"names":["ChainID","DEFAULT_CHAIN_ID","Mainnet","MAX_STRING_LENGTH_BYTES","CLARITY_INT_SIZE","COINBASE_BUFFER_LENGTH_BYTES","RECOVERABLE_ECDSA_SIG_LENGTH_BYTES","COMPRESSED_PUBKEY_LENGTH_BYTES","UNCOMPRESSED_PUBKEY_LENGTH_BYTES","MEMO_MAX_LENGTH_BYTES","DEFAULT_CORE_NODE_API_URL","StacksMessageType","PayloadType","AnchorMode","TransactionVersion","DEFAULT_TRANSACTION_VERSION","PostConditionMode","PostConditionType","AuthType","AddressHashMode","AddressVersion","PubKeyEncoding","FungibleConditionCode","NonFungibleConditionCode","PostConditionPrincipalID","AssetType","TxRejectedReason","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","undefined","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","tryCatch","fn","arg","type","call","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","constructor","displayName","defineIteratorMethods","forEach","method","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","__await","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","then","unwrapped","error","previousPromise","enqueue","callInvokeWithMethodAndArg","async","Promise","iter","next","done","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","info","resultName","nextLoc","toString","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","keys","object","reverse","length","pop","iterable","iteratorMethod","isNaN","i","skipTempReset","prev","charAt","slice","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","getAddressFromPrivateKey","privateKey","transactionVersion","pubKey","pubKeyfromPrivKey","getAddressFromPublicKey","data","publicKey","addrVer","addressHashModeToVersion","SerializeP2PKH","addr","addressFromVersionHash","hashP2PKH","Buffer","from","addrString","addressToString","createStacksPublicKey","PublicKey","publicKeyFromSignature","message","messageSignature","pubKeyEncoding","Compressed","ec","EC","messageBN","keyFromPrivate","getPrivate","parsedSignature","parseRecoverableSignature","recoverPubKey","recoveryParam","Uncompressed","encode","encodeCompressed","publicKeyFromBuffer","isCompressed","startsWith","publicKeyToString","serializePublicKey","bufferArray","BufferArray","concatBuffer","privKey","createStacksPrivateKey","keyPair","getPublic","compressed","compressPublicKey","keyFromPublic","deserializePublicKey","bufferReader","fieldId","readUInt8","keyLength","concat","readBuffer","makeRandomPrivKey","entropy","options","randomBytes","genKeyPair","signWithKey","input","signature","sign","canonical","coordinateValueBytes","r","leftPadHexToLength","s","intToHexString","recoverableSignatureString","createMessageSignature","getSignatureRecoveryParam","recoveryParamHex","substr","hexStringToInt","getPublicKey","privateKeyToString","publicKeyToAddress","version","c32address","hash160","SerializationError","captureStackTrace","DeserializationError","NotImplementedError","SigningError","createSTXPostCondition","principal","conditionCode","amount","parsePrincipalString","PostCondition","conditionType","STX","createFungiblePostCondition","assetInfo","parseAssetInfoString","Fungible","createNonFungiblePostCondition","assetName","NonFungible","serializePostCondition","postCondition","appendByte","serializePrincipal","serializeAssetInfo","serializeCV","toArrayLike","deserializePostCondition","postConditionType","readUInt8Enum","n","deserializePrincipal","BigNum","deserializeAssetInfo","deserializeCV","createTokenTransferPayload","recipient","memo","principalCV","createMemoString","Payload","payloadType","TokenTransfer","createContractCallPayload","contractAddress","contractName","functionName","functionArgs","createAddress","createLPString","ContractCall","createSmartContractPayload","codeBody","codeBodyString","SmartContract","createPoisonPayload","PoisonMicroblock","createCoinbasePayload","coinbaseBuffer","byteLength","Coinbase","serializePayload","payload","serializeStacksMessage","numArgs","alloc","writeUInt32BE","deserializePayload","deserializeMemoString","deserializeAddress","contractCallName","deserializeLPString","numberOfArgs","readUInt32BE","clarityValue","smartContractName","Address","serializeAddress","Principal","LengthPrefixedString","serializeLPString","MemoString","serializeMemoString","AssetInfo","LengthPrefixedList","serializeLPList","TransactionAuthField","serializeTransactionAuthField","MessageSignature","serializeMessageSignature","deserializeStacksMessage","listType","deserializeLPList","deserializeMessageSignature","c32AddressString","addressData","c32addressDecode","createEmptyAddress","MainnetSingleSig","repeat","hash","hashMode","txVersion","Testnet","TestnetSingleSig","JSON","stringify","SerializeP2SH","SerializeP2WPKH","SerializeP2WSH","MainnetMultiSig","TestnetMultiSig","addressFromHashMode","addressFromPublicKeys","numSigs","publicKeys","hashP2SH","map","address","appendHexString","principalString","includes","split","createContractPrincipal","createStandardPrincipal","addressString","prefix","Standard","Contract","_","content","lengthPrefixBytes","maxLengthBytes","prefixLength","maxLength","exceedsMaxLengthBytes","lps","contentBuffer","prefixBytes","memoString","paddedContent","rightPadHexToLength","id","assetAddress","assetContractName","assetTokenName","createAssetInfo","createLPList","lpList","list","index","l","deserializeTransactionAuthField","principalToString","ClarityType","PrincipalStandard","PrincipalContract","contractPrincipalCV","standardPrincipalCV","standardPrincipalCVFromAddress","lengthPrefixedContractName","contractPrincipalCVFromAddress","contractPrincipalCVFromStandard","sp","cvToString","val","encoding","BoolTrue","BoolFalse","Int","fromTwos","UInt","str","buffer","test","OptionalNone","OptionalSome","ResponseErr","ResponseOk","List","v","join","Tuple","StringASCII","StringUTF8","cvToValue","toNumber","cvToJSON","getCVTypeString","success","trueCV","falseCV","intCV","bn","twos","toTwos","bitLength","uintCV","isNeg","bufferCV","bufferCVFromString","noneCV","someCV","responseErrorCV","responseOkCV","listCV","tupleCV","isClarityName","stringAsciiCV","stringUtf8CV","bufferWithTypeID","typeId","serializeBoolCV","serializeOptionalCV","cv","serializeBufferCV","serializeIntCV","serializeStandardPrincipalCV","serializeContractPrincipalCV","serializeResponseCV","serializeListCV","buffers","serializedValue","serializeTupleCV","lexicographicOrder","sort","a","b","bufA","bufB","compare","nameWithLength","serializeStringCV","len","serializeStringAsciiCV","serializeStringUtf8CV","createEnumChecker","enumVariable","enumValues","filter","enumValueSet","Set","has","enumCheckFunctions","Map","isEnum","checker","get","newChecker","set","BufferReader","isBuffer","smartBuffer","SmartBuffer","buff","fromBuffer","offset","readUInt16BE","readBigUIntLE","hex","num","BigInt","readBigUIntBE","readBigUInt64BE","readString","invalidEnumErrorFormatter","readOffset","internalBuffer","bufferLength","sAddress","cAddress","listLength","listContents","tupleLength","tupleContents","clarityName","asciiStrLen","asciiStr","utf8StrLen","utf8Str","hexString","_value","octet","Number","isInteger","leftPadHex","padStart","padEnd","integer","lengthBytes","parseInt","string","cloneDeep","lodashCloneDeep","omit","prop","clone","sha512_256","assign","_ah","_al","_bh","_bl","_ch","_cl","_dh","_dl","_eh","_el","_fh","_fl","_gh","_gl","_hh","_hl","digest","sha512","txidFromData","update","sha256Result","sha256","RIPEMD160","pubKeys","redeemScript","redeemScriptHash","regex","fetchPrivate","init","defaultFetchOpts","referrer","referrerPolicy","fetchOpts","fetch","fetchResult","cvToHex","serialized","hexToCV","hexWithoutPrefix","parseReadOnlyResponse","response","okay","cause","validateStacksAddress","stacksAddress","e","Deserializable","deserialize","emptyMessageSignature","AuthFieldType","createTransactionAuthField","contents","field","PublicKeyCompressed","PublicKeyUncompressed","SignatureCompressed","SignatureUncompressed","authFieldType","createSingleSigSpendingCondition","nonce","fee","signer","keyEncoding","createMultiSigSpendingCondition","stacksPublicKeys","fields","signaturesRequired","isSingleSig","condition","clearCondition","cloned","serializeSingleSigSpendingCondition","serializeMultiSigSpendingCondition","writeUInt16BE","deserializeSingleSigSpendingCondition","deserializeMultiSigSpendingCondition","serializeSpendingCondition","deserializeSpendingCondition","makeSigHashPreSign","curSigHash","authType","hashLength","sigHash","makeSigHashPostSign","sigHashBuffer","nextSignature","sigHashPreSign","nextSigHash","nextSig","nextVerification","initialSigHash","newInitialSigHash","spendingCondition","verify","verifySingleSig","Authorization","spendingConditions","sponsorSpendingCondition","intoInitialSighashAuth","Sponsored","setFee","getFee","setNonce","setSponsorNonce","setSponsor","verifyOrigin","serialize","StandardAuthorization","SponsoredAuthorization","originSpendingCondition","sponsorSC","StacksTransaction","auth","postConditions","postConditionMode","anchorMode","chainId","Deny","OnChainOnly","Any","signBegin","tx","txid","verifyBegin","createTxWithSignature","parsedSig","signNextOrigin","signAndAppend","signNextSponsor","appendPubkey","cond","endsWith","chainIdBuffer","deserializeTransaction","toLowerCase","TransactionSigner","transaction","originDone","checkOversign","checkOverlap","createSponsorSigner","originSigHash","signOrigin","nextSighash","appendOrigin","signSponsor","getTxInComplete","resume","ClarityAbiTypeId","isClarityAbiPrimitive","isClarityAbiBuffer","isClarityAbiStringAscii","isClarityAbiStringUtf8","isClarityAbiResponse","isClarityAbiOptional","optional","isClarityAbiTuple","tuple","isClarityAbiList","getTypeUnion","ClarityAbiTypeUInt128","ClarityAbiTypeInt128","ClarityAbiTypeBool","ClarityAbiTypePrincipal","ClarityAbiTypeTraitReference","ClarityAbiTypeNone","ClarityAbiTypeBuffer","ClarityAbiTypeResponse","ClarityAbiTypeOptional","ClarityAbiTypeTuple","ClarityAbiTypeList","ClarityAbiTypeStringAscii","ClarityAbiTypeStringUtf8","encodeClarityValue","union","getTypeString","ok","t","abiFunctionToString","func","access","args","matchType","abiType","every","abiTupleEntry","validateContractCall","abi","filtered","functions","abiFunc","abiArgs","payloadArg","abiArg","argNum","parseToCV","typeString","inputLength","getNonce","network","defaultNetwork","StacksMainnet","url","getAccountApiUrl","msg","text","status","statusText","json","estimateTransfer","requestHeaders","Accept","fetchOptions","headers","getTransferFeeEstimateApiUrl","feeRateResult","txBytes","feeRate","mul","broadcastTransaction","attachment","rawTx","getBroadcastApiUrl","broadcastRawTransaction","body","parse","getAbi","getAbiApiUrl","makeUnsignedSTXTokenTransfer","txOptions","defaultOptions","sponsored","authorization","numSignatures","lpPostConditions","txFee","addressVersion","senderAddress","txNonce","makeSTXTokenTransfer","senderKey","pk","signerKeys","estimateContractDeploy","makeContractDeploy","addressHashMode","estimateContractFunctionCall","makeUnsignedContractCall","validateWithAbi","makeContractCall","makeStandardSTXPostCondition","makeContractSTXPostCondition","makeStandardFungiblePostCondition","makeContractFungiblePostCondition","makeStandardNonFungiblePostCondition","makeContractNonFungiblePostCondition","callReadOnlyFunction","readOnlyFunctionOptions","getReadOnlyFunctionCallApiUrl","sender","arguments","responseJson","sponsorTransaction","sponsorOptions","sponsorNonce","sponsorAddressHashmode","StacksTestnet","sponsorPubKey","sponsorPrivateKey"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAGA,WAAKA;AACHA,EAAAA,wCAAA,YAAA;AACAA,EAAAA,+BAAA,YAAA;AACD,CAHD,EAAKA,eAAO,KAAPA,eAAO,KAAA,CAAZ;;IAKMC,gBAAgB,GAAGD,eAAO,CAACE;IAC3BC,uBAAuB,GAAG;IAC1BC,gBAAgB,GAAG;IACnBC,4BAA4B,GAAG;IAC/BC,kCAAkC,GAAG;IACrCC,8BAA8B,GAAG;IACjCC,gCAAgC,GAAG;IACnCC,qBAAqB,GAAG;IACxBC,yBAAyB,GAAG;;;AAElC,WAAKC;AACHA,EAAAA,mDAAA,YAAA;AACAA,EAAAA,qDAAA,cAAA;AACAA,EAAAA,gEAAA,yBAAA;AACAA,EAAAA,sDAAA,eAAA;AACAA,EAAAA,qDAAA,cAAA;AACAA,EAAAA,yDAAA,kBAAA;AACAA,EAAAA,qDAAA,cAAA;AACAA,EAAAA,8DAAA,uBAAA;AACAA,EAAAA,mDAAA,YAAA;AACAA,EAAAA,4DAAA,qBAAA;AACAA,EAAAA,iEAAA,yBAAA;AACD,CAZD,EAAKA,yBAAiB,KAAjBA,yBAAiB,KAAA,CAAtB;;;;AAcA,WAAKC;AACHA,EAAAA,6CAAA,kBAAA;AACAA,EAAAA,6CAAA,kBAAA;AACAA,EAAAA,4CAAA,iBAAA;AACAA,EAAAA,gDAAA,qBAAA;AACAA,EAAAA,wCAAA,aAAA;AACD,CAND,EAAKA,mBAAW,KAAXA,mBAAW,KAAA,CAAhB;;;;AAQA,WAAKC;AACHA,EAAAA,yCAAA,gBAAA;AACAA,EAAAA,0CAAA,iBAAA;AACAA,EAAAA,iCAAA,QAAA;AACD,CAJD,EAAKA,kBAAU,KAAVA,kBAAU,KAAA,CAAf;;;;AAMA,WAAKC;AACHA,EAAAA,qDAAA,YAAA;AACAA,EAAAA,uDAAA,YAAA;AACD,CAHD,EAAKA,0BAAkB,KAAlBA,0BAAkB,KAAA,CAAvB;;IAKMC,2BAA2B,GAAGD,0BAAkB,CAACZ;;;AAEvD,WAAKc;AACHA,EAAAA,iDAAA,UAAA;AACAA,EAAAA,gDAAA,SAAA;AACD,CAHD,EAAKA,yBAAiB,KAAjBA,yBAAiB,KAAA,CAAtB;;;;AAKA,WAAKC;AACHA,EAAAA,+CAAA,QAAA;AACAA,EAAAA,oDAAA,aAAA;AACAA,EAAAA,uDAAA,gBAAA;AACD,CAJD,EAAKA,yBAAiB,KAAjBA,yBAAiB,KAAA,CAAtB;;;;AAMA,WAAKC;AACHA,EAAAA,kCAAA,aAAA;AACAA,EAAAA,mCAAA,cAAA;AACD,CAHD,EAAKA,gBAAQ,KAARA,gBAAQ,KAAA,CAAb;;;;AAKA,WAAKC;AAIHA,EAAAA,sDAAA,mBAAA;AAEAA,EAAAA,qDAAA,kBAAA;AAEAA,EAAAA,uDAAA,oBAAA;AAEAA,EAAAA,sDAAA,mBAAA;AACD,CAXD,EAAKA,uBAAe,KAAfA,uBAAe,KAAA,CAApB;;;;AAgBA,WAAKC;AACHA,EAAAA,uDAAA,qBAAA;AACAA,EAAAA,sDAAA,oBAAA;AACAA,EAAAA,uDAAA,qBAAA;AACAA,EAAAA,sDAAA,oBAAA;AACD,CALD,EAAKA,sBAAc,KAAdA,sBAAc,KAAA,CAAnB;;;;AAOA,WAAKC;AACHA,EAAAA,gDAAA,eAAA;AACAA,EAAAA,kDAAA,iBAAA;AACD,CAHD,EAAKA,sBAAc,KAAdA,sBAAc,KAAA,CAAnB;;;;AAKA,WAAKC;AACHA,EAAAA,yDAAA,UAAA;AACAA,EAAAA,2DAAA,YAAA;AACAA,EAAAA,gEAAA,iBAAA;AACAA,EAAAA,wDAAA,SAAA;AACAA,EAAAA,6DAAA,cAAA;AACD,CAND,EAAKA,6BAAqB,KAArBA,6BAAqB,KAAA,CAA1B;;;;AAQA,WAAKC;AACHA,EAAAA,qEAAA,eAAA;AACAA,EAAAA,+DAAA,SAAA;AACD,CAHD,EAAKA,gCAAwB,KAAxBA,gCAAwB,KAAA,CAA7B;;;;AAKA,WAAKC;AACHA,EAAAA,gEAAA,WAAA;AACAA,EAAAA,kEAAA,aAAA;AACAA,EAAAA,kEAAA,aAAA;AACD,CAJD,EAAKA,gCAAwB,KAAxBA,gCAAwB,KAAA,CAA7B;;;;AAMA,WAAKC;AACHA,EAAAA,+BAAA,QAAA;AACAA,EAAAA,oCAAA,aAAA;AACAA,EAAAA,uCAAA,gBAAA;AACD,CAJD,EAAKA,iBAAS,KAATA,iBAAS,KAAA,CAAd;;;;AAMA,WAAKC;AACHA,EAAAA,iCAAA,kBAAA;AACAA,EAAAA,mCAAA,oBAAA;AACAA,EAAAA,uCAAA,wBAAA;AACAA,EAAAA,6BAAA,cAAA;AACAA,EAAAA,4BAAA,aAAA;AACAA,EAAAA,kCAAA,mBAAA;AACAA,EAAAA,kCAAA,mBAAA;AACAA,EAAAA,wCAAA,yBAAA;AACAA,EAAAA,uCAAA,wBAAA;AACAA,EAAAA,yCAAA,0BAAA;AACAA,EAAAA,kDAAA,mCAAA;AACAA,EAAAA,wDAAA,yCAAA;AACAA,EAAAA,6CAAA,8BAAA;AACAA,EAAAA,yCAAA,0BAAA;AACAA,EAAAA,wCAAA,yBAAA;AACAA,EAAAA,+CAAA,gCAAA;AACAA,EAAAA,yCAAA,0BAAA;AACAA,EAAAA,sCAAA,uBAAA;AACD,CAnBD,EAAKA,wBAAgB,KAAhBA,wBAAgB,KAAA,CAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1HA;;;;;;AAOA,MAAIC,OAAO,GAAI,UAAUC,OAAV,EAAmB;;AAGhC,QAAIC,EAAE,GAAGC,MAAM,CAACC,SAAhB;AACA,QAAIC,MAAM,GAAGH,EAAE,CAACI,cAAhB;AACA,QAAIC,WAAJ,CALgC;;AAMhC,QAAIC,OAAO,GAAG,OAAOC,MAAP,KAAkB,UAAlB,GAA+BA,MAA/B,GAAwC,EAAtD;AACA,QAAIC,cAAc,GAAGF,OAAO,CAACG,QAAR,IAAoB,YAAzC;AACA,QAAIC,mBAAmB,GAAGJ,OAAO,CAACK,aAAR,IAAyB,iBAAnD;AACA,QAAIC,iBAAiB,GAAGN,OAAO,CAACO,WAAR,IAAuB,eAA/C;;AAEA,aAASC,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,KAA1B,EAAiC;AAC/BhB,MAAAA,MAAM,CAACiB,cAAP,CAAsBH,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9BC,QAAAA,KAAK,EAAEA,KADuB;AAE9BE,QAAAA,UAAU,EAAE,IAFkB;AAG9BC,QAAAA,YAAY,EAAE,IAHgB;AAI9BC,QAAAA,QAAQ,EAAE;AAJoB,OAAhC;AAMA,aAAON,GAAG,CAACC,GAAD,CAAV;AACD;;AACD,QAAI;;AAEFF,MAAAA,MAAM,CAAC,EAAD,EAAK,EAAL,CAAN;AACD,KAHD,CAGE,OAAOQ,GAAP,EAAY;AACZR,MAAAA,MAAM,GAAG,gBAASC,GAAT,EAAcC,GAAd,EAAmBC,KAAnB,EAA0B;AACjC,eAAOF,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAlB;AACD,OAFD;AAGD;;AAED,aAASM,IAAT,CAAcC,OAAd,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,WAAtC,EAAmD;;AAEjD,UAAIC,cAAc,GAAGH,OAAO,IAAIA,OAAO,CAACvB,SAAR,YAA6B2B,SAAxC,GAAoDJ,OAApD,GAA8DI,SAAnF;AACA,UAAIC,SAAS,GAAG7B,MAAM,CAAC8B,MAAP,CAAcH,cAAc,CAAC1B,SAA7B,CAAhB;AACA,UAAI8B,OAAO,GAAG,IAAIC,OAAJ,CAAYN,WAAW,IAAI,EAA3B,CAAd,CAJiD;;;AAQjDG,MAAAA,SAAS,CAACI,OAAV,GAAoBC,gBAAgB,CAACX,OAAD,EAAUE,IAAV,EAAgBM,OAAhB,CAApC;AAEA,aAAOF,SAAP;AACD;;AACD/B,IAAAA,OAAO,CAACwB,IAAR,GAAeA,IAAf,CAzCgC;;;;;;;;;;;AAqDhC,aAASa,QAAT,CAAkBC,EAAlB,EAAsBtB,GAAtB,EAA2BuB,GAA3B,EAAgC;AAC9B,UAAI;AACF,eAAO;AAAEC,UAAAA,IAAI,EAAE,QAAR;AAAkBD,UAAAA,GAAG,EAAED,EAAE,CAACG,IAAH,CAAQzB,GAAR,EAAauB,GAAb;AAAvB,SAAP;AACD,OAFD,CAEE,OAAOhB,GAAP,EAAY;AACZ,eAAO;AAAEiB,UAAAA,IAAI,EAAE,OAAR;AAAiBD,UAAAA,GAAG,EAAEhB;AAAtB,SAAP;AACD;AACF;;AAED,QAAImB,sBAAsB,GAAG,gBAA7B;AACA,QAAIC,sBAAsB,GAAG,gBAA7B;AACA,QAAIC,iBAAiB,GAAG,WAAxB;AACA,QAAIC,iBAAiB,GAAG,WAAxB,CAhEgC;;;AAoEhC,QAAIC,gBAAgB,GAAG,EAAvB,CApEgC;;;;;AA0EhC,aAAShB,SAAT,GAAqB;;AACrB,aAASiB,iBAAT,GAA6B;;AAC7B,aAASC,0BAAT,GAAsC,EA5EN;;;;AAgFhC,QAAIC,iBAAiB,GAAG,EAAxB;;AACAA,IAAAA,iBAAiB,CAACxC,cAAD,CAAjB,GAAoC,YAAY;AAC9C,aAAO,IAAP;AACD,KAFD;;AAIA,QAAIyC,QAAQ,GAAGhD,MAAM,CAACiD,cAAtB;AACA,QAAIC,uBAAuB,GAAGF,QAAQ,IAAIA,QAAQ,CAACA,QAAQ,CAACG,MAAM,CAAC,EAAD,CAAP,CAAT,CAAlD;;AACA,QAAID,uBAAuB,IACvBA,uBAAuB,KAAKnD,EAD5B,IAEAG,MAAM,CAACqC,IAAP,CAAYW,uBAAZ,EAAqC3C,cAArC,CAFJ,EAE0D;;;AAGxDwC,MAAAA,iBAAiB,GAAGG,uBAApB;AACD;;AAED,QAAIE,EAAE,GAAGN,0BAA0B,CAAC7C,SAA3B,GACP2B,SAAS,CAAC3B,SAAV,GAAsBD,MAAM,CAAC8B,MAAP,CAAciB,iBAAd,CADxB;AAEAF,IAAAA,iBAAiB,CAAC5C,SAAlB,GAA8BmD,EAAE,CAACC,WAAH,GAAiBP,0BAA/C;AACAA,IAAAA,0BAA0B,CAACO,WAA3B,GAAyCR,iBAAzC;AACAA,IAAAA,iBAAiB,CAACS,WAAlB,GAAgCzC,MAAM,CACpCiC,0BADoC,EAEpCnC,iBAFoC,EAGpC,mBAHoC,CAAtC,CAnGgC;;;AA2GhC,aAAS4C,qBAAT,CAA+BtD,SAA/B,EAA0C;AACxC,OAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,EAA4BuD,OAA5B,CAAoC,UAASC,MAAT,EAAiB;AACnD5C,QAAAA,MAAM,CAACZ,SAAD,EAAYwD,MAAZ,EAAoB,UAASpB,GAAT,EAAc;AACtC,iBAAO,KAAKJ,OAAL,CAAawB,MAAb,EAAqBpB,GAArB,CAAP;AACD,SAFK,CAAN;AAGD,OAJD;AAKD;;AAEDvC,IAAAA,OAAO,CAAC4D,mBAAR,GAA8B,UAASC,MAAT,EAAiB;AAC7C,UAAIC,IAAI,GAAG,OAAOD,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACN,WAAlD;AACA,aAAOO,IAAI,GACPA,IAAI,KAAKf,iBAAT;;AAGA,OAACe,IAAI,CAACN,WAAL,IAAoBM,IAAI,CAACC,IAA1B,MAAoC,mBAJ7B,GAKP,KALJ;AAMD,KARD;;AAUA/D,IAAAA,OAAO,CAACgE,IAAR,GAAe,UAASH,MAAT,EAAiB;AAC9B,UAAI3D,MAAM,CAAC+D,cAAX,EAA2B;AACzB/D,QAAAA,MAAM,CAAC+D,cAAP,CAAsBJ,MAAtB,EAA8Bb,0BAA9B;AACD,OAFD,MAEO;AACLa,QAAAA,MAAM,CAACK,SAAP,GAAmBlB,0BAAnB;AACAjC,QAAAA,MAAM,CAAC8C,MAAD,EAAShD,iBAAT,EAA4B,mBAA5B,CAAN;AACD;;AACDgD,MAAAA,MAAM,CAAC1D,SAAP,GAAmBD,MAAM,CAAC8B,MAAP,CAAcsB,EAAd,CAAnB;AACA,aAAOO,MAAP;AACD,KATD,CA7HgC;;;;;;AA4IhC7D,IAAAA,OAAO,CAACmE,KAAR,GAAgB,UAAS5B,GAAT,EAAc;AAC5B,aAAO;AAAE6B,QAAAA,OAAO,EAAE7B;AAAX,OAAP;AACD,KAFD;;AAIA,aAAS8B,aAAT,CAAuBtC,SAAvB,EAAkCuC,WAAlC,EAA+C;AAC7C,eAASC,MAAT,CAAgBZ,MAAhB,EAAwBpB,GAAxB,EAA6BiC,OAA7B,EAAsCC,MAAtC,EAA8C;AAC5C,YAAIC,MAAM,GAAGrC,QAAQ,CAACN,SAAS,CAAC4B,MAAD,CAAV,EAAoB5B,SAApB,EAA+BQ,GAA/B,CAArB;;AACA,YAAImC,MAAM,CAAClC,IAAP,KAAgB,OAApB,EAA6B;AAC3BiC,UAAAA,MAAM,CAACC,MAAM,CAACnC,GAAR,CAAN;AACD,SAFD,MAEO;AACL,cAAIoC,MAAM,GAAGD,MAAM,CAACnC,GAApB;AACA,cAAIrB,KAAK,GAAGyD,MAAM,CAACzD,KAAnB;;AACA,cAAIA,KAAK,IACL,OAAOA,KAAP,KAAiB,QADjB,IAEAd,MAAM,CAACqC,IAAP,CAAYvB,KAAZ,EAAmB,SAAnB,CAFJ,EAEmC;AACjC,mBAAOoD,WAAW,CAACE,OAAZ,CAAoBtD,KAAK,CAACkD,OAA1B,EAAmCQ,IAAnC,CAAwC,UAAS1D,KAAT,EAAgB;AAC7DqD,cAAAA,MAAM,CAAC,MAAD,EAASrD,KAAT,EAAgBsD,OAAhB,EAAyBC,MAAzB,CAAN;AACD,aAFM,EAEJ,UAASlD,GAAT,EAAc;AACfgD,cAAAA,MAAM,CAAC,OAAD,EAAUhD,GAAV,EAAeiD,OAAf,EAAwBC,MAAxB,CAAN;AACD,aAJM,CAAP;AAKD;;AAED,iBAAOH,WAAW,CAACE,OAAZ,CAAoBtD,KAApB,EAA2B0D,IAA3B,CAAgC,UAASC,SAAT,EAAoB;;;;AAIzDF,YAAAA,MAAM,CAACzD,KAAP,GAAe2D,SAAf;AACAL,YAAAA,OAAO,CAACG,MAAD,CAAP;AACD,WANM,EAMJ,UAASG,KAAT,EAAgB;;;AAGjB,mBAAOP,MAAM,CAAC,OAAD,EAAUO,KAAV,EAAiBN,OAAjB,EAA0BC,MAA1B,CAAb;AACD,WAVM,CAAP;AAWD;AACF;;AAED,UAAIM,eAAJ;;AAEA,eAASC,OAAT,CAAiBrB,MAAjB,EAAyBpB,GAAzB,EAA8B;AAC5B,iBAAS0C,0BAAT,GAAsC;AACpC,iBAAO,IAAIX,WAAJ,CAAgB,UAASE,OAAT,EAAkBC,MAAlB,EAA0B;AAC/CF,YAAAA,MAAM,CAACZ,MAAD,EAASpB,GAAT,EAAciC,OAAd,EAAuBC,MAAvB,CAAN;AACD,WAFM,CAAP;AAGD;;AAED,eAAOM,eAAe;;;;;;;;;;;;AAapBA,QAAAA,eAAe,GAAGA,eAAe,CAACH,IAAhB,CAChBK,0BADgB;;AAIhBA,QAAAA,0BAJgB,CAAH,GAKXA,0BAA0B,EAlBhC;AAmBD,OA5D4C;;;;AAgE7C,WAAK9C,OAAL,GAAe6C,OAAf;AACD;;AAEDvB,IAAAA,qBAAqB,CAACY,aAAa,CAAClE,SAAf,CAArB;;AACAkE,IAAAA,aAAa,CAAClE,SAAd,CAAwBQ,mBAAxB,IAA+C,YAAY;AACzD,aAAO,IAAP;AACD,KAFD;;AAGAX,IAAAA,OAAO,CAACqE,aAAR,GAAwBA,aAAxB,CAvNgC;;;;AA4NhCrE,IAAAA,OAAO,CAACkF,KAAR,GAAgB,UAASzD,OAAT,EAAkBC,OAAlB,EAA2BC,IAA3B,EAAiCC,WAAjC,EAA8C0C,WAA9C,EAA2D;AACzE,UAAIA,WAAW,KAAK,KAAK,CAAzB,EAA4BA,WAAW,GAAGa,OAAd;AAE5B,UAAIC,IAAI,GAAG,IAAIf,aAAJ,CACT7C,IAAI,CAACC,OAAD,EAAUC,OAAV,EAAmBC,IAAnB,EAAyBC,WAAzB,CADK,EAET0C,WAFS,CAAX;AAKA,aAAOtE,OAAO,CAAC4D,mBAAR,CAA4BlC,OAA5B,IACH0D,IADG;AAAA,QAEHA,IAAI,CAACC,IAAL,GAAYT,IAAZ,CAAiB,UAASD,MAAT,EAAiB;AAChC,eAAOA,MAAM,CAACW,IAAP,GAAcX,MAAM,CAACzD,KAArB,GAA6BkE,IAAI,CAACC,IAAL,EAApC;AACD,OAFD,CAFJ;AAKD,KAbD;;AAeA,aAASjD,gBAAT,CAA0BX,OAA1B,EAAmCE,IAAnC,EAAyCM,OAAzC,EAAkD;AAChD,UAAIsD,KAAK,GAAG7C,sBAAZ;AAEA,aAAO,SAAS6B,MAAT,CAAgBZ,MAAhB,EAAwBpB,GAAxB,EAA6B;AAClC,YAAIgD,KAAK,KAAK3C,iBAAd,EAAiC;AAC/B,gBAAM,IAAI4C,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,YAAID,KAAK,KAAK1C,iBAAd,EAAiC;AAC/B,cAAIc,MAAM,KAAK,OAAf,EAAwB;AACtB,kBAAMpB,GAAN;AACD,WAH8B;;;;AAO/B,iBAAOkD,UAAU,EAAjB;AACD;;AAEDxD,QAAAA,OAAO,CAAC0B,MAAR,GAAiBA,MAAjB;AACA1B,QAAAA,OAAO,CAACM,GAAR,GAAcA,GAAd;;AAEA,eAAO,IAAP,EAAa;AACX,cAAImD,QAAQ,GAAGzD,OAAO,CAACyD,QAAvB;;AACA,cAAIA,QAAJ,EAAc;AACZ,gBAAIC,cAAc,GAAGC,mBAAmB,CAACF,QAAD,EAAWzD,OAAX,CAAxC;;AACA,gBAAI0D,cAAJ,EAAoB;AAClB,kBAAIA,cAAc,KAAK7C,gBAAvB,EAAyC;AACzC,qBAAO6C,cAAP;AACD;AACF;;AAED,cAAI1D,OAAO,CAAC0B,MAAR,KAAmB,MAAvB,EAA+B;;;AAG7B1B,YAAAA,OAAO,CAAC4D,IAAR,GAAe5D,OAAO,CAAC6D,KAAR,GAAgB7D,OAAO,CAACM,GAAvC;AAED,WALD,MAKO,IAAIN,OAAO,CAAC0B,MAAR,KAAmB,OAAvB,EAAgC;AACrC,gBAAI4B,KAAK,KAAK7C,sBAAd,EAAsC;AACpC6C,cAAAA,KAAK,GAAG1C,iBAAR;AACA,oBAAMZ,OAAO,CAACM,GAAd;AACD;;AAEDN,YAAAA,OAAO,CAAC8D,iBAAR,CAA0B9D,OAAO,CAACM,GAAlC;AAED,WARM,MAQA,IAAIN,OAAO,CAAC0B,MAAR,KAAmB,QAAvB,EAAiC;AACtC1B,YAAAA,OAAO,CAAC+D,MAAR,CAAe,QAAf,EAAyB/D,OAAO,CAACM,GAAjC;AACD;;AAEDgD,UAAAA,KAAK,GAAG3C,iBAAR;AAEA,cAAI8B,MAAM,GAAGrC,QAAQ,CAACZ,OAAD,EAAUE,IAAV,EAAgBM,OAAhB,CAArB;;AACA,cAAIyC,MAAM,CAAClC,IAAP,KAAgB,QAApB,EAA8B;;;AAG5B+C,YAAAA,KAAK,GAAGtD,OAAO,CAACqD,IAAR,GACJzC,iBADI,GAEJF,sBAFJ;;AAIA,gBAAI+B,MAAM,CAACnC,GAAP,KAAeO,gBAAnB,EAAqC;AACnC;AACD;;AAED,mBAAO;AACL5B,cAAAA,KAAK,EAAEwD,MAAM,CAACnC,GADT;AAEL+C,cAAAA,IAAI,EAAErD,OAAO,CAACqD;AAFT,aAAP;AAKD,WAhBD,MAgBO,IAAIZ,MAAM,CAAClC,IAAP,KAAgB,OAApB,EAA6B;AAClC+C,YAAAA,KAAK,GAAG1C,iBAAR,CADkC;;;AAIlCZ,YAAAA,OAAO,CAAC0B,MAAR,GAAiB,OAAjB;AACA1B,YAAAA,OAAO,CAACM,GAAR,GAAcmC,MAAM,CAACnC,GAArB;AACD;AACF;AACF,OAxED;AAyED,KAvT+B;;;;;;AA6ThC,aAASqD,mBAAT,CAA6BF,QAA7B,EAAuCzD,OAAvC,EAAgD;AAC9C,UAAI0B,MAAM,GAAG+B,QAAQ,CAAChF,QAAT,CAAkBuB,OAAO,CAAC0B,MAA1B,CAAb;;AACA,UAAIA,MAAM,KAAKrD,WAAf,EAA0B;;;AAGxB2B,QAAAA,OAAO,CAACyD,QAAR,GAAmB,IAAnB;;AAEA,YAAIzD,OAAO,CAAC0B,MAAR,KAAmB,OAAvB,EAAgC;;AAE9B,cAAI+B,QAAQ,CAAChF,QAAT,CAAkB,QAAlB,CAAJ,EAAiC;;;AAG/BuB,YAAAA,OAAO,CAAC0B,MAAR,GAAiB,QAAjB;AACA1B,YAAAA,OAAO,CAACM,GAAR,GAAcjC,WAAd;AACAsF,YAAAA,mBAAmB,CAACF,QAAD,EAAWzD,OAAX,CAAnB;;AAEA,gBAAIA,OAAO,CAAC0B,MAAR,KAAmB,OAAvB,EAAgC;;;AAG9B,qBAAOb,gBAAP;AACD;AACF;;AAEDb,UAAAA,OAAO,CAAC0B,MAAR,GAAiB,OAAjB;AACA1B,UAAAA,OAAO,CAACM,GAAR,GAAc,IAAI0D,SAAJ,CACZ,gDADY,CAAd;AAED;;AAED,eAAOnD,gBAAP;AACD;;AAED,UAAI4B,MAAM,GAAGrC,QAAQ,CAACsB,MAAD,EAAS+B,QAAQ,CAAChF,QAAlB,EAA4BuB,OAAO,CAACM,GAApC,CAArB;;AAEA,UAAImC,MAAM,CAAClC,IAAP,KAAgB,OAApB,EAA6B;AAC3BP,QAAAA,OAAO,CAAC0B,MAAR,GAAiB,OAAjB;AACA1B,QAAAA,OAAO,CAACM,GAAR,GAAcmC,MAAM,CAACnC,GAArB;AACAN,QAAAA,OAAO,CAACyD,QAAR,GAAmB,IAAnB;AACA,eAAO5C,gBAAP;AACD;;AAED,UAAIoD,IAAI,GAAGxB,MAAM,CAACnC,GAAlB;;AAEA,UAAI,CAAE2D,IAAN,EAAY;AACVjE,QAAAA,OAAO,CAAC0B,MAAR,GAAiB,OAAjB;AACA1B,QAAAA,OAAO,CAACM,GAAR,GAAc,IAAI0D,SAAJ,CAAc,kCAAd,CAAd;AACAhE,QAAAA,OAAO,CAACyD,QAAR,GAAmB,IAAnB;AACA,eAAO5C,gBAAP;AACD;;AAED,UAAIoD,IAAI,CAACZ,IAAT,EAAe;;;AAGbrD,QAAAA,OAAO,CAACyD,QAAQ,CAACS,UAAV,CAAP,GAA+BD,IAAI,CAAChF,KAApC,CAHa;;AAMbe,QAAAA,OAAO,CAACoD,IAAR,GAAeK,QAAQ,CAACU,OAAxB,CANa;;;;;;;AAcb,YAAInE,OAAO,CAAC0B,MAAR,KAAmB,QAAvB,EAAiC;AAC/B1B,UAAAA,OAAO,CAAC0B,MAAR,GAAiB,MAAjB;AACA1B,UAAAA,OAAO,CAACM,GAAR,GAAcjC,WAAd;AACD;AAEF,OAnBD,MAmBO;;AAEL,eAAO4F,IAAP;AACD,OAvE6C;;;;AA2E9CjE,MAAAA,OAAO,CAACyD,QAAR,GAAmB,IAAnB;AACA,aAAO5C,gBAAP;AACD,KA1Y+B;;;;AA8YhCW,IAAAA,qBAAqB,CAACH,EAAD,CAArB;AAEAvC,IAAAA,MAAM,CAACuC,EAAD,EAAKzC,iBAAL,EAAwB,WAAxB,CAAN,CAhZgC;;;;;;AAuZhCyC,IAAAA,EAAE,CAAC7C,cAAD,CAAF,GAAqB,YAAW;AAC9B,aAAO,IAAP;AACD,KAFD;;AAIA6C,IAAAA,EAAE,CAAC+C,QAAH,GAAc,YAAW;AACvB,aAAO,oBAAP;AACD,KAFD;;AAIA,aAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,UAAIC,KAAK,GAAG;AAAEC,QAAAA,MAAM,EAAEF,IAAI,CAAC,CAAD;AAAd,OAAZ;;AAEA,UAAI,KAAKA,IAAT,EAAe;AACbC,QAAAA,KAAK,CAACE,QAAN,GAAiBH,IAAI,CAAC,CAAD,CAArB;AACD;;AAED,UAAI,KAAKA,IAAT,EAAe;AACbC,QAAAA,KAAK,CAACG,UAAN,GAAmBJ,IAAI,CAAC,CAAD,CAAvB;AACAC,QAAAA,KAAK,CAACI,QAAN,GAAiBL,IAAI,CAAC,CAAD,CAArB;AACD;;AAED,WAAKM,UAAL,CAAgBC,IAAhB,CAAqBN,KAArB;AACD;;AAED,aAASO,aAAT,CAAuBP,KAAvB,EAA8B;AAC5B,UAAI9B,MAAM,GAAG8B,KAAK,CAACQ,UAAN,IAAoB,EAAjC;AACAtC,MAAAA,MAAM,CAAClC,IAAP,GAAc,QAAd;AACA,aAAOkC,MAAM,CAACnC,GAAd;AACAiE,MAAAA,KAAK,CAACQ,UAAN,GAAmBtC,MAAnB;AACD;;AAED,aAASxC,OAAT,CAAiBN,WAAjB,EAA8B;;;;AAI5B,WAAKiF,UAAL,GAAkB,CAAC;AAAEJ,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAlB;AACA7E,MAAAA,WAAW,CAAC8B,OAAZ,CAAoB4C,YAApB,EAAkC,IAAlC;AACA,WAAKW,KAAL,CAAW,IAAX;AACD;;AAEDjH,IAAAA,OAAO,CAACkH,IAAR,GAAe,UAASC,MAAT,EAAiB;AAC9B,UAAID,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIjG,GAAT,IAAgBkG,MAAhB,EAAwB;AACtBD,QAAAA,IAAI,CAACJ,IAAL,CAAU7F,GAAV;AACD;;AACDiG,MAAAA,IAAI,CAACE,OAAL,GAL8B;;;AAS9B,aAAO,SAAS/B,IAAT,GAAgB;AACrB,eAAO6B,IAAI,CAACG,MAAZ,EAAoB;AAClB,cAAIpG,GAAG,GAAGiG,IAAI,CAACI,GAAL,EAAV;;AACA,cAAIrG,GAAG,IAAIkG,MAAX,EAAmB;AACjB9B,YAAAA,IAAI,CAACnE,KAAL,GAAaD,GAAb;AACAoE,YAAAA,IAAI,CAACC,IAAL,GAAY,KAAZ;AACA,mBAAOD,IAAP;AACD;AACF,SARoB;;;;;AAarBA,QAAAA,IAAI,CAACC,IAAL,GAAY,IAAZ;AACA,eAAOD,IAAP;AACD,OAfD;AAgBD,KAzBD;;AA2BA,aAAShC,MAAT,CAAgBkE,QAAhB,EAA0B;AACxB,UAAIA,QAAJ,EAAc;AACZ,YAAIC,cAAc,GAAGD,QAAQ,CAAC9G,cAAD,CAA7B;;AACA,YAAI+G,cAAJ,EAAoB;AAClB,iBAAOA,cAAc,CAAC/E,IAAf,CAAoB8E,QAApB,CAAP;AACD;;AAED,YAAI,OAAOA,QAAQ,CAAClC,IAAhB,KAAyB,UAA7B,EAAyC;AACvC,iBAAOkC,QAAP;AACD;;AAED,YAAI,CAACE,KAAK,CAACF,QAAQ,CAACF,MAAV,CAAV,EAA6B;AAC3B,cAAIK,CAAC,GAAG,CAAC,CAAT;AAAA,cAAYrC,IAAI,GAAG,SAASA,IAAT,GAAgB;AACjC,mBAAO,EAAEqC,CAAF,GAAMH,QAAQ,CAACF,MAAtB,EAA8B;AAC5B,kBAAIjH,MAAM,CAACqC,IAAP,CAAY8E,QAAZ,EAAsBG,CAAtB,CAAJ,EAA8B;AAC5BrC,gBAAAA,IAAI,CAACnE,KAAL,GAAaqG,QAAQ,CAACG,CAAD,CAArB;AACArC,gBAAAA,IAAI,CAACC,IAAL,GAAY,KAAZ;AACA,uBAAOD,IAAP;AACD;AACF;;AAEDA,YAAAA,IAAI,CAACnE,KAAL,GAAaZ,WAAb;AACA+E,YAAAA,IAAI,CAACC,IAAL,GAAY,IAAZ;AAEA,mBAAOD,IAAP;AACD,WAbD;;AAeA,iBAAOA,IAAI,CAACA,IAAL,GAAYA,IAAnB;AACD;AACF,OA7BuB;;;AAgCxB,aAAO;AAAEA,QAAAA,IAAI,EAAEI;AAAR,OAAP;AACD;;AACDzF,IAAAA,OAAO,CAACqD,MAAR,GAAiBA,MAAjB;;AAEA,aAASoC,UAAT,GAAsB;AACpB,aAAO;AAAEvE,QAAAA,KAAK,EAAEZ,WAAT;AAAoBgF,QAAAA,IAAI,EAAE;AAA1B,OAAP;AACD;;AAEDpD,IAAAA,OAAO,CAAC/B,SAAR,GAAoB;AAClBoD,MAAAA,WAAW,EAAErB,OADK;AAGlB+E,MAAAA,KAAK,EAAE,eAASU,aAAT,EAAwB;AAC7B,aAAKC,IAAL,GAAY,CAAZ;AACA,aAAKvC,IAAL,GAAY,CAAZ,CAF6B;;;AAK7B,aAAKQ,IAAL,GAAY,KAAKC,KAAL,GAAaxF,WAAzB;AACA,aAAKgF,IAAL,GAAY,KAAZ;AACA,aAAKI,QAAL,GAAgB,IAAhB;AAEA,aAAK/B,MAAL,GAAc,MAAd;AACA,aAAKpB,GAAL,GAAWjC,WAAX;AAEA,aAAKuG,UAAL,CAAgBnD,OAAhB,CAAwBqD,aAAxB;;AAEA,YAAI,CAACY,aAAL,EAAoB;AAClB,eAAK,IAAI5D,IAAT,IAAiB,IAAjB,EAAuB;;AAErB,gBAAIA,IAAI,CAAC8D,MAAL,CAAY,CAAZ,MAAmB,GAAnB,IACAzH,MAAM,CAACqC,IAAP,CAAY,IAAZ,EAAkBsB,IAAlB,CADA,IAEA,CAAC0D,KAAK,CAAC,CAAC1D,IAAI,CAAC+D,KAAL,CAAW,CAAX,CAAF,CAFV,EAE4B;AAC1B,mBAAK/D,IAAL,IAAazD,WAAb;AACD;AACF;AACF;AACF,OA3BiB;AA6BlByH,MAAAA,IAAI,EAAE,gBAAW;AACf,aAAKzC,IAAL,GAAY,IAAZ;AAEA,YAAI0C,SAAS,GAAG,KAAKnB,UAAL,CAAgB,CAAhB,CAAhB;AACA,YAAIoB,UAAU,GAAGD,SAAS,CAAChB,UAA3B;;AACA,YAAIiB,UAAU,CAACzF,IAAX,KAAoB,OAAxB,EAAiC;AAC/B,gBAAMyF,UAAU,CAAC1F,GAAjB;AACD;;AAED,eAAO,KAAK2F,IAAZ;AACD,OAvCiB;AAyClBnC,MAAAA,iBAAiB,EAAE,2BAASoC,SAAT,EAAoB;AACrC,YAAI,KAAK7C,IAAT,EAAe;AACb,gBAAM6C,SAAN;AACD;;AAED,YAAIlG,OAAO,GAAG,IAAd;;AACA,iBAASmG,MAAT,CAAgBC,GAAhB,EAAqBC,MAArB,EAA6B;AAC3B5D,UAAAA,MAAM,CAAClC,IAAP,GAAc,OAAd;AACAkC,UAAAA,MAAM,CAACnC,GAAP,GAAa4F,SAAb;AACAlG,UAAAA,OAAO,CAACoD,IAAR,GAAegD,GAAf;;AAEA,cAAIC,MAAJ,EAAY;;;AAGVrG,YAAAA,OAAO,CAAC0B,MAAR,GAAiB,MAAjB;AACA1B,YAAAA,OAAO,CAACM,GAAR,GAAcjC,WAAd;AACD;;AAED,iBAAO,CAAC,CAAEgI,MAAV;AACD;;AAED,aAAK,IAAIZ,CAAC,GAAG,KAAKb,UAAL,CAAgBQ,MAAhB,GAAyB,CAAtC,EAAyCK,CAAC,IAAI,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;AACpD,cAAIlB,KAAK,GAAG,KAAKK,UAAL,CAAgBa,CAAhB,CAAZ;AACA,cAAIhD,MAAM,GAAG8B,KAAK,CAACQ,UAAnB;;AAEA,cAAIR,KAAK,CAACC,MAAN,KAAiB,MAArB,EAA6B;;;;AAI3B,mBAAO2B,MAAM,CAAC,KAAD,CAAb;AACD;;AAED,cAAI5B,KAAK,CAACC,MAAN,IAAgB,KAAKmB,IAAzB,EAA+B;AAC7B,gBAAIW,QAAQ,GAAGnI,MAAM,CAACqC,IAAP,CAAY+D,KAAZ,EAAmB,UAAnB,CAAf;AACA,gBAAIgC,UAAU,GAAGpI,MAAM,CAACqC,IAAP,CAAY+D,KAAZ,EAAmB,YAAnB,CAAjB;;AAEA,gBAAI+B,QAAQ,IAAIC,UAAhB,EAA4B;AAC1B,kBAAI,KAAKZ,IAAL,GAAYpB,KAAK,CAACE,QAAtB,EAAgC;AAC9B,uBAAO0B,MAAM,CAAC5B,KAAK,CAACE,QAAP,EAAiB,IAAjB,CAAb;AACD,eAFD,MAEO,IAAI,KAAKkB,IAAL,GAAYpB,KAAK,CAACG,UAAtB,EAAkC;AACvC,uBAAOyB,MAAM,CAAC5B,KAAK,CAACG,UAAP,CAAb;AACD;AAEF,aAPD,MAOO,IAAI4B,QAAJ,EAAc;AACnB,kBAAI,KAAKX,IAAL,GAAYpB,KAAK,CAACE,QAAtB,EAAgC;AAC9B,uBAAO0B,MAAM,CAAC5B,KAAK,CAACE,QAAP,EAAiB,IAAjB,CAAb;AACD;AAEF,aALM,MAKA,IAAI8B,UAAJ,EAAgB;AACrB,kBAAI,KAAKZ,IAAL,GAAYpB,KAAK,CAACG,UAAtB,EAAkC;AAChC,uBAAOyB,MAAM,CAAC5B,KAAK,CAACG,UAAP,CAAb;AACD;AAEF,aALM,MAKA;AACL,oBAAM,IAAInB,KAAJ,CAAU,wCAAV,CAAN;AACD;AACF;AACF;AACF,OAnGiB;AAqGlBQ,MAAAA,MAAM,EAAE,gBAASxD,IAAT,EAAeD,GAAf,EAAoB;AAC1B,aAAK,IAAImF,CAAC,GAAG,KAAKb,UAAL,CAAgBQ,MAAhB,GAAyB,CAAtC,EAAyCK,CAAC,IAAI,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;AACpD,cAAIlB,KAAK,GAAG,KAAKK,UAAL,CAAgBa,CAAhB,CAAZ;;AACA,cAAIlB,KAAK,CAACC,MAAN,IAAgB,KAAKmB,IAArB,IACAxH,MAAM,CAACqC,IAAP,CAAY+D,KAAZ,EAAmB,YAAnB,CADA,IAEA,KAAKoB,IAAL,GAAYpB,KAAK,CAACG,UAFtB,EAEkC;AAChC,gBAAI8B,YAAY,GAAGjC,KAAnB;AACA;AACD;AACF;;AAED,YAAIiC,YAAY,KACXjG,IAAI,KAAK,OAAT,IACAA,IAAI,KAAK,UAFE,CAAZ,IAGAiG,YAAY,CAAChC,MAAb,IAAuBlE,GAHvB,IAIAA,GAAG,IAAIkG,YAAY,CAAC9B,UAJxB,EAIoC;;;AAGlC8B,UAAAA,YAAY,GAAG,IAAf;AACD;;AAED,YAAI/D,MAAM,GAAG+D,YAAY,GAAGA,YAAY,CAACzB,UAAhB,GAA6B,EAAtD;AACAtC,QAAAA,MAAM,CAAClC,IAAP,GAAcA,IAAd;AACAkC,QAAAA,MAAM,CAACnC,GAAP,GAAaA,GAAb;;AAEA,YAAIkG,YAAJ,EAAkB;AAChB,eAAK9E,MAAL,GAAc,MAAd;AACA,eAAK0B,IAAL,GAAYoD,YAAY,CAAC9B,UAAzB;AACA,iBAAO7D,gBAAP;AACD;;AAED,eAAO,KAAK4F,QAAL,CAAchE,MAAd,CAAP;AACD,OArIiB;AAuIlBgE,MAAAA,QAAQ,EAAE,kBAAShE,MAAT,EAAiBkC,QAAjB,EAA2B;AACnC,YAAIlC,MAAM,CAAClC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,gBAAMkC,MAAM,CAACnC,GAAb;AACD;;AAED,YAAImC,MAAM,CAAClC,IAAP,KAAgB,OAAhB,IACAkC,MAAM,CAAClC,IAAP,KAAgB,UADpB,EACgC;AAC9B,eAAK6C,IAAL,GAAYX,MAAM,CAACnC,GAAnB;AACD,SAHD,MAGO,IAAImC,MAAM,CAAClC,IAAP,KAAgB,QAApB,EAA8B;AACnC,eAAK0F,IAAL,GAAY,KAAK3F,GAAL,GAAWmC,MAAM,CAACnC,GAA9B;AACA,eAAKoB,MAAL,GAAc,QAAd;AACA,eAAK0B,IAAL,GAAY,KAAZ;AACD,SAJM,MAIA,IAAIX,MAAM,CAAClC,IAAP,KAAgB,QAAhB,IAA4BoE,QAAhC,EAA0C;AAC/C,eAAKvB,IAAL,GAAYuB,QAAZ;AACD;;AAED,eAAO9D,gBAAP;AACD,OAxJiB;AA0JlB6F,MAAAA,MAAM,EAAE,gBAAShC,UAAT,EAAqB;AAC3B,aAAK,IAAIe,CAAC,GAAG,KAAKb,UAAL,CAAgBQ,MAAhB,GAAyB,CAAtC,EAAyCK,CAAC,IAAI,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;AACpD,cAAIlB,KAAK,GAAG,KAAKK,UAAL,CAAgBa,CAAhB,CAAZ;;AACA,cAAIlB,KAAK,CAACG,UAAN,KAAqBA,UAAzB,EAAqC;AACnC,iBAAK+B,QAAL,CAAclC,KAAK,CAACQ,UAApB,EAAgCR,KAAK,CAACI,QAAtC;AACAG,YAAAA,aAAa,CAACP,KAAD,CAAb;AACA,mBAAO1D,gBAAP;AACD;AACF;AACF,OAnKiB;AAqKlB,eAAS,gBAAS2D,MAAT,EAAiB;AACxB,aAAK,IAAIiB,CAAC,GAAG,KAAKb,UAAL,CAAgBQ,MAAhB,GAAyB,CAAtC,EAAyCK,CAAC,IAAI,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;AACpD,cAAIlB,KAAK,GAAG,KAAKK,UAAL,CAAgBa,CAAhB,CAAZ;;AACA,cAAIlB,KAAK,CAACC,MAAN,KAAiBA,MAArB,EAA6B;AAC3B,gBAAI/B,MAAM,GAAG8B,KAAK,CAACQ,UAAnB;;AACA,gBAAItC,MAAM,CAAClC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,kBAAIoG,MAAM,GAAGlE,MAAM,CAACnC,GAApB;AACAwE,cAAAA,aAAa,CAACP,KAAD,CAAb;AACD;;AACD,mBAAOoC,MAAP;AACD;AACF,SAXuB;;;;AAexB,cAAM,IAAIpD,KAAJ,CAAU,uBAAV,CAAN;AACD,OArLiB;AAuLlBqD,MAAAA,aAAa,EAAE,uBAAStB,QAAT,EAAmBpB,UAAnB,EAA+BC,OAA/B,EAAwC;AACrD,aAAKV,QAAL,GAAgB;AACdhF,UAAAA,QAAQ,EAAE2C,MAAM,CAACkE,QAAD,CADF;AAEdpB,UAAAA,UAAU,EAAEA,UAFE;AAGdC,UAAAA,OAAO,EAAEA;AAHK,SAAhB;;AAMA,YAAI,KAAKzC,MAAL,KAAgB,MAApB,EAA4B;;;AAG1B,eAAKpB,GAAL,GAAWjC,WAAX;AACD;;AAED,eAAOwC,gBAAP;AACD;AArMiB,KAApB,CAjgBgC;;;;;AA6sBhC,WAAO9C,OAAP;AAED,GA/sBc;;;;AAotBb,GAA6B8I,MAAM,CAAC9I,OAApC,CAptBa,CAAf;;AAutBA,MAAI;AACF+I,IAAAA,kBAAkB,GAAGhJ,OAArB;AACD,GAFD,CAEE,OAAOiJ,oBAAP,EAA6B;;;;;;;;;;AAU7BC,IAAAA,QAAQ,CAAC,GAAD,EAAM,wBAAN,CAAR,CAAwClJ,OAAxC;;;;SCzsBcmJ,yBAEdC,YACAC;MAAAA;AAAAA,IAAAA,qBAAqBlK,0BAAkB,CAACZ;;;AAExC,MAAM+K,MAAM,GAAGC,iBAAiB,CAACH,UAAD,CAAhC;AACA,SAAOI,uBAAuB,CAACF,MAAM,CAACG,IAAR,EAAcJ,kBAAd,CAA9B;AACD;SAGeG,wBAEdE,WACAL;MAAAA;AAAAA,IAAAA,qBAAqBlK,0BAAkB,CAACZ;;;AAExCmL,EAAAA,SAAS,GAAG,OAAOA,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4CA,SAAS,CAACpD,QAAV,CAAmB,KAAnB,CAAxD;AACA,MAAMqD,OAAO,GAAGC,wBAAwB,CAACpK,uBAAe,CAACqK,cAAjB,EAAiCR,kBAAjC,CAAxC;AACA,MAAMS,IAAI,GAAGC,sBAAsB,CAACJ,OAAD,EAAUK,SAAS,CAACC,MAAM,CAACC,IAAP,CAAYR,SAAZ,EAAuB,KAAvB,CAAD,CAAnB,CAAnC;AACA,MAAMS,UAAU,GAAGC,eAAe,CAACN,IAAD,CAAlC;AACA,SAAOK,UAAP;AACD;SAEeE,sBAAsBnJ;AACpC,SAAO;AACLuB,IAAAA,IAAI,EAAEzD,yBAAiB,CAACsL,SADnB;AAELb,IAAAA,IAAI,EAAEQ,MAAM,CAACC,IAAP,CAAYhJ,GAAZ,EAAiB,KAAjB;AAFD,GAAP;AAID;SAEeqJ,uBACdC,SACAC,kBACAC;MAAAA;AAAAA,IAAAA,iBAAiBhL,sBAAc,CAACiL;;;AAEhC,MAAMC,EAAE,GAAG,IAAIC,WAAJ,CAAO,WAAP,CAAX;AACA,MAAMC,SAAS,GAAGF,EAAE,CAACG,cAAH,CAAkBP,OAAlB,EAA2B,KAA3B,EAAkCQ,UAAlC,GAA+C1E,QAA/C,CAAwD,EAAxD,CAAlB;AAEA,MAAM2E,eAAe,GAAGC,yBAAyB,CAACT,gBAAgB,CAAChB,IAAlB,CAAjD;AAEA,MAAMC,SAAS,GAAGkB,EAAE,CAACO,aAAH,CAChBL,SADgB,EAEhBG,eAFgB,EAGhBA,eAAe,CAACG,aAHA,EAIhB,KAJgB,CAAlB;;AAOA,MAAIV,cAAc,IAAIhL,sBAAc,CAAC2L,YAArC,EAAmD;AACjD,WAAO3B,SAAS,CAAC4B,MAAV,CAAiB,KAAjB,CAAP;AACD;;AAED,SAAO5B,SAAS,CAAC6B,gBAAV,CAA2B,KAA3B,CAAP;AACD;SAEeC,oBAAoB/B;AAClC,SAAO;AAAEhH,IAAAA,IAAI,EAAEzD,yBAAiB,CAACsL,SAA1B;AAAqCb,IAAAA,IAAI,EAAJA;AAArC,GAAP;AACD;SAEegC,aAAavK;AAC3B,SAAO,CAACA,GAAG,CAACuI,IAAJ,CAASnD,QAAT,CAAkB,KAAlB,EAAyBoF,UAAzB,CAAoC,IAApC,CAAR;AACD;SAEeC,kBAAkBzK;AAChC,SAAOA,GAAG,CAACuI,IAAJ,CAASnD,QAAT,CAAkB,KAAlB,CAAP;AACD;SAEesF,mBAAmB1K;AACjC,MAAM2K,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;AACAD,EAAAA,WAAW,CAAC9E,IAAZ,CAAiB7F,GAAG,CAACuI,IAArB;AACA,SAAOoC,WAAW,CAACE,YAAZ,EAAP;AACD;SAEexC,kBAAkBH;AAChC,MAAM4C,OAAO,GAAGC,sBAAsB,CAAC7C,UAAD,CAAtC;AACA,MAAMwB,EAAE,GAAG,IAAIC,WAAJ,CAAO,WAAP,CAAX;AACA,MAAMqB,OAAO,GAAGtB,EAAE,CAACG,cAAH,CAAkBiB,OAAO,CAACvC,IAAR,CAAanD,QAAb,CAAsB,KAAtB,EAA6ByB,KAA7B,CAAmC,CAAnC,EAAsC,EAAtC,CAAlB,EAA6D,KAA7D,CAAhB;AACA,MAAMuB,MAAM,GAAG4C,OAAO,CAACC,SAAR,CAAkBH,OAAO,CAACI,UAA1B,EAAsC,KAAtC,CAAf;AACA,SAAO/B,qBAAqB,CAACf,MAAD,CAA5B;AACD;SAEe+C,kBAAkB3C;AAChC,MAAMkB,EAAE,GAAG,IAAIC,WAAJ,CAAO,WAAP,CAAX;AACA,MAAM3J,GAAG,GAAG0J,EAAE,CAAC0B,aAAH,CAAiB5C,SAAjB,CAAZ;AACA,MAAMJ,MAAM,GAAGpI,GAAG,CAACiL,SAAJ,CAAc,IAAd,EAAoB,KAApB,CAAf;AACA,SAAO9B,qBAAqB,CAACf,MAAD,CAA5B;AACD;SAEeiD,qBAAqBC;AACnC,MAAMC,OAAO,GAAGD,YAAY,CAACE,SAAb,EAAhB;AACA,MAAMC,SAAS,GACbF,OAAO,KAAK,CAAZ,GAAgB7N,8BAAhB,GAAiDC,gCADnD;AAEA,SAAO2M,mBAAmB,CACxBvB,MAAM,CAAC2C,MAAP,CAAc,CAAC3C,MAAM,CAACC,IAAP,CAAY,CAACuC,OAAD,CAAZ,CAAD,EAAyBD,YAAY,CAACK,UAAb,CAAwBF,SAAxB,CAAzB,CAAd,CADwB,CAA1B;AAGD;SAOeV,uBAAuB/K;AACrC,MAAMuI,IAAI,GAAG,OAAOvI,GAAP,KAAe,QAAf,GAA0B+I,MAAM,CAACC,IAAP,CAAYhJ,GAAZ,EAAiB,KAAjB,CAA1B,GAAoDA,GAAjE;AACA,MAAIkL,UAAJ;;AACA,MAAI3C,IAAI,CAACnC,MAAL,KAAgB,EAApB,EAAwB;AACtB,QAAImC,IAAI,CAACA,IAAI,CAACnC,MAAL,GAAc,CAAf,CAAJ,KAA0B,CAA9B,EAAiC;AAC/B,YAAM,IAAI7B,KAAJ,CACJ,8DACE,yDAFE,CAAN;AAID;;AACD2G,IAAAA,UAAU,GAAG,IAAb;AACD,GARD,MAQO,IAAI3C,IAAI,CAACnC,MAAL,KAAgB,EAApB,EAAwB;AAC7B8E,IAAAA,UAAU,GAAG,KAAb;AACD,GAFM,MAEA;AACL,UAAM,IAAI3G,KAAJ,yGACkGgE,IAAI,CAACnC,MADvG,CAAN;AAGD;;AACD,SAAO;AAAEmC,IAAAA,IAAI,EAAJA,IAAF;AAAQ2C,IAAAA,UAAU,EAAVA;AAAR,GAAP;AACD;SAEeU,kBAAkBC;AAChC,MAAMnC,EAAE,GAAG,IAAIC,WAAJ,CAAO,WAAP,CAAX;AACA,MAAMmC,OAAO,GAAG;AAAED,IAAAA,OAAO,EAAEA,OAAO,IAAIE,+BAAW,CAAC,EAAD;AAAjC,GAAhB;AACA,MAAMf,OAAO,GAAGtB,EAAE,CAACsC,UAAH,CAAcF,OAAd,CAAhB;AACA,MAAM5D,UAAU,GAAG8C,OAAO,CAAClB,UAAR,GAAqB1E,QAArB,CAA8B,KAA9B,EAAqC,EAArC,CAAnB;AACA,SAAO2F,sBAAsB,CAAC7C,UAAD,CAA7B;AACD;SAEe+D,YAAY/D,YAA8BgE;AACxD,MAAMxC,EAAE,GAAG,IAAIC,WAAJ,CAAO,WAAP,CAAX;AACA,MAAM3J,GAAG,GAAG0J,EAAE,CAACG,cAAH,CAAkB3B,UAAU,CAACK,IAAX,CAAgBnD,QAAhB,CAAyB,KAAzB,EAAgCyB,KAAhC,CAAsC,CAAtC,EAAyC,EAAzC,CAAlB,EAAgE,KAAhE,CAAZ;AACA,MAAMsF,SAAS,GAAGnM,GAAG,CAACoM,IAAJ,CAASF,KAAT,EAAgB,KAAhB,EAAuB;AAAEG,IAAAA,SAAS,EAAE;AAAb,GAAvB,CAAlB;AACA,MAAMC,oBAAoB,GAAG,EAA7B;AACA,MAAMC,CAAC,GAAGC,kBAAkB,CAACL,SAAS,CAACI,CAAV,CAAYnH,QAAZ,CAAqB,KAArB,CAAD,EAA8BkH,oBAAoB,GAAG,CAArD,CAA5B;AACA,MAAMG,CAAC,GAAGD,kBAAkB,CAACL,SAAS,CAACM,CAAV,CAAYrH,QAAZ,CAAqB,KAArB,CAAD,EAA8BkH,oBAAoB,GAAG,CAArD,CAA5B;;AACA,MAAIH,SAAS,CAACjC,aAAV,KAA4B7K,SAA5B,IAAyC8M,SAAS,CAACjC,aAAV,KAA4B,IAAzE,EAA+E;AAC7E,UAAM,IAAI3F,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,MAAM2F,aAAa,GAAGwC,cAAc,CAACP,SAAS,CAACjC,aAAX,EAA0B,CAA1B,CAApC;AACA,MAAMyC,0BAA0B,GAAGzC,aAAa,GAAGqC,CAAhB,GAAoBE,CAAvD;AACA,SAAOG,sBAAsB,CAACD,0BAAD,CAA7B;AACD;SAEeE,0BAA0BV;AACxC,MAAMG,oBAAoB,GAAG,EAA7B;;AACA,MAAIH,SAAS,CAAC/F,MAAV,GAAmBkG,oBAAoB,GAAG,CAAvB,GAA2B,CAA3B,GAA+B,CAAtD,EAAyD;AACvD,UAAM,IAAI/H,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACD,MAAMuI,gBAAgB,GAAGX,SAAS,CAACY,MAAV,CAAiB,CAAjB,EAAoB,CAApB,CAAzB;AACA,SAAOC,cAAc,CAACF,gBAAD,CAArB;AACD;SAEe9C,0BAA0BmC;AACxC,MAAMG,oBAAoB,GAAG,EAA7B;;AACA,MAAIH,SAAS,CAAC/F,MAAV,GAAmBkG,oBAAoB,GAAG,CAAvB,GAA2B,CAA3B,GAA+B,CAAtD,EAAyD;AACvD,UAAM,IAAI/H,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACD,MAAMuI,gBAAgB,GAAGX,SAAS,CAACY,MAAV,CAAiB,CAAjB,EAAoB,CAApB,CAAzB;AACA,MAAMR,CAAC,GAAGJ,SAAS,CAACY,MAAV,CAAiB,CAAjB,EAAoBT,oBAAoB,GAAG,CAA3C,CAAV;AACA,MAAMG,CAAC,GAAGN,SAAS,CAACY,MAAV,CAAiB,IAAIT,oBAAoB,GAAG,CAA5C,EAA+CA,oBAAoB,GAAG,CAAtE,CAAV;AACA,SAAO;AACLpC,IAAAA,aAAa,EAAE8C,cAAc,CAACF,gBAAD,CADxB;AAELP,IAAAA,CAAC,EAADA,CAFK;AAGLE,IAAAA,CAAC,EAADA;AAHK,GAAP;AAKD;SAEeQ,aAAa/E;AAC3B,SAAOG,iBAAiB,CAACH,UAAU,CAACK,IAAZ,CAAxB;AACD;SAEe2E,mBAAmBhF;AACjC,SAAOA,UAAU,CAACK,IAAX,CAAgBnD,QAAhB,CAAyB,KAAzB,CAAP;AACD;SAEe+H,mBAAmBC,SAAyB5E;AAC1D,SAAO6E,mBAAU,CAACD,OAAD,EAAUE,OAAO,CAAC9E,SAAS,CAACD,IAAX,CAAP,CAAwBnD,QAAxB,CAAiC,KAAjC,CAAV,CAAjB;AACD;;ICxMYmI,kBAAb;AAAA;;AACE,8BAAYjE,OAAZ;;;AACE,gCAAMA,OAAN;AACA,WAAKA,OAAL,GAAeA,OAAf;AACA,WAAKxG,IAAL,GAAY,OAAKR,WAAL,CAAiBQ,IAA7B;;AACA,QAAIyB,KAAK,CAACiJ,iBAAV,EAA6B;AAC3BjJ,MAAAA,KAAK,CAACiJ,iBAAN,iCAA8B,OAAKlL,WAAnC;AACD;;;AACF;;AARH;AAAA,iCAAwCiC,KAAxC;IAWakJ,oBAAb;AAAA;;AACE,gCAAYnE,OAAZ;;;AACE,gCAAMA,OAAN;AACA,WAAKA,OAAL,GAAeA,OAAf;AACA,WAAKxG,IAAL,GAAY,OAAKR,WAAL,CAAiBQ,IAA7B;;AACA,QAAIyB,KAAK,CAACiJ,iBAAV,EAA6B;AAC3BjJ,MAAAA,KAAK,CAACiJ,iBAAN,iCAA8B,OAAKlL,WAAnC;AACD;;;AACF;;AARH;AAAA,iCAA0CiC,KAA1C;IAWamJ,mBAAb;AAAA;;AACE,+BAAYpE,OAAZ;;;AACE,gCAAMA,OAAN;AACA,WAAKA,OAAL,GAAeA,OAAf;AACA,WAAKxG,IAAL,GAAY,OAAKR,WAAL,CAAiBQ,IAA7B;;AACA,QAAIyB,KAAK,CAACiJ,iBAAV,EAA6B;AAC3BjJ,MAAAA,KAAK,CAACiJ,iBAAN,iCAA8B,OAAKlL,WAAnC;AACD;;;AACF;;AARH;AAAA,iCAAyCiC,KAAzC;IAWaoJ,YAAb;AAAA;;AACE,wBAAYrE,OAAZ;;;AACE,gCAAMA,OAAN;AACA,WAAKA,OAAL,GAAeA,OAAf;AACA,WAAKxG,IAAL,GAAY,OAAKR,WAAL,CAAiBQ,IAA7B;;AACA,QAAIyB,KAAK,CAACiJ,iBAAV,EAA6B;AAC3BjJ,MAAAA,KAAK,CAACiJ,iBAAN,iCAA8B,OAAKlL,WAAnC;AACD;;;AACF;;AARH;AAAA,iCAAkCiC,KAAlC;;SCTgBqJ,uBACdC,WACAC,eACAC;AAEA,MAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;AACjCA,IAAAA,SAAS,GAAGG,oBAAoB,CAACH,SAAD,CAAhC;AACD;;AAED,SAAO;AACLtM,IAAAA,IAAI,EAAEzD,yBAAiB,CAACmQ,aADnB;AAELC,IAAAA,aAAa,EAAE9P,yBAAiB,CAAC+P,GAF5B;AAGLN,IAAAA,SAAS,EAATA,SAHK;AAILC,IAAAA,aAAa,EAAbA,aAJK;AAKLC,IAAAA,MAAM,EAANA;AALK,GAAP;AAOD;SAWeK,4BACdP,WACAC,eACAC,QACAM;AAEA,MAAI,OAAOR,SAAP,KAAqB,QAAzB,EAAmC;AACjCA,IAAAA,SAAS,GAAGG,oBAAoB,CAACH,SAAD,CAAhC;AACD;;AACD,MAAI,OAAOQ,SAAP,KAAqB,QAAzB,EAAmC;AACjCA,IAAAA,SAAS,GAAGC,oBAAoB,CAACD,SAAD,CAAhC;AACD;;AAED,SAAO;AACL9M,IAAAA,IAAI,EAAEzD,yBAAiB,CAACmQ,aADnB;AAELC,IAAAA,aAAa,EAAE9P,yBAAiB,CAACmQ,QAF5B;AAGLV,IAAAA,SAAS,EAATA,SAHK;AAILC,IAAAA,aAAa,EAAbA,aAJK;AAKLC,IAAAA,MAAM,EAANA,MALK;AAMLM,IAAAA,SAAS,EAATA;AANK,GAAP;AAQD;SAaeG,+BACdX,WACAC,eACAO,WACAI;AAEA,MAAI,OAAOZ,SAAP,KAAqB,QAAzB,EAAmC;AACjCA,IAAAA,SAAS,GAAGG,oBAAoB,CAACH,SAAD,CAAhC;AACD;;AACD,MAAI,OAAOQ,SAAP,KAAqB,QAAzB,EAAmC;AACjCA,IAAAA,SAAS,GAAGC,oBAAoB,CAACD,SAAD,CAAhC;AACD;;AAED,SAAO;AACL9M,IAAAA,IAAI,EAAEzD,yBAAiB,CAACmQ,aADnB;AAELC,IAAAA,aAAa,EAAE9P,yBAAiB,CAACsQ,WAF5B;AAGLb,IAAAA,SAAS,EAATA,SAHK;AAILC,IAAAA,aAAa,EAAbA,aAJK;AAKLO,IAAAA,SAAS,EAATA,SALK;AAMLI,IAAAA,SAAS,EAATA;AANK,GAAP;AAQD;SAEeE,uBAAuBC;AACrC,MAAMjE,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;AACAD,EAAAA,WAAW,CAACkE,UAAZ,CAAuBD,aAAa,CAACV,aAArC;AACAvD,EAAAA,WAAW,CAAC9E,IAAZ,CAAiBiJ,kBAAkB,CAACF,aAAa,CAACf,SAAf,CAAnC;;AAEA,MACEe,aAAa,CAACV,aAAd,KAAgC9P,yBAAiB,CAACmQ,QAAlD,IACAK,aAAa,CAACV,aAAd,KAAgC9P,yBAAiB,CAACsQ,WAFpD,EAGE;AACA/D,IAAAA,WAAW,CAAC9E,IAAZ,CAAiBkJ,kBAAkB,CAACH,aAAa,CAACP,SAAf,CAAnC;AACD;;AAED,MAAIO,aAAa,CAACV,aAAd,KAAgC9P,yBAAiB,CAACsQ,WAAtD,EAAmE;AACjE/D,IAAAA,WAAW,CAAC9E,IAAZ,CAAiBmJ,WAAW,CAACJ,aAAa,CAACH,SAAf,CAA5B;AACD;;AAED9D,EAAAA,WAAW,CAACkE,UAAZ,CAAuBD,aAAa,CAACd,aAArC;;AAEA,MACEc,aAAa,CAACV,aAAd,KAAgC9P,yBAAiB,CAAC+P,GAAlD,IACAS,aAAa,CAACV,aAAd,KAAgC9P,yBAAiB,CAACmQ,QAFpD,EAGE;AACA5D,IAAAA,WAAW,CAAC9E,IAAZ,CAAiB+I,aAAa,CAACb,MAAd,CAAqBkB,WAArB,CAAiClG,MAAjC,EAAyC,IAAzC,EAA+C,CAA/C,CAAjB;AACD;;AAED,SAAO4B,WAAW,CAACE,YAAZ,EAAP;AACD;SAEeqE,yBAAyB5D;AACvC,MAAM6D,iBAAiB,GAAG7D,YAAY,CAAC8D,aAAb,CAA2BhR,yBAA3B,EAA8C,UAAAiR,CAAC;AACvE,UAAM,IAAI5B,oBAAJ,qBAA2C4B,CAA3C,2BAAN;AACD,GAFyB,CAA1B;AAIA,MAAMxB,SAAS,GAAGyB,oBAAoB,CAAChE,YAAD,CAAtC;AAEA,MAAIwC,aAAJ;AACA,MAAIO,SAAJ;AACA,MAAIN,MAAJ;;AACA,UAAQoB,iBAAR;AACE,SAAK/Q,yBAAiB,CAAC+P,GAAvB;AACEL,MAAAA,aAAa,GAAGxC,YAAY,CAAC8D,aAAb,CAA2B3Q,6BAA3B,EAAkD,UAAA4Q,CAAC;AACjE,cAAM,IAAI5B,oBAAJ,qBAA2C4B,CAA3C,+BAAN;AACD,OAFe,CAAhB;AAGAtB,MAAAA,MAAM,GAAG,IAAIwB,0BAAJ,CAAWjE,YAAY,CAACK,UAAb,CAAwB,CAAxB,EAA2BvG,QAA3B,CAAoC,KAApC,CAAX,EAAuD,EAAvD,CAAT;AACA,aAAO;AACL7D,QAAAA,IAAI,EAAEzD,yBAAiB,CAACmQ,aADnB;AAELC,QAAAA,aAAa,EAAE9P,yBAAiB,CAAC+P,GAF5B;AAGLN,QAAAA,SAAS,EAATA,SAHK;AAILC,QAAAA,aAAa,EAAbA,aAJK;AAKLC,QAAAA,MAAM,EAANA;AALK,OAAP;;AAOF,SAAK3P,yBAAiB,CAACmQ,QAAvB;AACEF,MAAAA,SAAS,GAAGmB,oBAAoB,CAAClE,YAAD,CAAhC;AACAwC,MAAAA,aAAa,GAAGxC,YAAY,CAAC8D,aAAb,CAA2B3Q,6BAA3B,EAAkD,UAAA4Q,CAAC;AACjE,cAAM,IAAI5B,oBAAJ,qBAA2C4B,CAA3C,+BAAN;AACD,OAFe,CAAhB;AAGAtB,MAAAA,MAAM,GAAG,IAAIwB,0BAAJ,CAAWjE,YAAY,CAACK,UAAb,CAAwB,CAAxB,EAA2BvG,QAA3B,CAAoC,KAApC,CAAX,EAAuD,EAAvD,CAAT;AACA,aAAO;AACL7D,QAAAA,IAAI,EAAEzD,yBAAiB,CAACmQ,aADnB;AAELC,QAAAA,aAAa,EAAE9P,yBAAiB,CAACmQ,QAF5B;AAGLV,QAAAA,SAAS,EAATA,SAHK;AAILC,QAAAA,aAAa,EAAbA,aAJK;AAKLC,QAAAA,MAAM,EAANA,MALK;AAMLM,QAAAA,SAAS,EAATA;AANK,OAAP;;AAQF,SAAKjQ,yBAAiB,CAACsQ,WAAvB;AACEL,MAAAA,SAAS,GAAGmB,oBAAoB,CAAClE,YAAD,CAAhC;AACA,UAAMmD,SAAS,GAAGgB,aAAa,CAACnE,YAAD,CAA/B;AACAwC,MAAAA,aAAa,GAAGxC,YAAY,CAAC8D,aAAb,CAA2B1Q,gCAA3B,EAAqD,UAAA2Q,CAAC;AACpE,cAAM,IAAI5B,oBAAJ,qBAA2C4B,CAA3C,+BAAN;AACD,OAFe,CAAhB;AAGA,aAAO;AACL9N,QAAAA,IAAI,EAAEzD,yBAAiB,CAACmQ,aADnB;AAELC,QAAAA,aAAa,EAAE9P,yBAAiB,CAACsQ,WAF5B;AAGLb,QAAAA,SAAS,EAATA,SAHK;AAILC,QAAAA,aAAa,EAAbA,aAJK;AAKLO,QAAAA,SAAS,EAATA,SALK;AAMLI,QAAAA,SAAS,EAATA;AANK,OAAP;AAjCJ;AA0CD;;SChKeiB,2BACdC,WACA5B,QACA6B;;;AAEA,MAAI,OAAOD,SAAP,KAAqB,QAAzB,EAAmC;AACjCA,IAAAA,SAAS,GAAGE,WAAW,CAACF,SAAD,CAAvB;AACD;;AACD,MAAI,OAAOC,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,IAAAA,IAAI,GAAGE,gBAAgB,CAACF,IAAD,CAAvB;AACD;;AAED,SAAO;AACLrO,IAAAA,IAAI,EAAEzD,yBAAiB,CAACiS,OADnB;AAELC,IAAAA,WAAW,EAAEjS,mBAAW,CAACkS,aAFpB;AAGLN,IAAAA,SAAS,EAATA,SAHK;AAIL5B,IAAAA,MAAM,EAANA,MAJK;AAKL6B,IAAAA,IAAI,WAAEA,IAAF,oBAAUE,gBAAgB,CAAC,EAAD;AALzB,GAAP;AAOD;SAWeI,0BACdC,iBACAC,cACAC,cACAC;AAEA,MAAI,OAAOH,eAAP,KAA2B,QAA/B,EAAyC;AACvCA,IAAAA,eAAe,GAAGI,aAAa,CAACJ,eAAD,CAA/B;AACD;;AACD,MAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;AACpCA,IAAAA,YAAY,GAAGI,cAAc,CAACJ,YAAD,CAA7B;AACD;;AACD,MAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;AACpCA,IAAAA,YAAY,GAAGG,cAAc,CAACH,YAAD,CAA7B;AACD;;AAED,SAAO;AACL9O,IAAAA,IAAI,EAAEzD,yBAAiB,CAACiS,OADnB;AAELC,IAAAA,WAAW,EAAEjS,mBAAW,CAAC0S,YAFpB;AAGLN,IAAAA,eAAe,EAAfA,eAHK;AAILC,IAAAA,YAAY,EAAZA,YAJK;AAKLC,IAAAA,YAAY,EAAZA,YALK;AAMLC,IAAAA,YAAY,EAAZA;AANK,GAAP;AAQD;SASeI,2BACdN,cACAO;AAEA,MAAI,OAAOP,YAAP,KAAwB,QAA5B,EAAsC;AACpCA,IAAAA,YAAY,GAAGI,cAAc,CAACJ,YAAD,CAA7B;AACD;;AACD,MAAI,OAAOO,QAAP,KAAoB,QAAxB,EAAkC;AAChCA,IAAAA,QAAQ,GAAGC,cAAc,CAACD,QAAD,CAAzB;AACD;;AAED,SAAO;AACLpP,IAAAA,IAAI,EAAEzD,yBAAiB,CAACiS,OADnB;AAELC,IAAAA,WAAW,EAAEjS,mBAAW,CAAC8S,aAFpB;AAGLT,IAAAA,YAAY,EAAZA,YAHK;AAILO,IAAAA,QAAQ,EAARA;AAJK,GAAP;AAMD;SAOeG;AACd,SAAO;AAAEvP,IAAAA,IAAI,EAAEzD,yBAAiB,CAACiS,OAA1B;AAAmCC,IAAAA,WAAW,EAAEjS,mBAAW,CAACgT;AAA5D,GAAP;AACD;SAQeC,sBAAsBC;AACpC,MAAIA,cAAc,CAACC,UAAf,IAA6B1T,4BAAjC,EAA+D;AAC7D,UAAM+G,KAAK,mCAAiC/G,4BAAjC,YAAX;AACD;;AACD,SAAO;AAAE+D,IAAAA,IAAI,EAAEzD,yBAAiB,CAACiS,OAA1B;AAAmCC,IAAAA,WAAW,EAAEjS,mBAAW,CAACoT,QAA5D;AAAsEF,IAAAA,cAAc,EAAdA;AAAtE,GAAP;AACD;SAEeG,iBAAiBC;AAC/B,MAAM1G,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;AACAD,EAAAA,WAAW,CAACkE,UAAZ,CAAuBwC,OAAO,CAACrB,WAA/B;;AAEA,UAAQqB,OAAO,CAACrB,WAAhB;AACE,SAAKjS,mBAAW,CAACkS,aAAjB;AACEtF,MAAAA,WAAW,CAAC9E,IAAZ,CAAiBmJ,WAAW,CAACqC,OAAO,CAAC1B,SAAT,CAA5B;AACAhF,MAAAA,WAAW,CAAC9E,IAAZ,CAAiBwL,OAAO,CAACtD,MAAR,CAAekB,WAAf,CAA2BlG,MAA3B,EAAmC,IAAnC,EAAyC,CAAzC,CAAjB;AACA4B,MAAAA,WAAW,CAAC9E,IAAZ,CAAiByL,sBAAsB,CAACD,OAAO,CAACzB,IAAT,CAAvC;AACA;;AACF,SAAK7R,mBAAW,CAAC0S,YAAjB;AACE9F,MAAAA,WAAW,CAAC9E,IAAZ,CAAiByL,sBAAsB,CAACD,OAAO,CAAClB,eAAT,CAAvC;AACAxF,MAAAA,WAAW,CAAC9E,IAAZ,CAAiByL,sBAAsB,CAACD,OAAO,CAACjB,YAAT,CAAvC;AACAzF,MAAAA,WAAW,CAAC9E,IAAZ,CAAiByL,sBAAsB,CAACD,OAAO,CAAChB,YAAT,CAAvC;AACA,UAAMkB,OAAO,GAAGxI,MAAM,CAACyI,KAAP,CAAa,CAAb,CAAhB;AACAD,MAAAA,OAAO,CAACE,aAAR,CAAsBJ,OAAO,CAACf,YAAR,CAAqBlK,MAA3C,EAAmD,CAAnD;AACAuE,MAAAA,WAAW,CAAC9E,IAAZ,CAAiB0L,OAAjB;AACAF,MAAAA,OAAO,CAACf,YAAR,CAAqB7N,OAArB,CAA6B,UAAAnB,GAAG;AAC9BqJ,QAAAA,WAAW,CAAC9E,IAAZ,CAAiBmJ,WAAW,CAAC1N,GAAD,CAA5B;AACD,OAFD;AAGA;;AACF,SAAKvD,mBAAW,CAAC8S,aAAjB;AACElG,MAAAA,WAAW,CAAC9E,IAAZ,CAAiByL,sBAAsB,CAACD,OAAO,CAACjB,YAAT,CAAvC;AACAzF,MAAAA,WAAW,CAAC9E,IAAZ,CAAiByL,sBAAsB,CAACD,OAAO,CAACV,QAAT,CAAvC;AACA;;AACF,SAAK5S,mBAAW,CAACgT,gBAAjB;AAEE;;AACF,SAAKhT,mBAAW,CAACoT,QAAjB;AACExG,MAAAA,WAAW,CAAC9E,IAAZ,CAAiBwL,OAAO,CAACJ,cAAzB;AACA;AA1BJ;;AA6BA,SAAOtG,WAAW,CAACE,YAAZ,EAAP;AACD;SAEe6G,mBAAmBpG;AACjC,MAAM0E,WAAW,GAAG1E,YAAY,CAAC8D,aAAb,CAA2BrR,mBAA3B,EAAwC,UAAAsR,CAAC;AAC3D,UAAM,IAAI9K,KAAJ,oCAA2C8K,CAA3C,CAAN;AACD,GAFmB,CAApB;;AAIA,UAAQW,WAAR;AACE,SAAKjS,mBAAW,CAACkS,aAAjB;AACE,UAAMN,SAAS,GAAGF,aAAa,CAACnE,YAAD,CAA/B;AACA,UAAMyC,MAAM,GAAG,IAAIwB,0BAAJ,CAAWjE,YAAY,CAACK,UAAb,CAAwB,CAAxB,CAAX,CAAf;AACA,UAAMiE,IAAI,GAAG+B,qBAAqB,CAACrG,YAAD,CAAlC;AACA,aAAOoE,0BAA0B,CAACC,SAAD,EAAY5B,MAAZ,EAAoB6B,IAApB,CAAjC;;AACF,SAAK7R,mBAAW,CAAC0S,YAAjB;AACE,UAAMN,eAAe,GAAGyB,kBAAkB,CAACtG,YAAD,CAA1C;AACA,UAAMuG,gBAAgB,GAAGC,mBAAmB,CAACxG,YAAD,CAA5C;AACA,UAAM+E,YAAY,GAAGyB,mBAAmB,CAACxG,YAAD,CAAxC;AACA,UAAMgF,YAAY,GAAG,EAArB;AACA,UAAMyB,YAAY,GAAGzG,YAAY,CAAC0G,YAAb,EAArB;;AACA,WAAK,IAAIvL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsL,YAApB,EAAkCtL,CAAC,EAAnC,EAAuC;AACrC,YAAMwL,YAAY,GAAGxC,aAAa,CAACnE,YAAD,CAAlC;AACAgF,QAAAA,YAAY,CAACzK,IAAb,CAAkBoM,YAAlB;AACD;;AACD,aAAO/B,yBAAyB,CAC9BC,eAD8B,EAE9B0B,gBAF8B,EAG9BxB,YAH8B,EAI9BC,YAJ8B,CAAhC;;AAMF,SAAKvS,mBAAW,CAAC8S,aAAjB;AACE,UAAMqB,iBAAiB,GAAGJ,mBAAmB,CAACxG,YAAD,CAA7C;AACA,UAAMqF,QAAQ,GAAGmB,mBAAmB,CAACxG,YAAD,EAAe,CAAf,EAAkB,MAAlB,CAApC;AACA,aAAOoF,0BAA0B,CAACwB,iBAAD,EAAoBvB,QAApB,CAAjC;;AACF,SAAK5S,mBAAW,CAACgT,gBAAjB;AAEE,aAAOD,mBAAmB,EAA1B;;AACF,SAAK/S,mBAAW,CAACoT,QAAjB;AACE,UAAMF,cAAc,GAAG3F,YAAY,CAACK,UAAb,CAAwBnO,4BAAxB,CAAvB;AACA,aAAOwT,qBAAqB,CAACC,cAAD,CAA5B;AA/BJ;AAiCD;;SCxKeK,uBAAuBhI;AACrC,UAAQA,OAAO,CAAC/H,IAAhB;AACE,SAAKzD,yBAAiB,CAACqU,OAAvB;AACE,aAAOC,gBAAgB,CAAC9I,OAAD,CAAvB;;AACF,SAAKxL,yBAAiB,CAACuU,SAAvB;AACE,aAAOvD,kBAAkB,CAACxF,OAAD,CAAzB;;AACF,SAAKxL,yBAAiB,CAACwU,oBAAvB;AACE,aAAOC,iBAAiB,CAACjJ,OAAD,CAAxB;;AACF,SAAKxL,yBAAiB,CAAC0U,UAAvB;AACE,aAAOC,mBAAmB,CAACnJ,OAAD,CAA1B;;AACF,SAAKxL,yBAAiB,CAAC4U,SAAvB;AACE,aAAO3D,kBAAkB,CAACzF,OAAD,CAAzB;;AACF,SAAKxL,yBAAiB,CAACmQ,aAAvB;AACE,aAAOU,sBAAsB,CAACrF,OAAD,CAA7B;;AACF,SAAKxL,yBAAiB,CAACsL,SAAvB;AACE,aAAOsB,kBAAkB,CAACpB,OAAD,CAAzB;;AACF,SAAKxL,yBAAiB,CAAC6U,kBAAvB;AACE,aAAOC,eAAe,CAACtJ,OAAD,CAAtB;;AACF,SAAKxL,yBAAiB,CAACiS,OAAvB;AACE,aAAOqB,gBAAgB,CAAC9H,OAAD,CAAvB;;AACF,SAAKxL,yBAAiB,CAAC+U,oBAAvB;AACE,aAAOC,6BAA6B,CAACxJ,OAAD,CAApC;;AACF,SAAKxL,yBAAiB,CAACiV,gBAAvB;AACE,aAAOC,yBAAyB,CAAC1J,OAAD,CAAhC;AAtBJ;AAwBD;SAEe2J,yBACd3H,cACA/J,MACA2R;AAEA,UAAQ3R,IAAR;AACE,SAAKzD,yBAAiB,CAACqU,OAAvB;AACE,aAAOP,kBAAkB,CAACtG,YAAD,CAAzB;;AACF,SAAKxN,yBAAiB,CAACuU,SAAvB;AACE,aAAO/C,oBAAoB,CAAChE,YAAD,CAA3B;;AACF,SAAKxN,yBAAiB,CAACwU,oBAAvB;AACE,aAAOR,mBAAmB,CAACxG,YAAD,CAA1B;;AACF,SAAKxN,yBAAiB,CAAC0U,UAAvB;AACE,aAAOb,qBAAqB,CAACrG,YAAD,CAA5B;;AACF,SAAKxN,yBAAiB,CAAC4U,SAAvB;AACE,aAAOlD,oBAAoB,CAAClE,YAAD,CAA3B;;AACF,SAAKxN,yBAAiB,CAACmQ,aAAvB;AACE,aAAOiB,wBAAwB,CAAC5D,YAAD,CAA/B;;AACF,SAAKxN,yBAAiB,CAACsL,SAAvB;AACE,aAAOiC,oBAAoB,CAACC,YAAD,CAA3B;;AACF,SAAKxN,yBAAiB,CAACiS,OAAvB;AACE,aAAO2B,kBAAkB,CAACpG,YAAD,CAAzB;;AACF,SAAKxN,yBAAiB,CAAC6U,kBAAvB;AACE,UAAI,CAACO,QAAL,EAAe;AACb,cAAM,IAAIzF,oBAAJ,CAAyB,wBAAzB,CAAN;AACD;;AACD,aAAO0F,iBAAiB,CAAC7H,YAAD,EAAe4H,QAAf,CAAxB;;AACF,SAAKpV,yBAAiB,CAACiV,gBAAvB;AACE,aAAOK,2BAA2B,CAAC9H,YAAD,CAAlC;;AACF;AACE,YAAM,IAAI/G,KAAJ,CAAU,uCAAV,CAAN;AAzBJ;AA2BD;SAQegM,cAAc8C;AAC5B,MAAMC,WAAW,GAAGC,yBAAgB,CAACF,gBAAD,CAApC;AACA,SAAO;AACL9R,IAAAA,IAAI,EAAEzD,yBAAiB,CAACqU,OADnB;AAEL/E,IAAAA,OAAO,EAAEkG,WAAW,CAAC,CAAD,CAFf;AAGLhG,IAAAA,OAAO,EAAEgG,WAAW,CAAC,CAAD;AAHf,GAAP;AAKD;SAEeE;AACd,SAAO;AACLjS,IAAAA,IAAI,EAAEzD,yBAAiB,CAACqU,OADnB;AAEL/E,IAAAA,OAAO,EAAE7O,sBAAc,CAACkV,gBAFnB;AAGLnG,IAAAA,OAAO,EAAE,IAAIoG,MAAJ,CAAW,EAAX;AAHJ,GAAP;AAKD;SAEe7K,uBAAuBuE,SAAyBuG;AAC9D,SAAO;AAAEpS,IAAAA,IAAI,EAAEzD,yBAAiB,CAACqU,OAA1B;AAAmC/E,IAAAA,OAAO,EAAPA,OAAnC;AAA4CE,IAAAA,OAAO,EAAEqG;AAArD,GAAP;AACD;SAMejL,yBACdkL,UACAC;AAEA,UAAQD,QAAR;AACE,SAAKtV,uBAAe,CAACqK,cAArB;AACE,cAAQkL,SAAR;AACE,aAAK5V,0BAAkB,CAACZ,OAAxB;AACE,iBAAOkB,sBAAc,CAACkV,gBAAtB;;AACF,aAAKxV,0BAAkB,CAAC6V,OAAxB;AACE,iBAAOvV,sBAAc,CAACwV,gBAAtB;;AACF;AACE,gBAAM,IAAIxP,KAAJ,2BACoByP,IAAI,CAACC,SAAL,CAAeJ,SAAf,CADpB,sBAC8DD,QAD9D,CAAN;AANJ;;AAUF,SAAKtV,uBAAe,CAAC4V,aAArB;AACA,SAAK5V,uBAAe,CAAC6V,eAArB;AACA,SAAK7V,uBAAe,CAAC8V,cAArB;AACE,cAAQP,SAAR;AACE,aAAK5V,0BAAkB,CAACZ,OAAxB;AACE,iBAAOkB,sBAAc,CAAC8V,eAAtB;;AACF,aAAKpW,0BAAkB,CAAC6V,OAAxB;AACE,iBAAOvV,sBAAc,CAAC+V,eAAtB;;AACF;AACE,gBAAM,IAAI/P,KAAJ,2BACoByP,IAAI,CAACC,SAAL,CAAeJ,SAAf,CADpB,sBAC8DD,QAD9D,CAAN;AANJ;;AAUF;AACE,YAAM,IAAIrP,KAAJ,0BAAiCyP,IAAI,CAACC,SAAL,CAAeL,QAAf,CAAjC,CAAN;AA1BJ;AA4BD;SAEeW,oBACdX,UACAC,WACAtL;AAEA,MAAM6E,OAAO,GAAG1E,wBAAwB,CAACkL,QAAD,EAAWC,SAAX,CAAxC;AACA,SAAOhL,sBAAsB,CAACuE,OAAD,EAAU7E,IAAV,CAA7B;AACD;SAEeiM,sBACdpH,SACAwG,UACAa,SACAC;AAEA,MAAIA,UAAU,CAACtO,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,UAAM7B,KAAK,CAAC,+BAAD,CAAX;AACD;;AAED,MAAIqP,QAAQ,KAAKtV,uBAAe,CAACqK,cAA7B,IAA+CiL,QAAQ,KAAKtV,uBAAe,CAAC6V,eAAhF,EAAiG;AAC/F,QAAIO,UAAU,CAACtO,MAAX,KAAsB,CAAtB,IAA2BqO,OAAO,KAAK,CAA3C,EAA8C;AAC5C,YAAMlQ,KAAK,CAAC,6CAAD,CAAX;AACD;AACF;;AAED,MAAIqP,QAAQ,KAAKtV,uBAAe,CAAC6V,eAA7B,IAAgDP,QAAQ,KAAKtV,uBAAe,CAAC8V,cAAjF,EAAiG;AAC/F,SAAK,IAAI3N,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiO,UAAU,CAACtO,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AAC1C,UAAI,CAAC8D,YAAY,CAACmK,UAAU,CAACjO,CAAD,CAAX,CAAjB,EAAkC;AAChC,cAAMlC,KAAK,CAAC,2CAAD,CAAX;AACD;AACF;AACF;;AAED,UAAQqP,QAAR;AACE,SAAKtV,uBAAe,CAACqK,cAArB;AACE,aAAOE,sBAAsB,CAACuE,OAAD,EAAUtE,SAAS,CAAC4L,UAAU,CAAC,CAAD,CAAV,CAAcnM,IAAf,CAAnB,CAA7B;;AACF,SAAKjK,uBAAe,CAAC4V,aAArB;AACE,aAAOrL,sBAAsB,CAACuE,OAAD,EAAUuH,QAAQ,CAACF,OAAD,EAAUC,UAAU,CAACE,GAAX,CAAelK,kBAAf,CAAV,CAAlB,CAA7B;;AACF;AACE,YAAMnG,KAAK,iFACqEqP,QADrE,CAAX;AANJ;AAUD;SAEe1K,gBAAgB2L;AAC9B,SAAOxH,mBAAU,CAACwH,OAAO,CAACzH,OAAT,EAAkByH,OAAO,CAACvH,OAA1B,CAAV,CAA6ClI,QAA7C,EAAP;AACD;SAEegN,iBAAiByC;AAC/B,MAAMlK,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;AACAD,EAAAA,WAAW,CAACmK,eAAZ,CAA4BpI,cAAc,CAACmI,OAAO,CAACzH,OAAT,EAAkB,CAAlB,CAA1C;AACAzC,EAAAA,WAAW,CAACmK,eAAZ,CAA4BD,OAAO,CAACvH,OAApC;AAEA,SAAO3C,WAAW,CAACE,YAAZ,EAAP;AACD;SAEe+G,mBAAmBtG;AACjC,MAAM8B,OAAO,GAAGJ,cAAc,CAAC1B,YAAY,CAACK,UAAb,CAAwB,CAAxB,EAA2BvG,QAA3B,CAAoC,KAApC,CAAD,CAA9B;AACA,MAAMmD,IAAI,GAAG+C,YAAY,CAACK,UAAb,CAAwB,EAAxB,EAA4BvG,QAA5B,CAAqC,KAArC,CAAb;AAEA,SAAO;AAAE7D,IAAAA,IAAI,EAAEzD,yBAAiB,CAACqU,OAA1B;AAAmC/E,IAAAA,OAAO,EAAPA,OAAnC;AAA4CE,IAAAA,OAAO,EAAE/E;AAArD,GAAP;AACD;SAuBeyF,qBACd+G;AAEA,MAAIA,eAAe,CAACC,QAAhB,CAAyB,GAAzB,CAAJ,EAAmC;AAAA,gCACDD,eAAe,CAACE,KAAhB,CAAsB,GAAtB,CADC;AAAA,QAC1BJ,OAD0B;AAAA,QACjBzE,YADiB;;AAEjC,WAAO8E,uBAAuB,CAACL,OAAD,EAAUzE,YAAV,CAA9B;AACD,GAHD,MAGO;AACL,WAAO+E,uBAAuB,CAACJ,eAAD,CAA9B;AACD;AACF;SAEeI,wBAAwBC;AACtC,MAAMxM,IAAI,GAAG2H,aAAa,CAAC6E,aAAD,CAA1B;AACA,SAAO;AACL7T,IAAAA,IAAI,EAAEzD,yBAAiB,CAACuU,SADnB;AAELgD,IAAAA,MAAM,EAAE1W,gCAAwB,CAAC2W,QAF5B;AAGLT,IAAAA,OAAO,EAAEjM;AAHJ,GAAP;AAKD;SAEesM,wBACdE,eACAhF;AAEA,MAAMxH,IAAI,GAAG2H,aAAa,CAAC6E,aAAD,CAA1B;AACA,MAAMtS,IAAI,GAAG0N,cAAc,CAACJ,YAAD,CAA3B;AACA,SAAO;AACL7O,IAAAA,IAAI,EAAEzD,yBAAiB,CAACuU,SADnB;AAELgD,IAAAA,MAAM,EAAE1W,gCAAwB,CAAC4W,QAF5B;AAGLV,IAAAA,OAAO,EAAEjM,IAHJ;AAILwH,IAAAA,YAAY,EAAEtN;AAJT,GAAP;AAMD;SAEegM,mBAAmBjB;AACjC,MAAMlD,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;AACAD,EAAAA,WAAW,CAAC9E,IAAZ,CAAiBkD,MAAM,CAACC,IAAP,CAAY,CAAC6E,SAAS,CAACwH,MAAX,CAAZ,CAAjB;AACA1K,EAAAA,WAAW,CAAC9E,IAAZ,CAAiBuM,gBAAgB,CAACvE,SAAS,CAACgH,OAAX,CAAjC;;AACA,MAAIhH,SAAS,CAACwH,MAAV,KAAqB1W,gCAAwB,CAAC4W,QAAlD,EAA4D;AAC1D5K,IAAAA,WAAW,CAAC9E,IAAZ,CAAiB0M,iBAAiB,CAAC1E,SAAS,CAACuC,YAAX,CAAlC;AACD;;AACD,SAAOzF,WAAW,CAACE,YAAZ,EAAP;AACD;SAEeyE,qBAAqBhE;AACnC,MAAM+J,MAAM,GAAG/J,YAAY,CAAC8D,aAAb,CAA2BzQ,gCAA3B,EAAqD,UAAA6W,CAAC;AACnE,UAAM,IAAI/H,oBAAJ,CAAyB,yCAAzB,CAAN;AACD,GAFc,CAAf;AAGA,MAAMoH,OAAO,GAAGjD,kBAAkB,CAACtG,YAAD,CAAlC;;AACA,MAAI+J,MAAM,KAAK1W,gCAAwB,CAAC2W,QAAxC,EAAkD;AAChD,WAAO;AAAE/T,MAAAA,IAAI,EAAEzD,yBAAiB,CAACuU,SAA1B;AAAqCgD,MAAAA,MAAM,EAANA,MAArC;AAA6CR,MAAAA,OAAO,EAAPA;AAA7C,KAAP;AACD;;AACD,MAAMzE,YAAY,GAAG0B,mBAAmB,CAACxG,YAAD,CAAxC;AACA,SAAO;AACL/J,IAAAA,IAAI,EAAEzD,yBAAiB,CAACuU,SADnB;AAELgD,IAAAA,MAAM,EAANA,MAFK;AAGLR,IAAAA,OAAO,EAAPA,OAHK;AAILzE,IAAAA,YAAY,EAAZA;AAJK,GAAP;AAMD;SAgBeI,eACdiF,SACAC,mBACAC;AAEA,MAAMC,YAAY,GAAGF,iBAAiB,IAAI,CAA1C;AACA,MAAMG,SAAS,GAAGF,cAAc,IAAIrY,uBAApC;;AACA,MAAIwY,qBAAqB,CAACL,OAAD,EAAUI,SAAV,CAAzB,EAA+C;AAC7C,UAAM,IAAItR,KAAJ,0CAAiDsR,SAAS,CAACzQ,QAAV,EAAjD,CAAN;AACD;;AACD,SAAO;AACL7D,IAAAA,IAAI,EAAEzD,yBAAiB,CAACwU,oBADnB;AAELmD,IAAAA,OAAO,EAAPA,OAFK;AAGLC,IAAAA,iBAAiB,EAAEE,YAHd;AAILD,IAAAA,cAAc,EAAEE;AAJX,GAAP;AAMD;SAEetD,kBAAkBwD;AAChC,MAAMpL,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;AACA,MAAMoL,aAAa,GAAGjN,MAAM,CAACC,IAAP,CAAY+M,GAAG,CAACN,OAAhB,CAAtB;AACA,MAAMrP,MAAM,GAAG4P,aAAa,CAAC9E,UAA7B;AACAvG,EAAAA,WAAW,CAACmK,eAAZ,CAA4BpI,cAAc,CAACtG,MAAD,EAAS2P,GAAG,CAACL,iBAAb,CAA1C;AACA/K,EAAAA,WAAW,CAAC9E,IAAZ,CAAiBmQ,aAAjB;AACA,SAAOrL,WAAW,CAACE,YAAZ,EAAP;AACD;SAEeiH,oBACdxG,cACA2K,aACAJ;AAEAI,EAAAA,WAAW,GAAGA,WAAW,GAAGA,WAAH,GAAiB,CAA1C;AACA,MAAM7P,MAAM,GAAG4G,cAAc,CAAC1B,YAAY,CAACK,UAAb,CAAwBsK,WAAxB,EAAqC7Q,QAArC,CAA8C,KAA9C,CAAD,CAA7B;AACA,MAAMqQ,OAAO,GAAGnK,YAAY,CAACK,UAAb,CAAwBvF,MAAxB,EAAgChB,QAAhC,EAAhB;AACA,SAAOoL,cAAc,CAACiF,OAAD,EAAUQ,WAAV,EAAuBJ,SAAvB,WAAuBA,SAAvB,GAAoC,GAApC,CAArB;AACD;SAEejF,eAAe6E;AAC7B,SAAOjF,cAAc,CAACiF,OAAD,EAAU,CAAV,EAAa,MAAb,CAArB;AACD;SAOe3F,iBAAiB2F;AAC/B,MAAIA,OAAO,IAAIK,qBAAqB,CAACL,OAAD,EAAU7X,qBAAV,CAApC,EAAsE;AACpE,UAAM,IAAI2G,KAAJ,qCAA4C3G,qBAAqB,CAACwH,QAAtB,EAA5C,YAAN;AACD;;AACD,SAAO;AAAE7D,IAAAA,IAAI,EAAEzD,yBAAiB,CAAC0U,UAA1B;AAAsCiD,IAAAA,OAAO,EAAPA;AAAtC,GAAP;AACD;SAEehD,oBAAoByD;AAClC,MAAMvL,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;AACA,MAAMoL,aAAa,GAAGjN,MAAM,CAACC,IAAP,CAAYkN,UAAU,CAACT,OAAvB,CAAtB;AACA,MAAMU,aAAa,GAAGC,mBAAmB,CACvCJ,aAAa,CAAC5Q,QAAd,CAAuB,KAAvB,CADuC,EAEvCxH,qBAAqB,GAAG,CAFe,CAAzC;AAIA+M,EAAAA,WAAW,CAAC9E,IAAZ,CAAiBkD,MAAM,CAACC,IAAP,CAAYmN,aAAZ,EAA2B,KAA3B,CAAjB;AACA,SAAOxL,WAAW,CAACE,YAAZ,EAAP;AACD;SAEe8G,sBAAsBrG;AACpC,MAAMmK,OAAO,GAAGnK,YAAY,CAACK,UAAb,CAAwB/N,qBAAxB,EAA+CwH,QAA/C,EAAhB;AACA,SAAO;AAAE7D,IAAAA,IAAI,EAAEzD,yBAAiB,CAAC0U,UAA1B;AAAsCiD,IAAAA,OAAO,EAAPA;AAAtC,GAAP;AACD;SAcenH,qBAAqB+H;kBACuBA,EAAE,CAACpB,KAAH,CAAS,OAAT;MAAnDqB;MAAcC;MAAmBC;;AACxC,MAAMnI,SAAS,GAAGoI,eAAe,CAACH,YAAD,EAAeC,iBAAf,EAAkCC,cAAlC,CAAjC;AACA,SAAOnI,SAAP;AACD;SAEeoI,gBACdrB,eACAhF,cACA3B;AAEA,SAAO;AACLlN,IAAAA,IAAI,EAAEzD,yBAAiB,CAAC4U,SADnB;AAELmC,IAAAA,OAAO,EAAEtE,aAAa,CAAC6E,aAAD,CAFjB;AAGLhF,IAAAA,YAAY,EAAEI,cAAc,CAACJ,YAAD,CAHvB;AAIL3B,IAAAA,SAAS,EAAE+B,cAAc,CAAC/B,SAAD;AAJpB,GAAP;AAMD;SAEeM,mBAAmB9J;AACjC,MAAM0F,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;AACAD,EAAAA,WAAW,CAAC9E,IAAZ,CAAiBuM,gBAAgB,CAACnN,IAAI,CAAC4P,OAAN,CAAjC;AACAlK,EAAAA,WAAW,CAAC9E,IAAZ,CAAiB0M,iBAAiB,CAACtN,IAAI,CAACmL,YAAN,CAAlC;AACAzF,EAAAA,WAAW,CAAC9E,IAAZ,CAAiB0M,iBAAiB,CAACtN,IAAI,CAACwJ,SAAN,CAAlC;AACA,SAAO9D,WAAW,CAACE,YAAZ,EAAP;AACD;SAEe2E,qBAAqBlE;AACnC,SAAO;AACL/J,IAAAA,IAAI,EAAEzD,yBAAiB,CAAC4U,SADnB;AAELmC,IAAAA,OAAO,EAAEjD,kBAAkB,CAACtG,YAAD,CAFtB;AAGL8E,IAAAA,YAAY,EAAE0B,mBAAmB,CAACxG,YAAD,CAH5B;AAILmD,IAAAA,SAAS,EAAEqD,mBAAmB,CAACxG,YAAD;AAJzB,GAAP;AAMD;SAQeoL,aACdtU,QACAsT;AAEA,SAAO;AACLnU,IAAAA,IAAI,EAAEzD,yBAAiB,CAAC6U,kBADnB;AAEL+C,IAAAA,iBAAiB,EAAEA,iBAAiB,IAAI,CAFnC;AAGLtT,IAAAA,MAAM,EAANA;AAHK,GAAP;AAKD;SAEewQ,gBAAgB+D;AAC9B,MAAMC,IAAI,GAAGD,MAAM,CAACvU,MAApB;AACA,MAAMuI,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;AACAD,EAAAA,WAAW,CAACmK,eAAZ,CAA4BpI,cAAc,CAACkK,IAAI,CAACxQ,MAAN,EAAcuQ,MAAM,CAACjB,iBAArB,CAA1C;;AACA,OAAK,IAAImB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,IAAI,CAACxQ,MAAjC,EAAyCyQ,KAAK,EAA9C,EAAkD;AAChDlM,IAAAA,WAAW,CAAC9E,IAAZ,CAAiByL,sBAAsB,CAACsF,IAAI,CAACC,KAAD,CAAL,CAAvC;AACD;;AACD,SAAOlM,WAAW,CAACE,YAAZ,EAAP;AACD;SAEesI,kBACd7H,cACA/J,MACAmU;AAEA,MAAMtP,MAAM,GAAG4G,cAAc,CAAC1B,YAAY,CAACK,UAAb,CAAwB+J,iBAAiB,IAAI,CAA7C,EAAgDtQ,QAAhD,CAAyD,KAAzD,CAAD,CAA7B;AACA,MAAM0R,CAAC,GAAoB,EAA3B;;AACA,OAAK,IAAID,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGzQ,MAA5B,EAAoCyQ,KAAK,EAAzC,EAA6C;AAC3C,YAAQtV,IAAR;AACE,WAAKzD,yBAAiB,CAACqU,OAAvB;AACE2E,QAAAA,CAAC,CAACjR,IAAF,CAAO+L,kBAAkB,CAACtG,YAAD,CAAzB;AACA;;AACF,WAAKxN,yBAAiB,CAACwU,oBAAvB;AACEwE,QAAAA,CAAC,CAACjR,IAAF,CAAOiM,mBAAmB,CAACxG,YAAD,CAA1B;AACA;;AACF,WAAKxN,yBAAiB,CAAC0U,UAAvB;AACEsE,QAAAA,CAAC,CAACjR,IAAF,CAAO8L,qBAAqB,CAACrG,YAAD,CAA5B;AACA;;AACF,WAAKxN,yBAAiB,CAAC4U,SAAvB;AACEoE,QAAAA,CAAC,CAACjR,IAAF,CAAO2J,oBAAoB,CAAClE,YAAD,CAA3B;AACA;;AACF,WAAKxN,yBAAiB,CAACmQ,aAAvB;AACE6I,QAAAA,CAAC,CAACjR,IAAF,CAAOqJ,wBAAwB,CAAC5D,YAAD,CAA/B;AACA;;AACF,WAAKxN,yBAAiB,CAACsL,SAAvB;AACE0N,QAAAA,CAAC,CAACjR,IAAF,CAAOwF,oBAAoB,CAACC,YAAD,CAA3B;AACA;;AACF,WAAKxN,yBAAiB,CAAC+U,oBAAvB;AACEiE,QAAAA,CAAC,CAACjR,IAAF,CAAOkR,+BAA+B,CAACzL,YAAD,CAAtC;AACA;AArBJ;AAuBD;;AACD,SAAOoL,YAAY,CAACI,CAAD,EAAIpB,iBAAJ,CAAnB;AACD;;AC3eD,SAASsB,iBAAT,CAA2BnJ,SAA3B;AACE,MAAIA,SAAS,CAACtM,IAAV,KAAmB0V,mBAAW,CAACC,iBAAnC,EAAsD;AACpD,WAAOhO,eAAe,CAAC2E,SAAS,CAACgH,OAAX,CAAtB;AACD,GAFD,MAEO,IAAIhH,SAAS,CAACtM,IAAV,KAAmB0V,mBAAW,CAACE,iBAAnC,EAAsD;AAC3D,QAAMtC,OAAO,GAAG3L,eAAe,CAAC2E,SAAS,CAACgH,OAAX,CAA/B;AACA,WAAUA,OAAV,SAAqBhH,SAAS,CAACuC,YAAV,CAAuBqF,OAA5C;AACD,GAHM,MAGA;AACL,UAAM,IAAIlR,KAAJ,iCAAwCyP,IAAI,CAACC,SAAL,CAAepG,SAAf,CAAxC,CAAN;AACD;AACF;;AAED,SAASgC,WAAT,CAAqBhC,SAArB;AACE,MAAIA,SAAS,CAACmH,QAAV,CAAmB,GAAnB,CAAJ,EAA6B;AAAA,2BACKnH,SAAS,CAACoH,KAAV,CAAgB,GAAhB,CADL;AAAA,QACpBJ,OADoB;AAAA,QACXzE,YADW;;AAE3B,WAAOgH,mBAAmB,CAACvC,OAAD,EAAUzE,YAAV,CAA1B;AACD,GAHD,MAGO;AACL,WAAOiH,mBAAmB,CAACxJ,SAAD,CAA1B;AACD;AACF;;AAED,SAASwJ,mBAAT,CAA6BjC,aAA7B;AACE,MAAMxM,IAAI,GAAG2H,aAAa,CAAC6E,aAAD,CAA1B;AACA,SAAO;AAAE7T,IAAAA,IAAI,EAAE0V,mBAAW,CAACC,iBAApB;AAAuCrC,IAAAA,OAAO,EAAEjM;AAAhD,GAAP;AACD;;AAED,SAAS0O,8BAAT,CAAwCzC,OAAxC;AACE,SAAO;AAAEtT,IAAAA,IAAI,EAAE0V,mBAAW,CAACC,iBAApB;AAAuCrC,IAAAA,OAAO,EAAPA;AAAvC,GAAP;AACD;;AAED,SAASuC,mBAAT,CAA6BhC,aAA7B,EAAoDhF,YAApD;AACE,MAAMxH,IAAI,GAAG2H,aAAa,CAAC6E,aAAD,CAA1B;AACA,MAAMmC,0BAA0B,GAAG/G,cAAc,CAACJ,YAAD,CAAjD;AACA,SAAOoH,8BAA8B,CAAC5O,IAAD,EAAO2O,0BAAP,CAArC;AACD;;AAED,SAASC,8BAAT,CACE3C,OADF,EAEEzE,YAFF;AAIE,MAAIrH,MAAM,CAACmI,UAAP,CAAkBd,YAAY,CAACqF,OAA/B,KAA2C,GAA/C,EAAoD;AAClD,UAAM,IAAIlR,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACD,SAAO;AAAEhD,IAAAA,IAAI,EAAE0V,mBAAW,CAACE,iBAApB;AAAuCtC,IAAAA,OAAO,EAAPA,OAAvC;AAAgDzE,IAAAA,YAAY,EAAZA;AAAhD,GAAP;AACD;;AAED,SAASqH,+BAAT,CACEC,EADF,EAEEtH,YAFF;AAIE,MAAMmH,0BAA0B,GAAG/G,cAAc,CAACJ,YAAD,CAAjD;AACA,SAAO;AACL7O,IAAAA,IAAI,EAAE0V,mBAAW,CAACE,iBADb;AAELtC,IAAAA,OAAO,EAAE6C,EAAE,CAAC7C,OAFP;AAGLzE,IAAAA,YAAY,EAAEmH;AAHT,GAAP;AAKD;;ACtDD,WAAYN;AACVA,EAAAA,mCAAA,QAAA;AACAA,EAAAA,oCAAA,SAAA;AACAA,EAAAA,sCAAA,WAAA;AACAA,EAAAA,wCAAA,aAAA;AACAA,EAAAA,yCAAA,cAAA;AACAA,EAAAA,iDAAA,sBAAA;AACAA,EAAAA,iDAAA,sBAAA;AACAA,EAAAA,0CAAA,eAAA;AACAA,EAAAA,2CAAA,gBAAA;AACAA,EAAAA,4CAAA,iBAAA;AACAA,EAAAA,6CAAA,iBAAA;AACAA,EAAAA,qCAAA,SAAA;AACAA,EAAAA,sCAAA,UAAA;AACAA,EAAAA,4CAAA,gBAAA;AACAA,EAAAA,2CAAA,eAAA;AACD,CAhBD,EAAYA,mBAAW,KAAXA,mBAAW,KAAA,CAAvB;;SAiCgBU,WAAWC,KAAmBC;MAAAA;AAAAA,IAAAA,WAA+B;;;AAC3E,UAAQD,GAAG,CAACrW,IAAZ;AACE,SAAK0V,mBAAW,CAACa,QAAjB;AACE,aAAO,MAAP;;AACF,SAAKb,mBAAW,CAACc,SAAjB;AACE,aAAO,OAAP;;AACF,SAAKd,mBAAW,CAACe,GAAjB;AACE,aAAOJ,GAAG,CAAC3X,KAAJ,CAAUgY,QAAV,CAAmB1a,gBAAnB,EAAqC6H,QAArC,EAAP;;AACF,SAAK6R,mBAAW,CAACiB,IAAjB;AACE,mBAAWN,GAAG,CAAC3X,KAAJ,CAAUmF,QAAV,EAAX;;AACF,SAAK6R,mBAAW,CAAClO,MAAjB;AACE,UAAI8O,QAAQ,KAAK,UAAjB,EAA6B;AAC3B,YAAMM,GAAG,GAAGP,GAAG,CAACQ,MAAJ,CAAWhT,QAAX,CAAoB,OAApB,CAAZ;;AACA,YAAI,QAAQiT,IAAR,CAAaF,GAAb,CAAJ,EAAuB;AACrB,iBAAOnE,IAAI,CAACC,SAAL,CAAekE,GAAf,CAAP;AACD;AACF;;AACD,oBAAYP,GAAG,CAACQ,MAAJ,CAAWhT,QAAX,CAAoB,KAApB,CAAZ;;AACF,SAAK6R,mBAAW,CAACqB,YAAjB;AACE,aAAO,MAAP;;AACF,SAAKrB,mBAAW,CAACsB,YAAjB;AACE,wBAAgBZ,UAAU,CAACC,GAAG,CAAC3X,KAAL,EAAY4X,QAAZ,CAA1B;;AACF,SAAKZ,mBAAW,CAACuB,WAAjB;AACE,uBAAeb,UAAU,CAACC,GAAG,CAAC3X,KAAL,EAAY4X,QAAZ,CAAzB;;AACF,SAAKZ,mBAAW,CAACwB,UAAjB;AACE,sBAAcd,UAAU,CAACC,GAAG,CAAC3X,KAAL,EAAY4X,QAAZ,CAAxB;;AACF,SAAKZ,mBAAW,CAACC,iBAAjB;AACA,SAAKD,mBAAW,CAACE,iBAAjB;AACE,aAAOH,iBAAiB,CAACY,GAAD,CAAxB;;AACF,SAAKX,mBAAW,CAACyB,IAAjB;AACE,wBAAgBd,GAAG,CAAChB,IAAJ,CAAShC,GAAT,CAAa,UAAA+D,CAAC;AAAA,eAAIhB,UAAU,CAACgB,CAAD,EAAId,QAAJ,CAAd;AAAA,OAAd,EAA2Ce,IAA3C,CAAgD,GAAhD,CAAhB;;AACF,SAAK3B,mBAAW,CAAC4B,KAAjB;AACE,yBAAiB5Z,MAAM,CAACgH,IAAP,CAAY2R,GAAG,CAACrP,IAAhB,EACdqM,GADc,CACV,UAAA5U,GAAG;AAAA,qBAAQA,GAAR,SAAe2X,UAAU,CAACC,GAAG,CAACrP,IAAJ,CAASvI,GAAT,CAAD,EAAgB6X,QAAhB,CAAzB;AAAA,OADO,EAEde,IAFc,CAET,GAFS,CAAjB;;AAGF,SAAK3B,mBAAW,CAAC6B,WAAjB;AACE,oBAAWlB,GAAG,CAACrP,IAAf;;AACF,SAAK0O,mBAAW,CAAC8B,UAAjB;AACE,qBAAYnB,GAAG,CAACrP,IAAhB;AArCJ;AAuCD;SAEeyQ,UAAUpB;AACxB,UAAQA,GAAG,CAACrW,IAAZ;AACE,SAAK0V,mBAAW,CAACa,QAAjB;AACE,aAAO,IAAP;;AACF,SAAKb,mBAAW,CAACc,SAAjB;AACE,aAAO,KAAP;;AACF,SAAKd,mBAAW,CAACe,GAAjB;AACE,aAAOJ,GAAG,CAAC3X,KAAJ,CAAUgY,QAAV,CAAmB1a,gBAAnB,EAAqC0b,QAArC,EAAP;;AACF,SAAKhC,mBAAW,CAACiB,IAAjB;AACE,aAAON,GAAG,CAAC3X,KAAJ,CAAUgZ,QAAV,EAAP;;AACF,SAAKhC,mBAAW,CAAClO,MAAjB;AACE,oBAAY6O,GAAG,CAACQ,MAAJ,CAAWhT,QAAX,CAAoB,KAApB,CAAZ;;AACF,SAAK6R,mBAAW,CAACqB,YAAjB;AACE,aAAO,IAAP;;AACF,SAAKrB,mBAAW,CAACsB,YAAjB;AACE,aAAOW,QAAQ,CAACtB,GAAG,CAAC3X,KAAL,CAAf;;AACF,SAAKgX,mBAAW,CAACuB,WAAjB;AACE,aAAOU,QAAQ,CAACtB,GAAG,CAAC3X,KAAL,CAAf;;AACF,SAAKgX,mBAAW,CAACwB,UAAjB;AACE,aAAOS,QAAQ,CAACtB,GAAG,CAAC3X,KAAL,CAAf;;AACF,SAAKgX,mBAAW,CAACC,iBAAjB;AACA,SAAKD,mBAAW,CAACE,iBAAjB;AACE,aAAOH,iBAAiB,CAACY,GAAD,CAAxB;;AACF,SAAKX,mBAAW,CAACyB,IAAjB;AACE,aAAOd,GAAG,CAAChB,IAAJ,CAAShC,GAAT,CAAa,UAAA+D,CAAC;AAAA,eAAIO,QAAQ,CAACP,CAAD,CAAZ;AAAA,OAAd,CAAP;;AACF,SAAK1B,mBAAW,CAAC4B,KAAjB;AACE,UAAMnV,MAAM,GAA2B,EAAvC;AACAzE,MAAAA,MAAM,CAACgH,IAAP,CAAY2R,GAAG,CAACrP,IAAhB,EAAsB9F,OAAtB,CAA8B,UAAAzC,GAAG;AAC/B0D,QAAAA,MAAM,CAAC1D,GAAD,CAAN,GAAckZ,QAAQ,CAACtB,GAAG,CAACrP,IAAJ,CAASvI,GAAT,CAAD,CAAtB;AACD,OAFD;AAGA,aAAO0D,MAAP;;AACF,SAAKuT,mBAAW,CAAC6B,WAAjB;AACE,aAAOlB,GAAG,CAACrP,IAAX;;AACF,SAAK0O,mBAAW,CAAC8B,UAAjB;AACE,aAAOnB,GAAG,CAACrP,IAAX;AAjCJ;AAmCD;SAEe2Q,SAAStB;AACvB,UAAQA,GAAG,CAACrW,IAAZ;AACE,SAAK0V,mBAAW,CAACuB,WAAjB;AACE,aAAO;AAAEjX,QAAAA,IAAI,EAAE4X,eAAe,CAACvB,GAAD,CAAvB;AAA8B3X,QAAAA,KAAK,EAAE+Y,SAAS,CAACpB,GAAD,CAA9C;AAAqDwB,QAAAA,OAAO,EAAE;AAA9D,OAAP;;AACF,SAAKnC,mBAAW,CAACwB,UAAjB;AACE,aAAO;AAAElX,QAAAA,IAAI,EAAE4X,eAAe,CAACvB,GAAD,CAAvB;AAA8B3X,QAAAA,KAAK,EAAE+Y,SAAS,CAACpB,GAAD,CAA9C;AAAqDwB,QAAAA,OAAO,EAAE;AAA9D,OAAP;;AACF;AACE,aAAO;AAAE7X,QAAAA,IAAI,EAAE4X,eAAe,CAACvB,GAAD,CAAvB;AAA8B3X,QAAAA,KAAK,EAAE+Y,SAAS,CAACpB,GAAD;AAA9C,OAAP;AANJ;AAQD;SAEeuB,gBAAgBvB;AAC9B,UAAQA,GAAG,CAACrW,IAAZ;AACE,SAAK0V,mBAAW,CAACa,QAAjB;AACA,SAAKb,mBAAW,CAACc,SAAjB;AACE,aAAO,MAAP;;AACF,SAAKd,mBAAW,CAACe,GAAjB;AACE,aAAO,KAAP;;AACF,SAAKf,mBAAW,CAACiB,IAAjB;AACE,aAAO,MAAP;;AACF,SAAKjB,mBAAW,CAAClO,MAAjB;AACE,wBAAgB6O,GAAG,CAACQ,MAAJ,CAAWhS,MAA3B;;AACF,SAAK6Q,mBAAW,CAACqB,YAAjB;AACE,aAAO,iBAAP;;AACF,SAAKrB,mBAAW,CAACsB,YAAjB;AACE,4BAAoBY,eAAe,CAACvB,GAAG,CAAC3X,KAAL,CAAnC;;AACF,SAAKgX,mBAAW,CAACuB,WAAjB;AACE,wCAAgCW,eAAe,CAACvB,GAAG,CAAC3X,KAAL,CAA/C;;AACF,SAAKgX,mBAAW,CAACwB,UAAjB;AACE,4BAAoBU,eAAe,CAACvB,GAAG,CAAC3X,KAAL,CAAnC;;AACF,SAAKgX,mBAAW,CAACC,iBAAjB;AACA,SAAKD,mBAAW,CAACE,iBAAjB;AACE,aAAO,WAAP;;AACF,SAAKF,mBAAW,CAACyB,IAAjB;AACE,wBAAgBd,GAAG,CAAChB,IAAJ,CAASxQ,MAAzB,SAAmC+S,eAAe,CAACvB,GAAG,CAAChB,IAAJ,CAAS,CAAT,CAAD,CAAlD;;AACF,SAAKK,mBAAW,CAAC4B,KAAjB;AACE,yBAAiB5Z,MAAM,CAACgH,IAAP,CAAY2R,GAAG,CAACrP,IAAhB,EACdqM,GADc,CACV,UAAA5U,GAAG;AAAA,qBAAQA,GAAR,SAAemZ,eAAe,CAACvB,GAAG,CAACrP,IAAJ,CAASvI,GAAT,CAAD,CAA9B;AAAA,OADO,EAEd4Y,IAFc,CAET,GAFS,CAAjB;;AAGF,SAAK3B,mBAAW,CAAC6B,WAAjB;AACE,gCAAwB/P,MAAM,CAACC,IAAP,CAAY4O,GAAG,CAACrP,IAAhB,EAAsB,OAAtB,EAA+BnC,MAAvD;;AACF,SAAK6Q,mBAAW,CAAC8B,UAAjB;AACE,+BAAuBhQ,MAAM,CAACC,IAAP,CAAY4O,GAAG,CAACrP,IAAhB,EAAsB,MAAtB,EAA8BnC,MAArD;AA9BJ;AAgCD;;ICxKKiT,MAAM,GAAG,SAATA,MAAS;AAAA,SAAkB;AAAE9X,IAAAA,IAAI,EAAE0V,mBAAW,CAACa;AAApB,GAAlB;AAAA;;IACTwB,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAkB;AAAE/X,IAAAA,IAAI,EAAE0V,mBAAW,CAACc;AAApB,GAAlB;AAAA;;ICJVwB,KAAK,GAAG,SAARA,KAAQ,CAACtZ,KAAD;AACZ,MAAMuZ,EAAE,GAAG,IAAIjK,0BAAJ,CAAWtP,KAAX,CAAX;AACA,MAAMwZ,IAAI,GAAGD,EAAE,CAACE,MAAH,CAAUnc,gBAAV,CAAb;;AAEA,MAAIkc,IAAI,CAACE,SAAL,KAAmBpc,gBAAvB,EAAyC;AACvC,UAAM,IAAIgH,KAAJ,CAAU,wEAAV,CAAN;AACD;;AAED,SAAO;AAAEhD,IAAAA,IAAI,EAAE0V,mBAAW,CAACe,GAApB;AAAyB/X,IAAAA,KAAK,EAAEwZ;AAAhC,GAAP;AACD;;IAOKG,MAAM,GAAG,SAATA,MAAS,CAAC3Z,KAAD;AACb,MAAMuZ,EAAE,GAAG,IAAIjK,0BAAJ,CAAWtP,KAAX,CAAX;AACA,MAAMwZ,IAAI,GAAGD,EAAE,CAACE,MAAH,CAAUnc,gBAAV,CAAb;;AAEA,MAAIkc,IAAI,CAACI,KAAL,EAAJ,EAAkB;AAChB,UAAM,IAAItV,KAAJ,CAAU,+DAAV,CAAN;AACD,GAFD,MAEO,IAAIkV,IAAI,CAACE,SAAL,KAAmBpc,gBAAvB,EAAyC;AAC9C,UAAM,IAAIgH,KAAJ,CAAU,4EAAV,CAAN;AACD;;AAED,SAAO;AAAEhD,IAAAA,IAAI,EAAE0V,mBAAW,CAACiB,IAApB;AAA0BjY,IAAAA,KAAK,EAAEwZ;AAAjC,GAAP;AACD;;IC7BKK,QAAQ,GAAG,SAAXA,QAAW,CAAC1B,MAAD;AACf,MAAIA,MAAM,CAAChS,MAAP,GAAgB,OAApB,EAA6B;AAC3B,UAAM,IAAI7B,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,SAAO;AAAEhD,IAAAA,IAAI,EAAE0V,mBAAW,CAAClO,MAApB;AAA4BqP,IAAAA,MAAM,EAANA;AAA5B,GAAP;AACD;;IAEK2B,kBAAkB,GAAG,SAArBA,kBAAqB,CAAC5B,GAAD;AAAA,SAA2B2B,QAAQ,CAAC/Q,MAAM,CAACC,IAAP,CAAYmP,GAAZ,CAAD,CAAnC;AAAA;;ICFrB6B,MAAM,GAAG,SAATA,MAAS;AAAA,SAAmB;AAAEzY,IAAAA,IAAI,EAAE0V,mBAAW,CAACqB;AAApB,GAAnB;AAAA;;IACT2B,MAAM,GAAG,SAATA,MAAS,CAACha,KAAD;AAAA,SAAsC;AAAEsB,IAAAA,IAAI,EAAE0V,mBAAW,CAACsB,YAApB;AAAkCtY,IAAAA,KAAK,EAALA;AAAlC,GAAtC;AAAA;;ACAf,SAASia,eAAT,CAAyBja,KAAzB;AACE,SAAO;AAAEsB,IAAAA,IAAI,EAAE0V,mBAAW,CAACuB,WAApB;AAAiCvY,IAAAA,KAAK,EAALA;AAAjC,GAAP;AACD;;AAED,SAASka,YAAT,CAAsBla,KAAtB;AACE,SAAO;AAAEsB,IAAAA,IAAI,EAAE0V,mBAAW,CAACwB,UAApB;AAAgCxY,IAAAA,KAAK,EAALA;AAAhC,GAAP;AACD;;ACbD,SAASma,MAAT,CAAwChY,MAAxC;AACE,SAAO;AAAEb,IAAAA,IAAI,EAAE0V,mBAAW,CAACyB,IAApB;AAA0B9B,IAAAA,IAAI,EAAExU;AAAhC,GAAP;AACD;;ACCD,SAASiY,OAAT,CAAiB9R,IAAjB;AACE,OAAK,IAAMvI,GAAX,IAAkBuI,IAAlB,EAAwB;AACtB,QAAI,CAAC+R,aAAa,CAACta,GAAD,CAAlB,EAAyB;AACvB,YAAM,IAAIuE,KAAJ,QAAcvE,GAAd,oCAAN;AACD;AACF;;AAED,SAAO;AAAEuB,IAAAA,IAAI,EAAE0V,mBAAW,CAAC4B,KAApB;AAA2BtQ,IAAAA,IAAI,EAAJA;AAA3B,GAAP;AACD;;ICNKgS,aAAa,GAAG,SAAhBA,aAAgB,CAAChS,IAAD;AACpB,SAAO;AAAEhH,IAAAA,IAAI,EAAE0V,mBAAW,CAAC6B,WAApB;AAAiCvQ,IAAAA,IAAI,EAAJA;AAAjC,GAAP;AACD;;IAEKiS,YAAY,GAAG,SAAfA,YAAe,CAACjS,IAAD;AACnB,SAAO;AAAEhH,IAAAA,IAAI,EAAE0V,mBAAW,CAAC8B,UAApB;AAAgCxQ,IAAAA,IAAI,EAAJA;AAAhC,GAAP;AACD;;ACCD,SAASkS,gBAAT,CAA0BC,MAA1B,EAA+CtC,MAA/C;AACE,MAAM/B,EAAE,GAAGtN,MAAM,CAACC,IAAP,CAAY,CAAC0R,MAAD,CAAZ,CAAX;AACA,SAAO3R,MAAM,CAAC2C,MAAP,CAAc,CAAC2K,EAAD,EAAK+B,MAAL,CAAd,CAAP;AACD;;AAED,SAASuC,eAAT,CAAyB1a,KAAzB;AACE,SAAO8I,MAAM,CAACC,IAAP,CAAY,CAAC/I,KAAK,CAACsB,IAAP,CAAZ,CAAP;AACD;;AAED,SAASqZ,mBAAT,CAA6BC,EAA7B;AACE,MAAIA,EAAE,CAACtZ,IAAH,KAAY0V,mBAAW,CAACqB,YAA5B,EAA0C;AACxC,WAAOvP,MAAM,CAACC,IAAP,CAAY,CAAC6R,EAAE,CAACtZ,IAAJ,CAAZ,CAAP;AACD,GAFD,MAEO;AACL,WAAOkZ,gBAAgB,CAACI,EAAE,CAACtZ,IAAJ,EAAUyN,WAAW,CAAC6L,EAAE,CAAC5a,KAAJ,CAArB,CAAvB;AACD;AACF;;AAED,SAAS6a,iBAAT,CAA2BD,EAA3B;AACE,MAAMzU,MAAM,GAAG2C,MAAM,CAACyI,KAAP,CAAa,CAAb,CAAf;AACApL,EAAAA,MAAM,CAACqL,aAAP,CAAqBoJ,EAAE,CAACzC,MAAH,CAAUhS,MAA/B,EAAuC,CAAvC;AACA,SAAOqU,gBAAgB,CAACI,EAAE,CAACtZ,IAAJ,EAAUwH,MAAM,CAAC2C,MAAP,CAAc,CAACtF,MAAD,EAASyU,EAAE,CAACzC,MAAZ,CAAd,CAAV,CAAvB;AACD;;AAED,SAAS2C,cAAT,CAAwBF,EAAxB;AACE,MAAMzC,MAAM,GAAGyC,EAAE,CAAC5a,KAAH,CAASgP,WAAT,CAAqBlG,MAArB,EAA6B,IAA7B,EAAmC,EAAnC,CAAf;AACA,SAAO0R,gBAAgB,CAACI,EAAE,CAACtZ,IAAJ,EAAU6W,MAAV,CAAvB;AACD;;AAED,SAAS4C,4BAAT,CAAsCH,EAAtC;AACE,SAAOJ,gBAAgB,CAACI,EAAE,CAACtZ,IAAJ,EAAU6Q,gBAAgB,CAACyI,EAAE,CAAChG,OAAJ,CAA1B,CAAvB;AACD;;AAED,SAASoG,4BAAT,CAAsCJ,EAAtC;AACE,SAAOJ,gBAAgB,CACrBI,EAAE,CAACtZ,IADkB,EAErBwH,MAAM,CAAC2C,MAAP,CAAc,CAAC0G,gBAAgB,CAACyI,EAAE,CAAChG,OAAJ,CAAjB,EAA+BtC,iBAAiB,CAACsI,EAAE,CAACzK,YAAJ,CAAhD,CAAd,CAFqB,CAAvB;AAID;;AAED,SAAS8K,mBAAT,CAA6BL,EAA7B;AACE,SAAOJ,gBAAgB,CAACI,EAAE,CAACtZ,IAAJ,EAAUyN,WAAW,CAAC6L,EAAE,CAAC5a,KAAJ,CAArB,CAAvB;AACD;;AAED,SAASkb,eAAT,CAAyBN,EAAzB;AACE,MAAMO,OAAO,GAAG,IAAIxQ,WAAJ,EAAhB;AAEA,MAAMxE,MAAM,GAAG2C,MAAM,CAACyI,KAAP,CAAa,CAAb,CAAf;AACApL,EAAAA,MAAM,CAACqL,aAAP,CAAqBoJ,EAAE,CAACjE,IAAH,CAAQxQ,MAA7B,EAAqC,CAArC;AACAgV,EAAAA,OAAO,CAACvV,IAAR,CAAaO,MAAb;;AAEA,uDAAoByU,EAAE,CAACjE,IAAvB,wCAA6B;AAAA,QAAlB3W,KAAkB;AAC3B,QAAMob,eAAe,GAAGrM,WAAW,CAAC/O,KAAD,CAAnC;AACAmb,IAAAA,OAAO,CAACvV,IAAR,CAAawV,eAAb;AACD;;AAED,SAAOZ,gBAAgB,CAACI,EAAE,CAACtZ,IAAJ,EAAU6Z,OAAO,CAACvQ,YAAR,EAAV,CAAvB;AACD;;AAED,SAASyQ,gBAAT,CAA0BT,EAA1B;AACE,MAAMO,OAAO,GAAG,IAAIxQ,WAAJ,EAAhB;AAEA,MAAMxE,MAAM,GAAG2C,MAAM,CAACyI,KAAP,CAAa,CAAb,CAAf;AACApL,EAAAA,MAAM,CAACqL,aAAP,CAAqBxS,MAAM,CAACgH,IAAP,CAAY4U,EAAE,CAACtS,IAAf,EAAqBnC,MAA1C,EAAkD,CAAlD;AACAgV,EAAAA,OAAO,CAACvV,IAAR,CAAaO,MAAb;AAEA,MAAMmV,kBAAkB,GAAGtc,MAAM,CAACgH,IAAP,CAAY4U,EAAE,CAACtS,IAAf,EAAqBiT,IAArB,CAA0B,UAACC,CAAD,EAAIC,CAAJ;AACnD,QAAMC,IAAI,GAAG5S,MAAM,CAACC,IAAP,CAAYyS,CAAZ,CAAb;AACA,QAAMG,IAAI,GAAG7S,MAAM,CAACC,IAAP,CAAY0S,CAAZ,CAAb;AACA,WAAOC,IAAI,CAACE,OAAL,CAAaD,IAAb,CAAP;AACD,GAJ0B,CAA3B;;AAMA,wDAAkBL,kBAAlB,2CAAsC;AAAA,QAA3Bvb,GAA2B;AACpC,QAAM8b,cAAc,GAAGtL,cAAc,CAACxQ,GAAD,CAArC;AACAob,IAAAA,OAAO,CAACvV,IAAR,CAAa0M,iBAAiB,CAACuJ,cAAD,CAA9B;AAEA,QAAMT,eAAe,GAAGrM,WAAW,CAAC6L,EAAE,CAACtS,IAAH,CAAQvI,GAAR,CAAD,CAAnC;AACAob,IAAAA,OAAO,CAACvV,IAAR,CAAawV,eAAb;AACD;;AAED,SAAOZ,gBAAgB,CAACI,EAAE,CAACtZ,IAAJ,EAAU6Z,OAAO,CAACvQ,YAAR,EAAV,CAAvB;AACD;;AAED,SAASkR,iBAAT,CAA2BlB,EAA3B,EAA6DhD,QAA7D;AACE,MAAMuD,OAAO,GAAG,IAAIxQ,WAAJ,EAAhB;AAEA,MAAMuN,GAAG,GAAGpP,MAAM,CAACC,IAAP,CAAY6R,EAAE,CAACtS,IAAf,EAAqBsP,QAArB,CAAZ;AACA,MAAMmE,GAAG,GAAGjT,MAAM,CAACyI,KAAP,CAAa,CAAb,CAAZ;AACAwK,EAAAA,GAAG,CAACvK,aAAJ,CAAkB0G,GAAG,CAAC/R,MAAtB,EAA8B,CAA9B;AAEAgV,EAAAA,OAAO,CAACvV,IAAR,CAAamW,GAAb;AACAZ,EAAAA,OAAO,CAACvV,IAAR,CAAasS,GAAb;AAEA,SAAOsC,gBAAgB,CAACI,EAAE,CAACtZ,IAAJ,EAAU6Z,OAAO,CAACvQ,YAAR,EAAV,CAAvB;AACD;;AAED,SAASoR,sBAAT,CAAgCpB,EAAhC;AACE,SAAOkB,iBAAiB,CAAClB,EAAD,EAAK,OAAL,CAAxB;AACD;;AAED,SAASqB,qBAAT,CAA+BrB,EAA/B;AACE,SAAOkB,iBAAiB,CAAClB,EAAD,EAAK,MAAL,CAAxB;AACD;;SAEe7L,YAAY/O;AAC1B,UAAQA,KAAK,CAACsB,IAAd;AACE,SAAK0V,mBAAW,CAACa,QAAjB;AACA,SAAKb,mBAAW,CAACc,SAAjB;AACE,aAAO4C,eAAe,CAAC1a,KAAD,CAAtB;;AACF,SAAKgX,mBAAW,CAACqB,YAAjB;AACA,SAAKrB,mBAAW,CAACsB,YAAjB;AACE,aAAOqC,mBAAmB,CAAC3a,KAAD,CAA1B;;AACF,SAAKgX,mBAAW,CAAClO,MAAjB;AACE,aAAO+R,iBAAiB,CAAC7a,KAAD,CAAxB;;AACF,SAAKgX,mBAAW,CAACe,GAAjB;AACA,SAAKf,mBAAW,CAACiB,IAAjB;AACE,aAAO6C,cAAc,CAAC9a,KAAD,CAArB;;AACF,SAAKgX,mBAAW,CAACC,iBAAjB;AACE,aAAO8D,4BAA4B,CAAC/a,KAAD,CAAnC;;AACF,SAAKgX,mBAAW,CAACE,iBAAjB;AACE,aAAO8D,4BAA4B,CAAChb,KAAD,CAAnC;;AACF,SAAKgX,mBAAW,CAACwB,UAAjB;AACA,SAAKxB,mBAAW,CAACuB,WAAjB;AACE,aAAO0C,mBAAmB,CAACjb,KAAD,CAA1B;;AACF,SAAKgX,mBAAW,CAACyB,IAAjB;AACE,aAAOyC,eAAe,CAAClb,KAAD,CAAtB;;AACF,SAAKgX,mBAAW,CAAC4B,KAAjB;AACE,aAAOyC,gBAAgB,CAACrb,KAAD,CAAvB;;AACF,SAAKgX,mBAAW,CAAC6B,WAAjB;AACE,aAAOmD,sBAAsB,CAAChc,KAAD,CAA7B;;AACF,SAAKgX,mBAAW,CAAC8B,UAAjB;AACE,aAAOmD,qBAAqB,CAACjc,KAAD,CAA5B;;AACF;AACE,YAAM,IAAIsN,kBAAJ,CAAuB,6CAAvB,CAAN;AA5BJ;AA8BD;;ACvJD,SAAS4O,iBAAT,CACEC,YADF;AAIE,MAAMC,UAAU,GAAGpd,MAAM,CAACmD,MAAP,CAAsBga,YAAtB,EAAoCE,MAApC,CAA2C,UAAA3D,CAAC;AAAA,WAAI,OAAOA,CAAP,KAAa,QAAjB;AAAA,GAA5C,CAAnB;AACA,MAAM4D,YAAY,GAAG,IAAIC,GAAJ,CAAgBH,UAAhB,CAArB;AACA,SAAO,UAACpc,KAAD;AAAA,WAAwCsc,YAAY,CAACE,GAAb,CAAiBxc,KAAjB,CAAxC;AAAA,GAAP;AACD;;AAGD,IAAMyc,kBAAkB,gBAAG,IAAIC,GAAJ,EAA3B;SAmBgBC,OACdR,cACAnc;AAEA,MAAM4c,OAAO,GAAGH,kBAAkB,CAACI,GAAnB,CAAuBV,YAAvB,CAAhB;;AACA,MAAIS,OAAO,KAAKxd,SAAhB,EAA2B;AACzB,WAAOwd,OAAO,CAAC5c,KAAD,CAAd;AACD;;AACD,MAAM8c,UAAU,GAAGZ,iBAAiB,CAACC,YAAD,CAApC;AACAM,EAAAA,kBAAkB,CAACM,GAAnB,CAAuBZ,YAAvB,EAAqCW,UAArC;AACA,SAAOH,MAAM,CAACR,YAAD,EAAenc,KAAf,CAAb;AACD;IAEYgd,YAAb;AAOE,wBAAYnR,OAAZ;AACE,QAAI/C,MAAM,CAACmU,QAAP,CAAgBpR,OAAhB,CAAJ,EAA8B;AAC5B,WAAKqR,WAAL,GAAmB,IAAIC,uBAAJ,CAAgB;AAAEC,QAAAA,IAAI,EAAEvR;AAAR,OAAhB,CAAnB;AACD,KAFD,MAEO;AACL,WAAKqR,WAAL,GAAmB,IAAIC,uBAAJ,CAAgBtR,OAAhB,CAAnB;AACD;AACF;;AAbH,eAGSwR,UAHT,GAGE,oBAAkBlF,MAAlB;AACE,WAAO,IAAI6E,YAAJ,CAAiB;AAAEI,MAAAA,IAAI,EAAEjF;AAAR,KAAjB,CAAP;AACD,GALH;;AAAA;;AAAA,SAeEzM,UAfF,GAeE,oBAAWvF,MAAX;AACE,WAAO,KAAK+W,WAAL,CAAiBxR,UAAjB,CAA4BvF,MAA5B,CAAP;AACD,GAjBH;;AAAA,SAmBE4L,YAnBF,GAmBE,sBAAauL,MAAb;AACE,WAAO,KAAKJ,WAAL,CAAiBnL,YAAjB,CAA8BuL,MAA9B,CAAP;AACD,GArBH;;AAAA,SAuBE/R,SAvBF,GAuBE;AACE,WAAO,KAAK2R,WAAL,CAAiB3R,SAAjB,EAAP;AACD,GAzBH;;AAAA,SA2BEgS,YA3BF,GA2BE;AACE,WAAO,KAAKL,WAAL,CAAiBK,YAAjB,EAAP;AACD,GA7BH;;AAAA,SA+BEC,aA/BF,GA+BE,uBAAcrX,MAAd;AACE,QAAMgS,MAAM,GAAGrP,MAAM,CAACC,IAAP,CAAY,KAAKmU,WAAL,CAAiBxR,UAAjB,CAA4BvF,MAA5B,CAAZ,EAAiDD,OAAjD,EAAf;AACA,QAAMuX,GAAG,GAAGtF,MAAM,CAAChT,QAAP,EAAZ;AACA,QAAMuY,GAAG,GAAGC,MAAM,QAAMF,GAAN,CAAlB;AACA,WAAOC,GAAP;AACD,GApCH;;AAAA,SAsCEE,aAtCF,GAsCE,uBAAczX,MAAd;AACE,QAAMgS,MAAM,GAAG,KAAK+E,WAAL,CAAiBxR,UAAjB,CAA4BvF,MAA5B,CAAf;AACA,QAAMsX,GAAG,GAAGtF,MAAM,CAAChT,QAAP,CAAgB,KAAhB,CAAZ;AACA,QAAMuY,GAAG,GAAGC,MAAM,QAAMF,GAAN,CAAlB;AACA,WAAOC,GAAP;AACD,GA3CH;;AAAA,SA6CEG,eA7CF,GA6CE;AACE,WAAO,KAAKX,WAAL,CAAiBW,eAAjB,EAAP;AACD,GA/CH;;AAAA,SAiDEC,UAjDF,GAiDE,oBAAWzc,GAAX,EAA0CuW,QAA1C;AACE,WAAO,KAAKsF,WAAL,CAAiBY,UAAjB,CAA4Bzc,GAA5B,EAAiCuW,QAAjC,CAAP;AACD,GAnDH;;AAAA,SAiEEzI,aAjEF,GAiEE,uBACEgN,YADF,EAEE4B,yBAFF;AAIE,QAAML,GAAG,GAAG,KAAKR,WAAL,CAAiB3R,SAAjB,EAAZ;;AACA,QAAIoR,MAAM,CAACR,YAAD,EAAeuB,GAAf,CAAV,EAA+B;AAC7B,aAAOA,GAAP;AACD,KAFD,MAEO;AACL,YAAMK,yBAAyB,CAACL,GAAD,CAA/B;AACD;AACF,GA3EH;;AAAA;AAAA;AAAA;AAsDI,aAAO,KAAKR,WAAL,CAAiBc,UAAxB;AACD,KAvDH;AAAA,sBAyDiBrG,GAzDjB;AA0DI,WAAKuF,WAAL,CAAiBc,UAAjB,GAA8BrG,GAA9B;AACD;AA3DH;AAAA;AAAA;AA8DI,aAAO,KAAKuF,WAAL,CAAiBe,cAAxB;AACD;AA/DH;;AAAA;AAAA;;SCtBwBzO,cAAc2I;AACpC,MAAM9M,YAAY,GAAGvC,MAAM,CAACmU,QAAP,CAAgB9E,MAAhB,IAA0B,IAAI6E,YAAJ,CAAiB7E,MAAjB,CAA1B,GAAqDA,MAA1E;AACA,MAAM7W,IAAI,GAAG+J,YAAY,CAAC8D,aAAb,CAA2B6H,mBAA3B,EAAwC,UAAA5H,CAAC;AACpD,UAAM,IAAI5B,oBAAJ,qCAA2D4B,CAA3D,CAAN;AACD,GAFY,CAAb;;AAIA,UAAQ9N,IAAR;AACE,SAAK0V,mBAAW,CAACe,GAAjB;AACE,aAAOuB,KAAK,CAACjO,YAAY,CAACK,UAAb,CAAwB,EAAxB,CAAD,CAAZ;;AAEF,SAAKsL,mBAAW,CAACiB,IAAjB;AACE,aAAO0B,MAAM,CAACtO,YAAY,CAACK,UAAb,CAAwB,EAAxB,CAAD,CAAb;;AAEF,SAAKsL,mBAAW,CAAClO,MAAjB;AACE,UAAMoV,YAAY,GAAG7S,YAAY,CAAC0G,YAAb,EAArB;AACA,aAAO8H,QAAQ,CAACxO,YAAY,CAACK,UAAb,CAAwBwS,YAAxB,CAAD,CAAf;;AAEF,SAAKlH,mBAAW,CAACa,QAAjB;AACE,aAAOuB,MAAM,EAAb;;AAEF,SAAKpC,mBAAW,CAACc,SAAjB;AACE,aAAOuB,OAAO,EAAd;;AAEF,SAAKrC,mBAAW,CAACC,iBAAjB;AACE,UAAMkH,QAAQ,GAAGxM,kBAAkB,CAACtG,YAAD,CAAnC;AACA,aAAOgM,8BAA8B,CAAC8G,QAAD,CAArC;;AAEF,SAAKnH,mBAAW,CAACE,iBAAjB;AACE,UAAMkH,QAAQ,GAAGzM,kBAAkB,CAACtG,YAAD,CAAnC;AACA,UAAM8E,YAAY,GAAG0B,mBAAmB,CAACxG,YAAD,CAAxC;AACA,aAAOkM,8BAA8B,CAAC6G,QAAD,EAAWjO,YAAX,CAArC;;AAEF,SAAK6G,mBAAW,CAACwB,UAAjB;AACE,aAAO0B,YAAY,CAAC1K,aAAa,CAACnE,YAAD,CAAd,CAAnB;;AAEF,SAAK2L,mBAAW,CAACuB,WAAjB;AACE,aAAO0B,eAAe,CAACzK,aAAa,CAACnE,YAAD,CAAd,CAAtB;;AAEF,SAAK2L,mBAAW,CAACqB,YAAjB;AACE,aAAO0B,MAAM,EAAb;;AAEF,SAAK/C,mBAAW,CAACsB,YAAjB;AACE,aAAO0B,MAAM,CAACxK,aAAa,CAACnE,YAAD,CAAd,CAAb;;AAEF,SAAK2L,mBAAW,CAACyB,IAAjB;AACE,UAAM4F,UAAU,GAAGhT,YAAY,CAAC0G,YAAb,EAAnB;AACA,UAAMuM,YAAY,GAAmB,EAArC;;AACA,WAAK,IAAI9X,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6X,UAApB,EAAgC7X,CAAC,EAAjC,EAAqC;AACnC8X,QAAAA,YAAY,CAAC1Y,IAAb,CAAkB4J,aAAa,CAACnE,YAAD,CAA/B;AACD;;AACD,aAAO8O,MAAM,CAACmE,YAAD,CAAb;;AAEF,SAAKtH,mBAAW,CAAC4B,KAAjB;AACE,UAAM2F,WAAW,GAAGlT,YAAY,CAAC0G,YAAb,EAApB;AACA,UAAMyM,aAAa,GAAoC,EAAvD;;AACA,WAAK,IAAIhY,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG+X,WAApB,EAAiC/X,EAAC,EAAlC,EAAsC;AACpC,YAAMiY,WAAW,GAAG5M,mBAAmB,CAACxG,YAAD,CAAnB,CAAkCmK,OAAtD;;AACA,YAAIiJ,WAAW,KAAKrf,SAApB,EAA+B;AAC7B,gBAAM,IAAIoO,oBAAJ,CAAyB,wBAAzB,CAAN;AACD;;AACDgR,QAAAA,aAAa,CAACC,WAAD,CAAb,GAA6BjP,aAAa,CAACnE,YAAD,CAA1C;AACD;;AACD,aAAO+O,OAAO,CAACoE,aAAD,CAAd;;AAEF,SAAKxH,mBAAW,CAAC6B,WAAjB;AACE,UAAM6F,WAAW,GAAGrT,YAAY,CAAC0G,YAAb,EAApB;AACA,UAAM4M,QAAQ,GAAGtT,YAAY,CAACK,UAAb,CAAwBgT,WAAxB,EAAqCvZ,QAArC,CAA8C,OAA9C,CAAjB;AACA,aAAOmV,aAAa,CAACqE,QAAD,CAApB;;AAEF,SAAK3H,mBAAW,CAAC8B,UAAjB;AACE,UAAM8F,UAAU,GAAGvT,YAAY,CAAC0G,YAAb,EAAnB;AACA,UAAM8M,OAAO,GAAGxT,YAAY,CAACK,UAAb,CAAwBkT,UAAxB,EAAoCzZ,QAApC,CAA6C,MAA7C,CAAhB;AACA,aAAOoV,YAAY,CAACsE,OAAD,CAAnB;;AAEF;AACE,YAAM,IAAIrR,oBAAJ,CACJ,qFADI,CAAN;AArEJ;AAyED;;IC1FY7C,WAAb;AAAA;AACE,eAAA,GAAmB,EAAnB;AAqBD;;AAtBD;;AAAA,SAKEkK,eALF,GAKE,yBAAgBiK,SAAhB;AACE,SAAK9e,KAAL,CAAW4F,IAAX,CAAgBkD,MAAM,CAACC,IAAP,CAAY+V,SAAZ,EAAuB,KAAvB,CAAhB;AACD,GAPH;;AAAA,SASElZ,IATF,GASE,cAAKuS,MAAL;AACE,WAAO,KAAK4G,MAAL,CAAYnZ,IAAZ,CAAiBuS,MAAjB,CAAP;AACD,GAXH;;AAAA,SAYEvJ,UAZF,GAYE,oBAAWoQ,KAAX;AACE,QAAI,CAACC,MAAM,CAACC,SAAP,CAAiBF,KAAjB,CAAD,IAA4BA,KAAK,GAAG,CAApC,IAAyCA,KAAK,GAAG,GAArD,EAA0D;AACxD,YAAM,IAAI1a,KAAJ,YAAmB0a,KAAnB,0BAAN;AACD;;AACD,SAAKhf,KAAL,CAAW4F,IAAX,CAAgBkD,MAAM,CAACC,IAAP,CAAY,CAACiW,KAAD,CAAZ,CAAhB;AACD,GAjBH;;AAAA,SAmBEpU,YAnBF,GAmBE;AACE,WAAO9B,MAAM,CAAC2C,MAAP,CAAc,KAAKzL,KAAnB,CAAP;AACD,GArBH;;AAAA;AAAA;AAAA;AAGI,aAAO,KAAK+e,MAAZ;AACD;AAJH;;AAAA;AAAA;IAwBaI,UAAU,GAAG,SAAbA,UAAa,CAACL,SAAD;AAAA,SACxBA,SAAS,CAAC3Y,MAAV,GAAmB,CAAnB,IAAwB,CAAxB,GAA4B2Y,SAA5B,SAA4CA,SADpB;AAAA;IAGbvS,kBAAkB,GAAG,SAArBA,kBAAqB,CAACuS,SAAD,EAAoB3Y,MAApB;AAAA,SAChC2Y,SAAS,CAACM,QAAV,CAAmBjZ,MAAnB,EAA2B,GAA3B,CADgC;AAAA;IAGrBgQ,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAC2I,SAAD,EAAoB3Y,MAApB;AAAA,SACjC2Y,SAAS,CAACO,MAAV,CAAiBlZ,MAAjB,EAAyB,GAAzB,CADiC;AAAA;IAGtBsG,cAAc,GAAG,SAAjBA,cAAiB,CAAC6S,OAAD,EAAkBC,WAAlB;AAAA,MAAkBA,WAAlB;AAAkBA,IAAAA,WAAlB,GAAgC,CAAhC;AAAA;;AAAA,SAC5BD,OAAO,CAACna,QAAR,CAAiB,EAAjB,EAAqBia,QAArB,CAA8BG,WAAW,GAAG,CAA5C,EAA+C,GAA/C,CAD4B;AAAA;IAGjBxS,cAAc,GAAG,SAAjBA,cAAiB,CAAC+R,SAAD;AAAA,SAA+BU,QAAQ,CAACV,SAAD,EAAY,EAAZ,CAAvC;AAAA;IAEjBjJ,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAC4J,MAAD,EAAiB/J,cAAjB;AAAA,SACnC+J,MAAM,GAAG3W,MAAM,CAACC,IAAP,CAAY0W,MAAZ,EAAoBtZ,MAApB,GAA6BuP,cAAhC,GAAiD,KADpB;AAAA;SAGrBgK,UAAa5f;AAC3B,SAAO6f,mCAAe,CAAC7f,GAAD,CAAtB;AACD;SAEe8f,KAA6B9f,KAAQ+f;AACnD,MAAMC,KAAK,GAAGJ,SAAS,CAAC5f,GAAD,CAAvB;AAEA,SAAOggB,KAAK,CAACD,IAAD,CAAZ;AACA,SAAOC,KAAP;AACD;IAEYC,UAAb;AAAA;;AACE;;;AACE;AAGA/gB,IAAAA,MAAM,CAACghB,MAAP,gCAAoB;AAClBC,MAAAA,GAAG,EAAE,UADa;AAElBC,MAAAA,GAAG,EAAE,UAFa;AAGlBC,MAAAA,GAAG,EAAE,UAHa;AAIlBC,MAAAA,GAAG,EAAE,UAJa;AAKlBC,MAAAA,GAAG,EAAE,UALa;AAMlBC,MAAAA,GAAG,EAAE,UANa;AAOlBC,MAAAA,GAAG,EAAE,UAPa;AAQlBC,MAAAA,GAAG,EAAE,UARa;AASlBC,MAAAA,GAAG,EAAE,UATa;AAUlBC,MAAAA,GAAG,EAAE,UAVa;AAWlBC,MAAAA,GAAG,EAAE,UAXa;AAYlBC,MAAAA,GAAG,EAAE,UAZa;AAalBC,MAAAA,GAAG,EAAE,UAba;AAclBC,MAAAA,GAAG,EAAE,UAda;AAelBC,MAAAA,GAAG,EAAE,UAfa;AAgBlBC,MAAAA,GAAG,EAAE;AAhBa,KAApB;;AAkBD;;AAvBH;;AAAA,UA0BEC,MA1BF,GA0BE,gBAAOrJ,QAAP;AAEE,QAAMwF,IAAI,GAAG,eAAM6D,MAAN,YAAera,KAAf,CAAqB,CAArB,EAAwB,EAAxB,CAAb;;AACA,WAAOgR,QAAQ,GAAGwF,IAAI,CAACjY,QAAL,CAAcyS,QAAd,CAAH,GAA6BwF,IAA5C;AACD,GA9BH;;AAAA;AAAA,EAAgC8D,aAAhC;IAiCaC,YAAY,GAAG,SAAfA,YAAe,CAAC7Y,IAAD;AAAA,SAA0B,IAAIyX,UAAJ,GAAiBqB,MAAjB,CAAwB9Y,IAAxB,EAA8B2Y,MAA9B,CAAqC,KAArC,CAA1B;AAAA;IAEf5T,OAAO,GAAG,SAAVA,OAAU,CAACpB,KAAD;AACrB,MAAMoV,YAAY,GAAG,IAAIC,aAAJ,GAAaF,MAAb,CAAoBnV,KAApB,EAA2BgV,MAA3B,EAArB;AACA,SAAOnY,MAAM,CAACC,IAAP,CAAY,IAAIwY,6BAAJ,GAAgBH,MAAhB,CAAuBC,YAAvB,EAAqCJ,MAArC,EAAZ,CAAP;AACD;IAIYpY,SAAS,GAAG,SAAZA,SAAY,CAACoD,KAAD;AACvB,SAAOoB,OAAO,CAACpB,KAAD,CAAP,CAAe9G,QAAf,CAAwB,KAAxB,CAAP;AACD;IAIYuP,QAAQ,GAAG,SAAXA,QAAW,CAACF,OAAD,EAAkBgN,OAAlB;AACtB,MAAIhN,OAAO,GAAG,EAAV,IAAgBgN,OAAO,CAACrb,MAAR,GAAiB,EAArC,EAAyC;AACvC,UAAM7B,KAAK,CAAC,6DAAD,CAAX;AACD;;AAGD,MAAMoG,WAAW,GAAG,IAAIC,WAAJ,EAApB;AAEAD,EAAAA,WAAW,CAACkE,UAAZ,CAAuB,KAAK4F,OAA5B;AAEAgN,EAAAA,OAAO,CAAChf,OAAR,CAAgB,UAAA2F,MAAM;AACpBuC,IAAAA,WAAW,CAACkE,UAAZ,CAAuBzG,MAAM,CAAChC,MAA9B;AACAuE,IAAAA,WAAW,CAAC9E,IAAZ,CAAiBuC,MAAjB;AACD,GAHD;AAKAuC,EAAAA,WAAW,CAACkE,UAAZ,CAAuB,KAAK4S,OAAO,CAACrb,MAApC;AAEAuE,EAAAA,WAAW,CAACkE,UAAZ,CAAuB,GAAvB;AAEA,MAAM6S,YAAY,GAAG/W,WAAW,CAACE,YAAZ,EAArB;AACA,MAAM8W,gBAAgB,GAAGrU,OAAO,CAACoU,YAAD,CAAhC;AACA,SAAOC,gBAAgB,CAACvc,QAAjB,CAA0B,KAA1B,CAAP;AACD;SAEekV,cAAcxX;AAC5B,MAAM8e,KAAK,GAAG,0DAAd;AACA,SAAOA,KAAK,CAACvJ,IAAN,CAAWvV,IAAX,KAAoBA,IAAI,CAACsD,MAAL,GAAc,GAAzC;AACD;SAGqByb,YAAtB;AAAA;AAAA;;;iEAAO,iBAA4B3V,KAA5B,EAAgD4V,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,gBADD,GACiC;AACpCC,cAAAA,QAAQ,EAAE,aAD0B;AAEpCC,cAAAA,cAAc,EAAE;AAFoB,aADjC;AAKCC,YAAAA,SALD,GAKajjB,MAAM,CAACghB,MAAP,CAAc8B,gBAAd,EAAgCD,IAAhC,CALb;AAAA;AAAA,mBAMqBK,yBAAK,CAACjW,KAAD,EAAQgW,SAAR,CAN1B;;AAAA;AAMCE,YAAAA,WAND;AAAA,6CAOEA,WAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SAaSC,QAAQxH;AACtB,MAAMyH,UAAU,GAAGtT,WAAW,CAAC6L,EAAD,CAA9B;AACA,gBAAYyH,UAAU,CAACld,QAAX,CAAoB,KAApB,CAAZ;AACD;SAMemd,QAAQ7E;AACtB,MAAM8E,gBAAgB,GAAG9E,GAAG,CAAClT,UAAJ,CAAe,IAAf,IAAuBkT,GAAG,CAAC7W,KAAJ,CAAU,CAAV,CAAvB,GAAsC6W,GAA/D;AACA,MAAM5D,QAAQ,GAAG/Q,MAAM,CAACC,IAAP,CAAYwZ,gBAAZ,EAA8B,KAA9B,CAAjB;AACA,SAAO/S,aAAa,CAACqK,QAAD,CAApB;AACD;IA0BY2I,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,QAAD;AACnC,MAAIA,QAAQ,CAACC,IAAb,EAAmB;AACjB,WAAOJ,OAAO,CAACG,QAAQ,CAAChf,MAAV,CAAd;AACD,GAFD,MAEO;AACL,UAAM,IAAIa,KAAJ,CAAUme,QAAQ,CAACE,KAAnB,CAAN;AACD;AACF;IAEYC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,aAAD;AACnC,MAAI;AACFvP,IAAAA,yBAAgB,CAACuP,aAAD,CAAhB;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;IC3KcC;;;iBAGNC,cAAP,qBAAgE3X,YAAhE;AACE,QAAMhC,OAAO,GAAG,IAAI,IAAJ,EAAhB;AACAA,IAAAA,OAAO,CAAC2Z,WAAR,CAAoB3X,YAApB;AACA,WAAOhC,OAAP;AACD;;;;;SAQasD,uBAAuBT;AACrC,MAAM/F,MAAM,GAAG2C,MAAM,CAACC,IAAP,CAAYmD,SAAZ,EAAuB,KAAvB,EAA8B+E,UAA7C;;AACA,MAAI9K,MAAM,IAAI3I,kCAAd,EAAkD;AAChD,UAAM8G,KAAK,CAAC,mBAAD,CAAX;AACD;;AAED,SAAO;AACLhD,IAAAA,IAAI,EAAEzD,yBAAiB,CAACiV,gBADnB;AAELxK,IAAAA,IAAI,EAAE4D;AAFD,GAAP;AAID;SAEe+W;AACd,SAAO;AACL3hB,IAAAA,IAAI,EAAEzD,yBAAiB,CAACiV,gBADnB;AAELxK,IAAAA,IAAI,EAAEQ,MAAM,CAACyI,KAAP,CAAa/T,kCAAb,EAAiD,IAAjD,EAAuD2H,QAAvD,CAAgE,KAAhE;AAFD,GAAP;AAID;SAEe4N,0BAA0BzJ;AACxC,MAAMoB,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;AACAD,EAAAA,WAAW,CAACmK,eAAZ,CAA4BvL,gBAAgB,CAAChB,IAA7C;AACA,SAAOoC,WAAW,CAACE,YAAZ,EAAP;AACD;SAEeuI,4BAA4B9H;AAC1C,SAAOsB,sBAAsB,CAC3BtB,YAAY,CAACK,UAAb,CAAwBlO,kCAAxB,EAA4D2H,QAA5D,CAAqE,KAArE,CAD2B,CAA7B;AAGD;AAED,IAAK+d,aAAL;;AAAA,WAAKA;AACHA,EAAAA,uDAAA,wBAAA;AACAA,EAAAA,yDAAA,0BAAA;AACAA,EAAAA,uDAAA,wBAAA;AACAA,EAAAA,yDAAA,0BAAA;AACD,CALD,EAAKA,aAAa,KAAbA,aAAa,KAAA,CAAlB;;SAegBC,2BACd5Z,gBACA6Z;AAEA,SAAO;AACL7Z,IAAAA,cAAc,EAAdA,cADK;AAELjI,IAAAA,IAAI,EAAEzD,yBAAiB,CAAC+U,oBAFnB;AAGLwQ,IAAAA,QAAQ,EAARA;AAHK,GAAP;AAKD;SAEevQ,8BAA8BwQ;AAC5C,MAAM3Y,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;;AAEA,UAAQ0Y,KAAK,CAACD,QAAN,CAAe9hB,IAAvB;AACE,SAAKzD,yBAAiB,CAACsL,SAAvB;AACE,UAAIka,KAAK,CAAC9Z,cAAN,IAAwBhL,sBAAc,CAACiL,UAA3C,EAAuD;AACrDkB,QAAAA,WAAW,CAACkE,UAAZ,CAAuBsU,aAAa,CAACI,mBAArC;AACA5Y,QAAAA,WAAW,CAAC9E,IAAZ,CAAiB6E,kBAAkB,CAAC4Y,KAAK,CAACD,QAAP,CAAnC;AACD,OAHD,MAGO;AACL1Y,QAAAA,WAAW,CAACkE,UAAZ,CAAuBsU,aAAa,CAACK,qBAArC;AACA7Y,QAAAA,WAAW,CAAC9E,IAAZ,CAAiB6E,kBAAkB,CAACS,iBAAiB,CAACmY,KAAK,CAACD,QAAN,CAAe9a,IAAhB,CAAlB,CAAnC;AACD;;AACD;;AACF,SAAKzK,yBAAiB,CAACiV,gBAAvB;AACE,UAAIuQ,KAAK,CAAC9Z,cAAN,IAAwBhL,sBAAc,CAACiL,UAA3C,EAAuD;AACrDkB,QAAAA,WAAW,CAACkE,UAAZ,CAAuBsU,aAAa,CAACM,mBAArC;AACD,OAFD,MAEO;AACL9Y,QAAAA,WAAW,CAACkE,UAAZ,CAAuBsU,aAAa,CAACO,qBAArC;AACD;;AACD/Y,MAAAA,WAAW,CAAC9E,IAAZ,CAAiBmN,yBAAyB,CAACsQ,KAAK,CAACD,QAAP,CAA1C;AACA;AAjBJ;;AAoBA,SAAO1Y,WAAW,CAACE,YAAZ,EAAP;AACD;SAEekM,gCAAgCzL;AAC9C,MAAMqY,aAAa,GAAGrY,YAAY,CAAC8D,aAAb,CAA2B+T,aAA3B,EAA0C,UAAA9T,CAAC;AAC/D,UAAM,IAAI5B,oBAAJ,qBAA2C4B,CAA3C,uBAAN;AACD,GAFqB,CAAtB;;AAIA,UAAQsU,aAAR;AACE,SAAKR,aAAa,CAACI,mBAAnB;AACE,aAAOH,0BAA0B,CAC/B5kB,sBAAc,CAACiL,UADgB,EAE/B4B,oBAAoB,CAACC,YAAD,CAFW,CAAjC;;AAIF,SAAK6X,aAAa,CAACK,qBAAnB;AACE,aAAOJ,0BAA0B,CAC/B5kB,sBAAc,CAAC2L,YADgB,EAE/BkB,oBAAoB,CAACC,YAAD,CAFW,CAAjC;;AAIF,SAAK6X,aAAa,CAACM,mBAAnB;AACE,aAAOL,0BAA0B,CAC/B5kB,sBAAc,CAACiL,UADgB,EAE/B2J,2BAA2B,CAAC9H,YAAD,CAFI,CAAjC;;AAIF,SAAK6X,aAAa,CAACO,qBAAnB;AACE,aAAON,0BAA0B,CAC/B5kB,sBAAc,CAAC2L,YADgB,EAE/BiJ,2BAA2B,CAAC9H,YAAD,CAFI,CAAjC;;AAIF;AACE,YAAM,IAAI/G,KAAJ,+BAAsCyP,IAAI,CAACC,SAAL,CAAe0P,aAAf,CAAtC,CAAN;AAtBJ;AAwBD;SAsBeC,iCACdhQ,UACAxL,QACAyb,OACAC;AAGA,MAAMC,MAAM,GAAGvP,qBAAqB,CAAC,CAAD,EAAIZ,QAAJ,EAAc,CAAd,EAAiB,CAACzK,qBAAqB,CAACf,MAAD,CAAtB,CAAjB,CAArB,CAAuEkF,OAAtF;AACA,MAAM0W,WAAW,GAAGzZ,YAAY,CAACpB,qBAAqB,CAACf,MAAD,CAAtB,CAAZ,GAChB5J,sBAAc,CAACiL,UADC,GAEhBjL,sBAAc,CAAC2L,YAFnB;AAIA,SAAO;AACLyJ,IAAAA,QAAQ,EAARA,QADK;AAELmQ,IAAAA,MAAM,EAANA,MAFK;AAGLF,IAAAA,KAAK,EAALA,KAHK;AAILC,IAAAA,GAAG,EAAHA,GAJK;AAKLE,IAAAA,WAAW,EAAXA,WALK;AAML7X,IAAAA,SAAS,EAAE+W,qBAAqB;AAN3B,GAAP;AAQD;SAEee,gCACdrQ,UACAa,SACAgN,SACAoC,OACAC;AAEA,MAAMI,gBAAgB,GAAGzC,OAAO,CAAC7M,GAAR,CAAYzL,qBAAZ,CAAzB;AAGA,MAAM4a,MAAM,GAAGvP,qBAAqB,CAAC,CAAD,EAAIZ,QAAJ,EAAca,OAAd,EAAuByP,gBAAvB,CAArB,CAA8D5W,OAA7E;AAEA,SAAO;AACLsG,IAAAA,QAAQ,EAARA,QADK;AAELmQ,IAAAA,MAAM,EAANA,MAFK;AAGLF,IAAAA,KAAK,EAALA,KAHK;AAILC,IAAAA,GAAG,EAAHA,GAJK;AAKLK,IAAAA,MAAM,EAAE,EALH;AAMLC,IAAAA,kBAAkB,EAAE3P;AANf,GAAP;AAQD;SAEe4P,YAAYC;AAC1B,SAAO,eAAeA,SAAtB;AACD;;AAED,SAASC,cAAT,CAAwBD,SAAxB;AACE,MAAME,MAAM,GAAG7E,SAAS,CAAC2E,SAAD,CAAxB;AACAE,EAAAA,MAAM,CAACX,KAAP,GAAe,IAAItU,0BAAJ,CAAW,CAAX,CAAf;AACAiV,EAAAA,MAAM,CAACV,GAAP,GAAa,IAAIvU,0BAAJ,CAAW,CAAX,CAAb;;AAEA,MAAI8U,WAAW,CAACG,MAAD,CAAf,EAAyB;AACvBA,IAAAA,MAAM,CAACrY,SAAP,GAAmB+W,qBAAqB,EAAxC;AACD,GAFD,MAEO;AACLsB,IAAAA,MAAM,CAACL,MAAP,GAAgB,EAAhB;AACD;;AAED,SAAOK,MAAP;AACD;;SAEeC,oCAAoCH;AAClD,MAAM3Z,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;AACAD,EAAAA,WAAW,CAACkE,UAAZ,CAAuByV,SAAS,CAAC1Q,QAAjC;AACAjJ,EAAAA,WAAW,CAACmK,eAAZ,CAA4BwP,SAAS,CAACP,MAAtC;AACApZ,EAAAA,WAAW,CAAC9E,IAAZ,CAAiBye,SAAS,CAACT,KAAV,CAAgB5U,WAAhB,CAA4BlG,MAA5B,EAAoC,IAApC,EAA0C,CAA1C,CAAjB;AACA4B,EAAAA,WAAW,CAAC9E,IAAZ,CAAiBye,SAAS,CAACR,GAAV,CAAc7U,WAAd,CAA0BlG,MAA1B,EAAkC,IAAlC,EAAwC,CAAxC,CAAjB;AACA4B,EAAAA,WAAW,CAACkE,UAAZ,CAAuByV,SAAS,CAACN,WAAjC;AACArZ,EAAAA,WAAW,CAAC9E,IAAZ,CAAiBmN,yBAAyB,CAACsR,SAAS,CAACnY,SAAX,CAA1C;AACA,SAAOxB,WAAW,CAACE,YAAZ,EAAP;AACD;SAEe6Z,mCAAmCJ;AACjD,MAAM3Z,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;AACAD,EAAAA,WAAW,CAACkE,UAAZ,CAAuByV,SAAS,CAAC1Q,QAAjC;AACAjJ,EAAAA,WAAW,CAACmK,eAAZ,CAA4BwP,SAAS,CAACP,MAAtC;AACApZ,EAAAA,WAAW,CAAC9E,IAAZ,CAAiBye,SAAS,CAACT,KAAV,CAAgB5U,WAAhB,CAA4BlG,MAA5B,EAAoC,IAApC,EAA0C,CAA1C,CAAjB;AACA4B,EAAAA,WAAW,CAAC9E,IAAZ,CAAiBye,SAAS,CAACR,GAAV,CAAc7U,WAAd,CAA0BlG,MAA1B,EAAkC,IAAlC,EAAwC,CAAxC,CAAjB;AAEA,MAAMob,MAAM,GAAGzN,YAAY,CAAC4N,SAAS,CAACH,MAAX,CAA3B;AACAxZ,EAAAA,WAAW,CAAC9E,IAAZ,CAAiB+M,eAAe,CAACuR,MAAD,CAAhC;AAEA,MAAM1P,OAAO,GAAG1L,MAAM,CAACyI,KAAP,CAAa,CAAb,CAAhB;AACAiD,EAAAA,OAAO,CAACkQ,aAAR,CAAsBL,SAAS,CAACF,kBAAhC,EAAoD,CAApD;AACAzZ,EAAAA,WAAW,CAAC9E,IAAZ,CAAiB4O,OAAjB;AACA,SAAO9J,WAAW,CAACE,YAAZ,EAAP;AACD;SAEe+Z,sCACdhR,UACAtI;AAEA,MAAMyY,MAAM,GAAGzY,YAAY,CAACK,UAAb,CAAwB,EAAxB,EAA4BvG,QAA5B,CAAqC,KAArC,CAAf;AACA,MAAMye,KAAK,GAAG,IAAItU,0BAAJ,CAAWjE,YAAY,CAACK,UAAb,CAAwB,CAAxB,EAA2BvG,QAA3B,CAAoC,KAApC,CAAX,EAAuD,EAAvD,CAAd;AACA,MAAM0e,GAAG,GAAG,IAAIvU,0BAAJ,CAAWjE,YAAY,CAACK,UAAb,CAAwB,CAAxB,EAA2BvG,QAA3B,CAAoC,KAApC,CAAX,EAAuD,EAAvD,CAAZ;AAEA,MAAM4e,WAAW,GAAG1Y,YAAY,CAAC8D,aAAb,CAA2B5Q,sBAA3B,EAA2C,UAAA6Q,CAAC;AAC9D,UAAM,IAAI5B,oBAAJ,sBAA4C4B,CAA5C,wBAAN;AACD,GAFmB,CAApB;AAGA,MAAMlD,SAAS,GAAGiH,2BAA2B,CAAC9H,YAAD,CAA7C;AACA,SAAO;AACLsI,IAAAA,QAAQ,EAARA,QADK;AAELmQ,IAAAA,MAAM,EAANA,MAFK;AAGLF,IAAAA,KAAK,EAALA,KAHK;AAILC,IAAAA,GAAG,EAAHA,GAJK;AAKLE,IAAAA,WAAW,EAAXA,WALK;AAML7X,IAAAA,SAAS,EAATA;AANK,GAAP;AAQD;SAEe0Y,qCACdjR,UACAtI;AAEA,MAAMyY,MAAM,GAAGzY,YAAY,CAACK,UAAb,CAAwB,EAAxB,EAA4BvG,QAA5B,CAAqC,KAArC,CAAf;AACA,MAAMye,KAAK,GAAG,IAAItU,0BAAJ,CAAWjE,YAAY,CAACK,UAAb,CAAwB,CAAxB,EAA2BvG,QAA3B,CAAoC,KAApC,CAAX,EAAuD,EAAvD,CAAd;AACA,MAAM0e,GAAG,GAAG,IAAIvU,0BAAJ,CAAWjE,YAAY,CAACK,UAAb,CAAwB,CAAxB,EAA2BvG,QAA3B,CAAoC,KAApC,CAAX,EAAuD,EAAvD,CAAZ;AAEA,MAAM+e,MAAM,GAAGhR,iBAAiB,CAAC7H,YAAD,EAAexN,yBAAiB,CAAC+U,oBAAjC,CAAjB,CACZzQ,MADH;AAGA,MAAMgiB,kBAAkB,GAAG9Y,YAAY,CAACkS,YAAb,EAA3B;AAEA,SAAO;AACL5J,IAAAA,QAAQ,EAARA,QADK;AAELmQ,IAAAA,MAAM,EAANA,MAFK;AAGLF,IAAAA,KAAK,EAALA,KAHK;AAILC,IAAAA,GAAG,EAAHA,GAJK;AAKLK,IAAAA,MAAM,EAANA,MALK;AAMLC,IAAAA,kBAAkB,EAAlBA;AANK,GAAP;AAQD;SAEeU,2BAA2BR;AACzC,MAAID,WAAW,CAACC,SAAD,CAAf,EAA4B;AAC1B,WAAOG,mCAAmC,CAACH,SAAD,CAA1C;AACD,GAFD,MAEO;AACL,WAAOI,kCAAkC,CAACJ,SAAD,CAAzC;AACD;AACF;SAEeS,6BAA6BzZ;AAC3C,MAAMsI,QAAQ,GAAGtI,YAAY,CAAC8D,aAAb,CAA2B9Q,uBAA3B,EAA4C,UAAA+Q,CAAC;AAC5D,UAAM,IAAI5B,oBAAJ,sBAA4C4B,CAA5C,yBAAN;AACD,GAFgB,CAAjB;;AAIA,MAAIuE,QAAQ,KAAKtV,uBAAe,CAACqK,cAA7B,IAA+CiL,QAAQ,KAAKtV,uBAAe,CAAC6V,eAAhF,EAAiG;AAC/F,WAAOyQ,qCAAqC,CAAChR,QAAD,EAAWtI,YAAX,CAA5C;AACD,GAFD,MAEO;AACL,WAAOuZ,oCAAoC,CAACjR,QAAD,EAAWtI,YAAX,CAA3C;AACD;AACF;SAEe0Z,mBACdC,YACAC,UACApB,KACAD;AAQA,MAAMsB,UAAU,GAAG,KAAK,CAAL,GAAS,CAAT,GAAa,CAAhC;AAEA,MAAMC,OAAO,GACXH,UAAU,GACVlc,MAAM,CAACC,IAAP,CAAY,CAACkc,QAAD,CAAZ,EAAwB9f,QAAxB,CAAiC,KAAjC,CADA,GAEA0e,GAAG,CAAC7U,WAAJ,CAAgBlG,MAAhB,EAAwB,IAAxB,EAA8B,CAA9B,EAAiC3D,QAAjC,CAA0C,KAA1C,CAFA,GAGAye,KAAK,CAAC5U,WAAN,CAAkBlG,MAAlB,EAA0B,IAA1B,EAAgC,CAAhC,EAAmC3D,QAAnC,CAA4C,KAA5C,CAJF;;AAMA,MAAI2D,MAAM,CAACC,IAAP,CAAYoc,OAAZ,EAAqB,KAArB,EAA4BlU,UAA5B,KAA2CiU,UAA/C,EAA2D;AACzD,UAAM5gB,KAAK,CAAC,+BAAD,CAAX;AACD;;AAED,SAAO6c,YAAY,CAACrY,MAAM,CAACC,IAAP,CAAYoc,OAAZ,EAAqB,KAArB,CAAD,CAAnB;AACD;;AAED,SAASC,mBAAT,CACEJ,UADF,EAEE7c,MAFF,EAGE+D,SAHF;AASE,MAAMgZ,UAAU,GAAG,KAAK,CAAL,GAAS1nB,kCAA5B;AAEA,MAAM+L,cAAc,GAAGe,YAAY,CAACnC,MAAD,CAAZ,GACnB5J,sBAAc,CAACiL,UADI,GAEnBjL,sBAAc,CAAC2L,YAFnB;AAIA,MAAMib,OAAO,GAAGH,UAAU,GAAG7F,UAAU,CAAC5V,cAAc,CAACpE,QAAf,CAAwB,EAAxB,CAAD,CAAvB,GAAuD+G,SAAS,CAAC5D,IAAjF;AAEA,MAAM+c,aAAa,GAAGvc,MAAM,CAACC,IAAP,CAAYoc,OAAZ,EAAqB,KAArB,CAAtB;;AACA,MAAIE,aAAa,CAACpU,UAAd,GAA2BiU,UAA/B,EAA2C;AACzC,UAAM5gB,KAAK,CAAC,+BAAD,CAAX;AACD;;AAED,SAAO6c,YAAY,CAACkE,aAAD,CAAnB;AACD;;SAEeC,cACdN,YACAC,UACApB,KACAD,OACA3b;AAKA,MAAMsd,cAAc,GAAGR,kBAAkB,CAACC,UAAD,EAAaC,QAAb,EAAuBpB,GAAvB,EAA4BD,KAA5B,CAAzC;AAEA,MAAM1X,SAAS,GAAGF,WAAW,CAAC/D,UAAD,EAAasd,cAAb,CAA7B;AACA,MAAMhd,SAAS,GAAGyE,YAAY,CAAC/E,UAAD,CAA9B;AACA,MAAMud,WAAW,GAAGJ,mBAAmB,CAACG,cAAD,EAAiBhd,SAAjB,EAA4B2D,SAA5B,CAAvC;AAEA,SAAO;AACLuZ,IAAAA,OAAO,EAAEvZ,SADJ;AAELsZ,IAAAA,WAAW,EAAXA;AAFK,GAAP;AAID;SAEeE,iBACdC,gBACAV,UACApB,KACAD,OAEAra,gBACA2C;AAEA,MAAMqZ,cAAc,GAAGR,kBAAkB,CAACY,cAAD,EAAiBV,QAAjB,EAA2BpB,GAA3B,EAAgCD,KAAhC,CAAzC;AAEA,MAAMrb,SAAS,GAAGW,qBAAqB,CACrCE,sBAAsB,CAACmc,cAAD,EAAiBrZ,SAAjB,EAA4B3C,cAA5B,CADe,CAAvC;AAIA,MAAMic,WAAW,GAAGJ,mBAAmB,CAACG,cAAD,EAAiBhd,SAAjB,EAA4B2D,SAA5B,CAAvC;AAEA,SAAO;AACL/D,IAAAA,MAAM,EAAEI,SADH;AAELid,IAAAA,WAAW,EAAXA;AAFK,GAAP;AAID;;AAED,SAASI,iBAAT;AACE,MAAMC,iBAAiB,GAAGlC,gCAAgC,CACxDtlB,uBAAe,CAACqK,cADwC,EAExD,EAFwD,EAGxD,IAAI4G,0BAAJ,CAAW,CAAX,CAHwD,EAIxD,IAAIA,0BAAJ,CAAW,CAAX,CAJwD,CAA1D;AAMAuW,EAAAA,iBAAiB,CAAC/B,MAAlB,GAA2BvQ,kBAAkB,GAAGlG,OAAhD;AACAwY,EAAAA,iBAAiB,CAAC9B,WAAlB,GAAgCxlB,sBAAc,CAACiL,UAA/C;AACAqc,EAAAA,iBAAiB,CAAC3Z,SAAlB,GAA8B+W,qBAAqB,EAAnD;AACA,SAAO4C,iBAAP;AACD;;AAED,SAASC,MAAT,CAAgBzB,SAAhB,EAA8CsB,cAA9C,EAAsEV,QAAtE;AACE,MAAIb,WAAW,CAACC,SAAD,CAAf,EAA4B;AAC1B,WAAO0B,eAAe,CAAC1B,SAAD,EAAYsB,cAAZ,EAA4BV,QAA5B,CAAtB;AACD,GAFD,MAEO;AAEL,WAAO,EAAP;AACD;AACF;;AAED,SAASc,eAAT,CACE1B,SADF,EAEEsB,cAFF,EAGEV,QAHF;0BAK0BS,gBAAgB,CACtCC,cADsC,EAEtCV,QAFsC,EAGtCZ,SAAS,CAACR,GAH4B,EAItCQ,SAAS,CAACT,KAJ4B,EAKtCS,SAAS,CAACN,WAL4B,EAMtCM,SAAS,CAACnY,SAN4B;MAAhCsZ,gCAAAA;;AAWR,SAAOA,WAAP;AACD;;IAEYQ,aAAb;AAAA;;AAKE,yBACEf,QADF,EAEEgB,kBAFF,EAGEC,wBAHF;;;AAKE;AACA,UAAKjB,QAAL,GAAgBA,QAAhB;AACA,UAAKY,iBAAL,GAAyBI,kBAAzB;AACA,UAAKC,wBAAL,GAAgCA,wBAAhC;;AACD;;AAdH;;AAAA,SAgBEC,sBAhBF,GAgBE;AACE,QAAI,KAAKN,iBAAT,EAA4B;AAC1B,cAAQ,KAAKZ,QAAb;AACE,aAAK7mB,gBAAQ,CAACiX,QAAd;AACE,iBAAO,IAAI2Q,aAAJ,CAAkB5nB,gBAAQ,CAACiX,QAA3B,EAAqCiP,cAAc,CAAC,KAAKuB,iBAAN,CAAnD,CAAP;;AACF,aAAKznB,gBAAQ,CAACgoB,SAAd;AACE,iBAAO,IAAIJ,aAAJ,CACL5nB,gBAAQ,CAACgoB,SADJ,EAEL9B,cAAc,CAAC,KAAKuB,iBAAN,CAFT,EAGLD,iBAAiB,EAHZ,CAAP;;AAKF;AACE,gBAAM,IAAIlY,YAAJ,CAAiB,2CAAjB,CAAN;AAVJ;AAYD;;AAED,UAAM,IAAIpJ,KAAJ,CAAU,yCAAV,CAAN;AACD,GAjCH;;AAAA,SAmCE+hB,MAnCF,GAmCE,gBAAOvY,MAAP;AACE,YAAQ,KAAKmX,QAAb;AACE,WAAK7mB,gBAAQ,CAACiX,QAAd;AACE,aAAKwQ,iBAAL,CAAwBhC,GAAxB,GAA8B/V,MAA9B;AACA;;AACF,WAAK1P,gBAAQ,CAACgoB,SAAd;AACE,aAAKF,wBAAL,CAA+BrC,GAA/B,GAAqC/V,MAArC;AACA;AANJ;AAQD,GA5CH;;AAAA,SA8CEwY,MA9CF,GA8CE;AACE,YAAQ,KAAKrB,QAAb;AACE,WAAK7mB,gBAAQ,CAACiX,QAAd;AACE,eAAO,KAAKwQ,iBAAL,CAAwBhC,GAA/B;;AACF,WAAKzlB,gBAAQ,CAACgoB,SAAd;AACE,eAAO,KAAKF,wBAAL,CAA+BrC,GAAtC;;AACF;AACE,eAAO,CAAP;AANJ;AAQD,GAvDH;;AAAA,SAyDE0C,QAzDF,GAyDE,kBAAS3C,KAAT;AACE,SAAKiC,iBAAL,CAAwBjC,KAAxB,GAAgCA,KAAhC;AACD,GA3DH;;AAAA,SA6DE4C,eA7DF,GA6DE,yBAAgB5C,KAAhB;AACE,SAAKsC,wBAAL,CAA+BtC,KAA/B,GAAuCA,KAAvC;AACD,GA/DH;;AAAA,SAiEE6C,UAjEF,GAiEE,oBAAWP,wBAAX;AACE,SAAKA,wBAAL,GAAgCA,wBAAhC;AACD,GAnEH;;AAAA,SAqEEQ,YArEF,GAqEE,sBAAaf,cAAb;AACE,YAAQ,KAAKV,QAAb;AACE,WAAK7mB,gBAAQ,CAACiX,QAAd;AACE,eAAOyQ,MAAM,CAAC,KAAKD,iBAAN,EAA0BF,cAA1B,EAA0CvnB,gBAAQ,CAACiX,QAAnD,CAAb;;AACF,WAAKjX,gBAAQ,CAACgoB,SAAd;AACE,eAAON,MAAM,CAAC,KAAKD,iBAAN,EAA0BF,cAA1B,EAA0CvnB,gBAAQ,CAACiX,QAAnD,CAAb;;AACF;AACE,cAAM,IAAI3H,YAAJ,CAAiB,0BAAjB,CAAN;AANJ;AAQD,GA9EH;;AAAA,SAgFEiZ,SAhFF,GAgFE;AACE,QAAMjc,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;;AACA,QAAI,KAAKsa,QAAL,KAAkB7lB,SAAtB,EAAiC;AAC/B,YAAM,IAAIkO,kBAAJ,CAAuB,yBAAvB,CAAN;AACD;;AACD5C,IAAAA,WAAW,CAACkE,UAAZ,CAAuB,KAAKqW,QAA5B;;AAEA,YAAQ,KAAKA,QAAb;AACE,WAAK7mB,gBAAQ,CAACiX,QAAd;AACE,YAAI,KAAKwQ,iBAAL,KAA2BzmB,SAA/B,EAA0C;AACxC,gBAAM,IAAIkO,kBAAJ,CAAuB,kCAAvB,CAAN;AACD;;AACD5C,QAAAA,WAAW,CAAC9E,IAAZ,CAAiBif,0BAA0B,CAAC,KAAKgB,iBAAN,CAA3C;AACA;;AACF,WAAKznB,gBAAQ,CAACgoB,SAAd;AACE,YAAI,KAAKP,iBAAL,KAA2BzmB,SAA/B,EAA0C;AACxC,gBAAM,IAAIkO,kBAAJ,CAAuB,kCAAvB,CAAN;AACD;;AACD,YAAI,KAAK4Y,wBAAL,KAAkC9mB,SAAtC,EAAiD;AAC/C,gBAAM,IAAIkO,kBAAJ,CAAuB,kCAAvB,CAAN;AACD;;AACD5C,QAAAA,WAAW,CAAC9E,IAAZ,CAAiBif,0BAA0B,CAAC,KAAKgB,iBAAN,CAA3C;AACAnb,QAAAA,WAAW,CAAC9E,IAAZ,CAAiBif,0BAA0B,CAAC,KAAKqB,wBAAN,CAA3C;AACA;;AACF;AACE,cAAM,IAAI5Y,kBAAJ,yDACkDyG,IAAI,CAACC,SAAL,CAAe,KAAKiR,QAApB,CADlD,CAAN;AAlBJ;;AAuBA,WAAOva,WAAW,CAACE,YAAZ,EAAP;AACD,GA/GH;;AAAA,SAiHEoY,WAjHF,GAiHE,qBAAY3X,YAAZ;AACE,SAAK4Z,QAAL,GAAgB5Z,YAAY,CAAC8D,aAAb,CAA2B/Q,gBAA3B,EAAqC,UAAAgR,CAAC;AACpD,YAAM,IAAI5B,oBAAJ,sBAA4C4B,CAA5C,kBAAN;AACD,KAFe,CAAhB;;AAIA,YAAQ,KAAK6V,QAAb;AACE,WAAK7mB,gBAAQ,CAACiX,QAAd;AACE,aAAKwQ,iBAAL,GAAyBf,4BAA4B,CAACzZ,YAAD,CAArD;AACA;;AACF,WAAKjN,gBAAQ,CAACgoB,SAAd;AACE,aAAKP,iBAAL,GAAyBf,4BAA4B,CAACzZ,YAAD,CAArD;AACA,aAAK6a,wBAAL,GAAgCpB,4BAA4B,CAACzZ,YAAD,CAA5D;AACA;;AAEF;AACE,cAAM,IAAImC,oBAAJ,2DACoDuG,IAAI,CAACC,SAAL,CAAe,KAAKiR,QAApB,CADpD,CAAN;AAVJ;AAcD,GApIH;;AAAA;AAAA,EAAmClC,cAAnC;IAuIa6D,qBAAb;AAAA;;AACE,iCAAYf,iBAAZ;WACE,0BAAMznB,gBAAQ,CAACiX,QAAf,EAAyBwQ,iBAAzB;AACD;;AAHH;AAAA,EAA2CG,aAA3C;IAMaa,sBAAb;AAAA;;AACE,kCACEC,uBADF,EAEEZ,wBAFF;AAIE,QAAIa,SAAS,GAAGb,wBAAhB;;AACA,QAAI,CAACa,SAAL,EAAgB;AACdA,MAAAA,SAAS,GAAGpD,gCAAgC,CAC1CtlB,uBAAe,CAACqK,cAD0B,EAE1C,IAAI+K,MAAJ,CAAW,EAAX,CAF0C,EAG1C,IAAInE,0BAAJ,CAAW,CAAX,CAH0C,EAI1C,IAAIA,0BAAJ,CAAW,CAAX,CAJ0C,CAA5C;AAMD;;WACD,2BAAMlR,gBAAQ,CAACgoB,SAAf,EAA0BU,uBAA1B,EAAmDC,SAAnD;AACD;;AAfH;AAAA,EAA4Cf,aAA5C;;ICxkBagB,iBAAb;AASE,6BACE7Z,OADF,EAEE8Z,IAFF,EAGE7V,OAHF,EAIE8V,cAJF,EAKEC,iBALF,EAMEC,UANF,EAOEC,OAPF;AASE,SAAKla,OAAL,GAAeA,OAAf;AACA,SAAK8Z,IAAL,GAAYA,IAAZ;AACA,SAAK7V,OAAL,GAAeA,OAAf;AACA,SAAKiW,OAAL,GAAeA,OAAf,WAAeA,OAAf,GAA0BlqB,gBAA1B;AACA,SAAKgqB,iBAAL,GAAyBA,iBAAzB,WAAyBA,iBAAzB,GAA8CjpB,yBAAiB,CAACopB,IAAhE;AACA,SAAKJ,cAAL,GAAsBA,cAAtB,WAAsBA,cAAtB,GAAwCzQ,YAAY,CAAC,EAAD,CAApD;;AAEA,QAAI2Q,UAAJ,EAAgB;AACd,WAAKA,UAAL,GAAkBA,UAAlB;AACD,KAFD,MAEO;AACL,cAAQhW,OAAO,CAACrB,WAAhB;AACE,aAAKjS,mBAAW,CAACoT,QAAjB;AACA,aAAKpT,mBAAW,CAACgT,gBAAjB;AAAmC;AACjC,iBAAKsW,UAAL,GAAkBrpB,kBAAU,CAACwpB,WAA7B;AACA;AACD;;AACD,aAAKzpB,mBAAW,CAAC0S,YAAjB;AACA,aAAK1S,mBAAW,CAAC8S,aAAjB;AACA,aAAK9S,mBAAW,CAACkS,aAAjB;AAAgC;AAC9B,iBAAKoX,UAAL,GAAkBrpB,kBAAU,CAACypB,GAA7B;AACA;AACD;AAXH;AAaD;AACF;;AA1CH;;AAAA,SA4CEC,SA5CF,GA4CE;AACE,QAAMC,EAAE,GAAGhI,SAAS,CAAC,IAAD,CAApB;AACAgI,IAAAA,EAAE,CAACT,IAAH,GAAUS,EAAE,CAACT,IAAH,CAAQd,sBAAR,EAAV;AACA,WAAOuB,EAAE,CAACC,IAAH,EAAP;AACD,GAhDH;;AAAA,SAkDEC,WAlDF,GAkDE;AACE,QAAMF,EAAE,GAAGhI,SAAS,CAAC,IAAD,CAApB;AACAgI,IAAAA,EAAE,CAACT,IAAH,GAAUS,EAAE,CAACT,IAAH,CAAQd,sBAAR,EAAV;AACA,WAAOuB,EAAE,CAACC,IAAH,EAAP;AACD,GAtDH;;AAAA,SAwDEE,qBAxDF,GAwDE,+BAAsB3b,SAAtB;AACE,QAAM4b,SAAS,GAAG,OAAO5b,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4CA,SAAS,CAAC/G,QAAV,CAAmB,KAAnB,CAA9D;AACA,QAAMuiB,EAAE,GAAGhI,SAAS,CAAC,IAAD,CAApB;;AACA,QAAI,CAACgI,EAAE,CAACT,IAAH,CAAQpB,iBAAb,EAAgC;AAC9B,YAAM,IAAIvhB,KAAJ,CAAU,gEAAV,CAAN;AACD;;AACAojB,IAAAA,EAAE,CAACT,IAAH,CAAQpB,iBAAR,CAAyD3Z,SAAzD,GAAqES,sBAAsB,CAC1Fmb,SAD0F,CAA3F;AAGD,WAAOJ,EAAP;AACD,GAlEH;;AAAA,SAoEEhB,YApEF,GAoEE;AACE,WAAO,KAAKO,IAAL,CAAUP,YAAV,CAAuB,KAAKkB,WAAL,EAAvB,CAAP;AACD,GAtEH;;AAAA,SAwEEG,cAxEF,GAwEE,wBAAe5C,OAAf,EAAgCld,UAAhC;AACE,QAAI,KAAKgf,IAAL,CAAUpB,iBAAV,KAAgCzmB,SAApC,EAA+C;AAC7C,YAAM,IAAIkF,KAAJ,CAAU,uCAAV,CAAN;AACD;;AACD,QAAI,KAAK2iB,IAAL,CAAUhC,QAAV,KAAuB7lB,SAA3B,EAAsC;AACpC,YAAM,IAAIkF,KAAJ,CAAU,8BAAV,CAAN;AACD;;AACD,WAAO,KAAK0jB,aAAL,CAAmB,KAAKf,IAAL,CAAUpB,iBAA7B,EAAgDV,OAAhD,EAAyD/mB,gBAAQ,CAACiX,QAAlE,EAA4EpN,UAA5E,CAAP;AACD,GAhFH;;AAAA,SAkFEggB,eAlFF,GAkFE,yBAAgB9C,OAAhB,EAAiCld,UAAjC;AACE,QAAI,KAAKgf,IAAL,CAAUf,wBAAV,KAAuC9mB,SAA3C,EAAsD;AACpD,YAAM,IAAIkF,KAAJ,CAAU,uCAAV,CAAN;AACD;;AACD,QAAI,KAAK2iB,IAAL,CAAUhC,QAAV,KAAuB7lB,SAA3B,EAAsC;AACpC,YAAM,IAAIkF,KAAJ,CAAU,8BAAV,CAAN;AACD;;AACD,WAAO,KAAK0jB,aAAL,CACL,KAAKf,IAAL,CAAUf,wBADL,EAELf,OAFK,EAGL/mB,gBAAQ,CAACgoB,SAHJ,EAILne,UAJK,CAAP;AAMD,GA/FH;;AAAA,SAiGEigB,YAjGF,GAiGE,sBAAa3f,SAAb;AACE,QAAM4f,IAAI,GAAG,KAAKlB,IAAL,CAAUpB,iBAAvB;;AACA,QAAIsC,IAAI,IAAI,CAAC/D,WAAW,CAAC+D,IAAD,CAAxB,EAAgC;AAC9B,UAAMld,UAAU,GAAGX,YAAY,CAAC/B,SAAD,CAA/B;AACA4f,MAAAA,IAAI,CAACjE,MAAL,CAAYte,IAAZ,CACEud,0BAA0B,CACxBlY,UAAU,GAAG1M,sBAAc,CAACiL,UAAlB,GAA+BjL,sBAAc,CAAC2L,YADhC,EAExB3B,SAFwB,CAD5B;AAMD,KARD,MAQO;AACL,YAAM,IAAIjE,KAAJ,oDAAN;AACD;AACF,GA9GH;;AAAA,SAgHE0jB,aAhHF,GAgHE,uBACE3D,SADF,EAEEW,UAFF,EAGEC,QAHF,EAIEhd,UAJF;yBAMmCqd,aAAa,CAC5CN,UAD4C,EAE5CC,QAF4C,EAG5CZ,SAAS,CAACR,GAHkC,EAI5CQ,SAAS,CAACT,KAJkC,EAK5C3b,UAL4C;QAAtCwd,yBAAAA;QAASD,6BAAAA;;AAOjB,QAAIpB,WAAW,CAACC,SAAD,CAAf,EAA4B;AAC1BA,MAAAA,SAAS,CAACnY,SAAV,GAAsBuZ,OAAtB;AACD,KAFD,MAEO;AACL,UAAMxa,UAAU,GAAGhD,UAAU,CAACK,IAAX,CAAgBnD,QAAhB,CAAyB,KAAzB,EAAgCijB,QAAhC,CAAyC,IAAzC,CAAnB;AACA/D,MAAAA,SAAS,CAACH,MAAV,CAAiBte,IAAjB,CACEud,0BAA0B,CACxBlY,UAAU,GAAG1M,sBAAc,CAACiL,UAAlB,GAA+BjL,sBAAc,CAAC2L,YADhC,EAExBub,OAFwB,CAD5B;AAMD;;AAED,WAAOD,WAAP;AACD,GA1IH;;AAAA,SA4IEmC,IA5IF,GA4IE;AACE,QAAMtF,UAAU,GAAG,KAAKsE,SAAL,EAAnB;AACA,WAAOxF,YAAY,CAACkB,UAAD,CAAnB;AACD,GA/IH;;AAAA,SAiJEoE,UAjJF,GAiJE,oBAAWP,wBAAX;AACE,QAAI,KAAKe,IAAL,CAAUhC,QAAV,IAAsB7mB,gBAAQ,CAACgoB,SAAnC,EAA8C;AAC5C,YAAM,IAAI1Y,YAAJ,CAAiB,iDAAjB,CAAN;AACD;;AAED,SAAKuZ,IAAL,CAAUR,UAAV,CAAqBP,wBAArB;AACD,GAvJH;;AAAA,SA8JEG,MA9JF,GA8JE,gBAAOvY,MAAP;AACE,SAAKmZ,IAAL,CAAUZ,MAAV,CAAiBvY,MAAjB;AACD,GAhKH;;AAAA,SAuKEyY,QAvKF,GAuKE,kBAAS3C,KAAT;AACE,SAAKqD,IAAL,CAAUV,QAAV,CAAmB3C,KAAnB;AACD,GAzKH;;AAAA,SAgLE4C,eAhLF,GAgLE,yBAAgB5C,KAAhB;AACE,SAAKqD,IAAL,CAAUT,eAAV,CAA0B5C,KAA1B;AACD,GAlLH;;AAAA,SAoLE+C,SApLF,GAoLE;AACE,QAAI,KAAKxZ,OAAL,KAAiB/N,SAArB,EAAgC;AAC9B,YAAM,IAAIkO,kBAAJ,CAAuB,wBAAvB,CAAN;AACD;;AACD,QAAI,KAAK+Z,OAAL,KAAiBjoB,SAArB,EAAgC;AAC9B,YAAM,IAAIkO,kBAAJ,CAAuB,wBAAvB,CAAN;AACD;;AACD,QAAI,KAAK2Z,IAAL,KAAc7nB,SAAlB,EAA6B;AAC3B,YAAM,IAAIkO,kBAAJ,CAAuB,qBAAvB,CAAN;AACD;;AACD,QAAI,KAAK8Z,UAAL,KAAoBhoB,SAAxB,EAAmC;AACjC,YAAM,IAAIkO,kBAAJ,CAAuB,2BAAvB,CAAN;AACD;;AACD,QAAI,KAAK8D,OAAL,KAAiBhS,SAArB,EAAgC;AAC9B,YAAM,IAAIkO,kBAAJ,CAAuB,wBAAvB,CAAN;AACD;;AAED,QAAM5C,WAAW,GAAgB,IAAIC,WAAJ,EAAjC;AAEAD,IAAAA,WAAW,CAACkE,UAAZ,CAAuB,KAAKzB,OAA5B;AACA,QAAMkb,aAAa,GAAGvf,MAAM,CAACyI,KAAP,CAAa,CAAb,CAAtB;AACA8W,IAAAA,aAAa,CAAC7W,aAAd,CAA4B,KAAK6V,OAAjC,EAA0C,CAA1C;AACA3c,IAAAA,WAAW,CAAC9E,IAAZ,CAAiByiB,aAAjB;AACA3d,IAAAA,WAAW,CAAC9E,IAAZ,CAAiB,KAAKqhB,IAAL,CAAUN,SAAV,EAAjB;AACAjc,IAAAA,WAAW,CAACkE,UAAZ,CAAuB,KAAKwY,UAA5B;AACA1c,IAAAA,WAAW,CAACkE,UAAZ,CAAuB,KAAKuY,iBAA5B;AACAzc,IAAAA,WAAW,CAAC9E,IAAZ,CAAiB+M,eAAe,CAAC,KAAKuU,cAAN,CAAhC;AACAxc,IAAAA,WAAW,CAAC9E,IAAZ,CAAiBuL,gBAAgB,CAAC,KAAKC,OAAN,CAAjC;AAEA,WAAO1G,WAAW,CAACE,YAAZ,EAAP;AACD,GAlNH;;AAAA;AAAA;SAwNgB0d,uBAAuBhgB;AACrC,MAAI+C,YAAJ;;AACA,MAAI,OAAO/C,IAAP,KAAgB,QAApB,EAA8B;AAC5B,QAAIA,IAAI,CAAC1B,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiB2hB,WAAjB,OAAmC,IAAvC,EAA6C;AAC3Cld,MAAAA,YAAY,GAAG,IAAI2R,YAAJ,CAAiBlU,MAAM,CAACC,IAAP,CAAYT,IAAI,CAAC1B,KAAL,CAAW,CAAX,CAAZ,EAA2B,KAA3B,CAAjB,CAAf;AACD,KAFD,MAEO;AACLyE,MAAAA,YAAY,GAAG,IAAI2R,YAAJ,CAAiBlU,MAAM,CAACC,IAAP,CAAYT,IAAZ,EAAkB,KAAlB,CAAjB,CAAf;AACD;AACF,GAND,MAMO,IAAIQ,MAAM,CAACmU,QAAP,CAAgB3U,IAAhB,CAAJ,EAA2B;AAChC+C,IAAAA,YAAY,GAAG,IAAI2R,YAAJ,CAAiB1U,IAAjB,CAAf;AACD,GAFM,MAEA;AACL+C,IAAAA,YAAY,GAAG/C,IAAf;AACD;;AACD,MAAM6E,OAAO,GAAG9B,YAAY,CAAC8D,aAAb,CAA2BnR,0BAA3B,EAA+C,UAAAoR,CAAC;AAC9D,UAAM,IAAI9K,KAAJ,sBAA6B8K,CAA7B,4BAAN;AACD,GAFe,CAAhB;AAGA,MAAMiY,OAAO,GAAGhc,YAAY,CAAC0G,YAAb,EAAhB;AACA,MAAMkV,IAAI,GAAGjB,aAAa,CAAChD,WAAd,CAA0B3X,YAA1B,CAAb;AACA,MAAM+b,UAAU,GAAG/b,YAAY,CAAC8D,aAAb,CAA2BpR,kBAA3B,EAAuC,UAAAqR,CAAC;AACzD,UAAM,IAAI9K,KAAJ,sBAA6B8K,CAA7B,oBAAN;AACD,GAFkB,CAAnB;AAGA,MAAM+X,iBAAiB,GAAG9b,YAAY,CAAC8D,aAAb,CAA2BjR,yBAA3B,EAA8C,UAAAkR,CAAC;AACvE,UAAM,IAAI9K,KAAJ,sBAA6B8K,CAA7B,2BAAN;AACD,GAFyB,CAA1B;AAGA,MAAM8X,cAAc,GAAGhU,iBAAiB,CAAC7H,YAAD,EAAexN,yBAAiB,CAACmQ,aAAjC,CAAxC;AACA,MAAMoD,OAAO,GAAGK,kBAAkB,CAACpG,YAAD,CAAlC;AAEA,SAAO,IAAI2b,iBAAJ,CACL7Z,OADK,EAEL8Z,IAFK,EAGL7V,OAHK,EAIL8V,cAJK,EAKLC,iBALK,EAMLC,UANK,EAOLC,OAPK,CAAP;AASD;;ICtRYmB,iBAAb;AAOE,6BAAYC,WAAZ;AACE,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKtD,OAAL,GAAesD,WAAW,CAAChB,SAAZ,EAAf;AACA,SAAKiB,UAAL,GAAkB,KAAlB;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACD;;AAbH,oBAeSC,mBAfT,GAeE,6BAA2BJ,WAA3B,EAA2D5C,iBAA3D;AACE,QAAI4C,WAAW,CAACxB,IAAZ,CAAiBhC,QAAjB,IAA6B7mB,gBAAQ,CAACgoB,SAA1C,EAAqD;AACnD,YAAM,IAAI1Y,YAAJ,CAAiB,iDAAjB,CAAN;AACD;;AAED,QAAMga,EAAE,GAAsBhI,SAAS,CAAC+I,WAAD,CAAvC;AACAf,IAAAA,EAAE,CAACjB,UAAH,CAAcZ,iBAAd;AACA,QAAMiD,aAAa,GAAGpB,EAAE,CAAChB,YAAH,EAAtB;AACA,QAAM5C,MAAM,GAAG,IAAI,IAAJ,CAAS4D,EAAT,CAAf;AACA5D,IAAAA,MAAM,CAAC4E,UAAP,GAAoB,IAApB;AACA5E,IAAAA,MAAM,CAACqB,OAAP,GAAiB2D,aAAjB;AACAhF,IAAAA,MAAM,CAAC6E,aAAP,GAAuB,IAAvB;AACA7E,IAAAA,MAAM,CAAC8E,YAAP,GAAsB,IAAtB;AACA,WAAO9E,MAAP;AACD,GA7BH;;AAAA;;AAAA,SA+BEiF,UA/BF,GA+BE,oBAAW9gB,UAAX;AACE,QAAI,KAAK2gB,YAAL,IAAqB,KAAKF,UAA9B,EAA0C;AACxC,YAAM,IAAIhb,YAAJ,CAAiB,sCAAjB,CAAN;AACD;;AAED,QAAI,KAAK+a,WAAL,CAAiBxB,IAAjB,KAA0B7nB,SAA9B,EAAyC;AACvC,YAAM,IAAIsO,YAAJ,CAAiB,iCAAjB,CAAN;AACD;;AACD,QAAI,KAAK+a,WAAL,CAAiBxB,IAAjB,CAAsBpB,iBAAtB,KAA4CzmB,SAAhD,EAA2D;AACzD,YAAM,IAAIsO,YAAJ,CAAiB,mDAAjB,CAAN;AACD;;AAED,QAAI,CAAC0W,WAAW,CAAC,KAAKqE,WAAL,CAAiBxB,IAAjB,CAAsBpB,iBAAvB,CAAhB,EAA2D;AACzD,UAAMA,iBAAiB,GAAG,KAAK4C,WAAL,CAAiBxB,IAAjB,CAAsBpB,iBAAhD;;AACA,UACE,KAAK8C,aAAL,IACA9C,iBAAiB,CAAC3B,MAAlB,CAAyB/d,MAAzB,IAAmC0f,iBAAiB,CAAC1B,kBAFvD,EAGE;AACA,cAAM,IAAI7f,KAAJ,CAAU,uCAAV,CAAN;AACD;AACF;;AAED,QAAM0kB,WAAW,GAAG,KAAKP,WAAL,CAAiBV,cAAjB,CAAgC,KAAK5C,OAArC,EAA8Cld,UAA9C,CAApB;AACA,SAAKkd,OAAL,GAAe6D,WAAf;AACD,GAvDH;;AAAA,SAyDEC,YAzDF,GAyDE,sBAAa1gB,SAAb;AACE,QAAI,KAAKqgB,YAAL,IAAqB,KAAKF,UAA9B,EAA0C;AACxC,YAAMpkB,KAAK,CAAC,sDAAD,CAAX;AACD;;AAED,QAAI,KAAKmkB,WAAL,CAAiBxB,IAAjB,KAA0B7nB,SAA9B,EAAyC;AACvC,YAAM,IAAIkF,KAAJ,CAAU,iCAAV,CAAN;AACD;;AACD,QAAI,KAAKmkB,WAAL,CAAiBxB,IAAjB,CAAsBpB,iBAAtB,KAA4CzmB,SAAhD,EAA2D;AACzD,YAAM,IAAIkF,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,SAAKmkB,WAAL,CAAiBP,YAAjB,CAA8B3f,SAA9B;AACD,GAtEH;;AAAA,SAwEE2gB,WAxEF,GAwEE,qBAAYjhB,UAAZ;AACE,QAAI,KAAKwgB,WAAL,CAAiBxB,IAAjB,KAA0B7nB,SAA9B,EAAyC;AACvC,YAAM,IAAIsO,YAAJ,CAAiB,iCAAjB,CAAN;AACD;;AACD,QAAI,KAAK+a,WAAL,CAAiBxB,IAAjB,CAAsBf,wBAAtB,KAAmD9mB,SAAvD,EAAkE;AAChE,YAAM,IAAIsO,YAAJ,CAAiB,mDAAjB,CAAN;AACD;;AAED,QAAMsb,WAAW,GAAG,KAAKP,WAAL,CAAiBR,eAAjB,CAAiC,KAAK9C,OAAtC,EAA+Cld,UAA/C,CAApB;AACA,SAAKkd,OAAL,GAAe6D,WAAf;AACA,SAAKN,UAAL,GAAkB,IAAlB;AACD,GAnFH;;AAAA,SAqFES,eArFF,GAqFE;AACE,WAAOzJ,SAAS,CAAC,KAAK+I,WAAN,CAAhB;AACD,GAvFH;;AAAA,SAyFEW,MAzFF,GAyFE,gBAAOX,WAAP;AACE,SAAKA,WAAL,GAAmB/I,SAAS,CAAC+I,WAAD,CAA5B;AACA,SAAKtD,OAAL,GAAesD,WAAW,CAAChB,SAAZ,EAAf;AACD,GA5FH;;AAAA;AAAA;;AC8CA,WAAY4B;AACVA,EAAAA,+DAAA,0BAAA;AACAA,EAAAA,8DAAA,yBAAA;AACAA,EAAAA,4DAAA,uBAAA;AACAA,EAAAA,iEAAA,4BAAA;AACAA,EAAAA,4DAAA,uBAAA;AACAA,EAAAA,8DAAA,yBAAA;AACAA,EAAAA,gEAAA,2BAAA;AACAA,EAAAA,gEAAA,2BAAA;AACAA,EAAAA,6DAAA,wBAAA;AACAA,EAAAA,6DAAA,uBAAA;AACAA,EAAAA,oEAAA,8BAAA;AACAA,EAAAA,mEAAA,6BAAA;AACAA,EAAAA,uEAAA,iCAAA;AACD,CAdD,EAAYA,wBAAgB,KAAhBA,wBAAgB,KAAA,CAA5B;;IAgBaC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAC3R,GAAD;AAAA,SACnC,OAAOA,GAAP,KAAe,QADoB;AAAA;IAExB4R,kBAAkB,GAAG,SAArBA,kBAAqB,CAAC5R,GAAD;AAAA,SAC/BA,GAA4B,CAACQ,MAA7B,KAAwC/Y,SADT;AAAA;IAErBoqB,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAC7R,GAAD;AAAA,SACpCA,GAAiC,CAAC,cAAD,CAAjC,KAAsDvY,SADlB;AAAA;IAE1BqqB,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAC9R,GAAD;AAAA,SACnCA,GAAgC,CAAC,aAAD,CAAhC,KAAoDvY,SADjB;AAAA;IAEzBsqB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAC/R,GAAD;AAAA,SACjCA,GAA8B,CAAC8K,QAA/B,KAA4CrjB,SADX;AAAA;IAEvBuqB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAChS,GAAD;AAAA,SACjCA,GAA8B,CAACiS,QAA/B,KAA4CxqB,SADX;AAAA;IAEvByqB,iBAAiB,GAAG,SAApBA,iBAAoB,CAAClS,GAAD;AAAA,SAC9BA,GAA2B,CAACmS,KAA5B,KAAsC1qB,SADR;AAAA;IAEpB2qB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACpS,GAAD;AAAA,SAC7BA,GAA0B,CAAChB,IAA3B,KAAoCvX,SADP;AAAA;SAkBhB4qB,aAAarS;AAC3B,MAAI2R,qBAAqB,CAAC3R,GAAD,CAAzB,EAAgC;AAC9B,QAAIA,GAAG,KAAK,SAAZ,EAAuB;AACrB,aAAO;AAAEvB,QAAAA,EAAE,EAAEiT,wBAAgB,CAACY,qBAAvB;AAA8C3oB,QAAAA,IAAI,EAAEqW;AAApD,OAAP;AACD,KAFD,MAEO,IAAIA,GAAG,KAAK,QAAZ,EAAsB;AAC3B,aAAO;AAAEvB,QAAAA,EAAE,EAAEiT,wBAAgB,CAACa,oBAAvB;AAA6C5oB,QAAAA,IAAI,EAAEqW;AAAnD,OAAP;AACD,KAFM,MAEA,IAAIA,GAAG,KAAK,MAAZ,EAAoB;AACzB,aAAO;AAAEvB,QAAAA,EAAE,EAAEiT,wBAAgB,CAACc,kBAAvB;AAA2C7oB,QAAAA,IAAI,EAAEqW;AAAjD,OAAP;AACD,KAFM,MAEA,IAAIA,GAAG,KAAK,WAAZ,EAAyB;AAC9B,aAAO;AAAEvB,QAAAA,EAAE,EAAEiT,wBAAgB,CAACe,uBAAvB;AAAgD9oB,QAAAA,IAAI,EAAEqW;AAAtD,OAAP;AACD,KAFM,MAEA,IAAIA,GAAG,KAAK,iBAAZ,EAA+B;AACpC,aAAO;AAAEvB,QAAAA,EAAE,EAAEiT,wBAAgB,CAACgB,4BAAvB;AAAqD/oB,QAAAA,IAAI,EAAEqW;AAA3D,OAAP;AACD,KAFM,MAEA,IAAIA,GAAG,KAAK,MAAZ,EAAoB;AACzB,aAAO;AAAEvB,QAAAA,EAAE,EAAEiT,wBAAgB,CAACiB,kBAAvB;AAA2ChpB,QAAAA,IAAI,EAAEqW;AAAjD,OAAP;AACD,KAFM,MAEA;AACL,YAAM,IAAIrT,KAAJ,6CAAoDyP,IAAI,CAACC,SAAL,CAAe2D,GAAf,CAApD,CAAN;AACD;AACF,GAhBD,MAgBO,IAAI4R,kBAAkB,CAAC5R,GAAD,CAAtB,EAA6B;AAClC,WAAO;AAAEvB,MAAAA,EAAE,EAAEiT,wBAAgB,CAACkB,oBAAvB;AAA6CjpB,MAAAA,IAAI,EAAEqW;AAAnD,KAAP;AACD,GAFM,MAEA,IAAI+R,oBAAoB,CAAC/R,GAAD,CAAxB,EAA+B;AACpC,WAAO;AAAEvB,MAAAA,EAAE,EAAEiT,wBAAgB,CAACmB,sBAAvB;AAA+ClpB,MAAAA,IAAI,EAAEqW;AAArD,KAAP;AACD,GAFM,MAEA,IAAIgS,oBAAoB,CAAChS,GAAD,CAAxB,EAA+B;AACpC,WAAO;AAAEvB,MAAAA,EAAE,EAAEiT,wBAAgB,CAACoB,sBAAvB;AAA+CnpB,MAAAA,IAAI,EAAEqW;AAArD,KAAP;AACD,GAFM,MAEA,IAAIkS,iBAAiB,CAAClS,GAAD,CAArB,EAA4B;AACjC,WAAO;AAAEvB,MAAAA,EAAE,EAAEiT,wBAAgB,CAACqB,mBAAvB;AAA4CppB,MAAAA,IAAI,EAAEqW;AAAlD,KAAP;AACD,GAFM,MAEA,IAAIoS,gBAAgB,CAACpS,GAAD,CAApB,EAA2B;AAChC,WAAO;AAAEvB,MAAAA,EAAE,EAAEiT,wBAAgB,CAACsB,kBAAvB;AAA2CrpB,MAAAA,IAAI,EAAEqW;AAAjD,KAAP;AACD,GAFM,MAEA,IAAI6R,uBAAuB,CAAC7R,GAAD,CAA3B,EAAkC;AACvC,WAAO;AAAEvB,MAAAA,EAAE,EAAEiT,wBAAgB,CAACuB,yBAAvB;AAAkDtpB,MAAAA,IAAI,EAAEqW;AAAxD,KAAP;AACD,GAFM,MAEA,IAAI8R,sBAAsB,CAAC9R,GAAD,CAA1B,EAAiC;AACtC,WAAO;AAAEvB,MAAAA,EAAE,EAAEiT,wBAAgB,CAACwB,wBAAvB;AAAiDvpB,MAAAA,IAAI,EAAEqW;AAAvD,KAAP;AACD,GAFM,MAEA;AACL,UAAM,IAAIrT,KAAJ,mCAA0CyP,IAAI,CAACC,SAAL,CAAe2D,GAAf,CAA1C,CAAN;AACD;AACF;;AAID,SAASmT,kBAAT,CACE7e,KADF,EAEE0L,GAFF;AAIE,MAAIoT,KAAJ;;AACA,MAAK9e,KAA6B,CAACmK,EAA9B,KAAqChX,SAA1C,EAAqD;AACnD2rB,IAAAA,KAAK,GAAG9e,KAAR;AACD,GAFD,MAEO;AACL8e,IAAAA,KAAK,GAAGf,YAAY,CAAC/d,KAAD,CAApB;AACD;;AACD,UAAQ8e,KAAK,CAAC3U,EAAd;AACE,SAAKiT,wBAAgB,CAACY,qBAAtB;AACE,aAAOtQ,MAAM,CAAChC,GAAD,CAAb;;AACF,SAAK0R,wBAAgB,CAACa,oBAAtB;AACE,aAAO5Q,KAAK,CAAC3B,GAAD,CAAZ;;AACF,SAAK0R,wBAAgB,CAACc,kBAAtB;AACE,UAAIxS,GAAG,KAAK,OAAR,IAAmBA,GAAG,KAAK,GAA/B,EAAoC,OAAO0B,OAAO,EAAd,CAApC,KACK,IAAI1B,GAAG,KAAK,MAAR,IAAkBA,GAAG,KAAK,GAA9B,EAAmC,OAAOyB,MAAM,EAAb,CAAnC,KACA,MAAM,IAAI9U,KAAJ,qCAA4CyP,IAAI,CAACC,SAAL,CAAe2D,GAAf,CAA5C,CAAN;;AACP,SAAK0R,wBAAgB,CAACe,uBAAtB;AACE,UAAIzS,GAAG,CAAC5C,QAAJ,CAAa,GAAb,CAAJ,EAAuB;AAAA,yBACA4C,GAAG,CAAC3C,KAAJ,CAAU,GAAV,CADA;AAAA,YACdrM,KADc;AAAA,YACR9F,KADQ;;AAErB,eAAOsU,mBAAmB,CAACxO,KAAD,EAAO9F,KAAP,CAA1B;AACD,OAHD,MAGO;AACL,eAAOuU,mBAAmB,CAACO,GAAD,CAA1B;AACD;;AACH,SAAK0R,wBAAgB,CAACgB,4BAAtB;AAAA,wBACuB1S,GAAG,CAAC3C,KAAJ,CAAU,GAAV,CADvB;AAAA,UACSrM,IADT;AAAA,UACe9F,IADf;;AAEE,aAAOsU,mBAAmB,CAACxO,IAAD,EAAO9F,IAAP,CAA1B;;AACF,SAAKwmB,wBAAgB,CAACiB,kBAAtB;AACE,aAAOvQ,MAAM,EAAb;;AACF,SAAKsP,wBAAgB,CAACkB,oBAAtB;AACE,aAAO1Q,QAAQ,CAAC/Q,MAAM,CAACC,IAAP,CAAY4O,GAAZ,EAAiB,MAAjB,CAAD,CAAf;;AACF,SAAK0R,wBAAgB,CAACuB,yBAAtB;AACE,aAAOtQ,aAAa,CAAC3C,GAAD,CAApB;;AACF,SAAK0R,wBAAgB,CAACwB,wBAAtB;AACE,aAAOtQ,YAAY,CAAC5C,GAAD,CAAnB;;AACF,SAAK0R,wBAAgB,CAACmB,sBAAtB;AACE,YAAM,IAAI/c,mBAAJ,6CAAkEsd,KAAK,CAAC3U,EAAxE,CAAN;;AACF,SAAKiT,wBAAgB,CAACoB,sBAAtB;AACE,YAAM,IAAIhd,mBAAJ,6CAAkEsd,KAAK,CAAC3U,EAAxE,CAAN;;AACF,SAAKiT,wBAAgB,CAACqB,mBAAtB;AACE,YAAM,IAAIjd,mBAAJ,6CAAkEsd,KAAK,CAAC3U,EAAxE,CAAN;;AACF,SAAKiT,wBAAgB,CAACsB,kBAAtB;AACE,YAAM,IAAIld,mBAAJ,6CAAkEsd,KAAK,CAAC3U,EAAxE,CAAN;;AACF;AACE,YAAM,IAAI9R,KAAJ,kCAAyCyP,IAAI,CAACC,SAAL,CAAe+W,KAAf,CAAzC,CAAN;AApCJ;AAsCD;SAGeC,cAAcrT;AAC5B,MAAI2R,qBAAqB,CAAC3R,GAAD,CAAzB,EAAgC;AAC9B,QAAIA,GAAG,KAAK,QAAZ,EAAsB;AACpB,aAAO,KAAP;AACD,KAFD,MAEO,IAAIA,GAAG,KAAK,SAAZ,EAAuB;AAC5B,aAAO,MAAP;AACD;;AACD,WAAOA,GAAP;AACD,GAPD,MAOO,IAAI4R,kBAAkB,CAAC5R,GAAD,CAAtB,EAA6B;AAClC,sBAAgBA,GAAG,CAACQ,MAAJ,CAAWhS,MAA3B;AACD,GAFM,MAEA,IAAIqjB,uBAAuB,CAAC7R,GAAD,CAA3B,EAAkC;AACvC,8BAAwBA,GAAG,CAAC,cAAD,CAAH,CAAoBxR,MAA5C;AACD,GAFM,MAEA,IAAIsjB,sBAAsB,CAAC9R,GAAD,CAA1B,EAAiC;AACtC,6BAAuBA,GAAG,CAAC,aAAD,CAAH,CAAmBxR,MAA1C;AACD,GAFM,MAEA,IAAIujB,oBAAoB,CAAC/R,GAAD,CAAxB,EAA+B;AACpC,0BAAoBqT,aAAa,CAACrT,GAAG,CAAC8K,QAAJ,CAAawI,EAAd,CAAjC,SAAsDD,aAAa,CAACrT,GAAG,CAAC8K,QAAJ,CAAa7e,KAAd,CAAnE;AACD,GAFM,MAEA,IAAI+lB,oBAAoB,CAAChS,GAAD,CAAxB,EAA+B;AACpC,0BAAoBqT,aAAa,CAACrT,GAAG,CAACiS,QAAL,CAAjC;AACD,GAFM,MAEA,IAAIC,iBAAiB,CAAClS,GAAD,CAArB,EAA4B;AACjC,uBAAiBA,GAAG,CAACmS,KAAJ,CAAUnV,GAAV,CAAc,UAAAuW,CAAC;AAAA,mBAAQA,CAAC,CAACroB,IAAV,SAAkBmoB,aAAa,CAACE,CAAC,CAAC5pB,IAAH,CAA/B;AAAA,KAAf,EAA2DqX,IAA3D,CAAgE,GAAhE,CAAjB;AACD,GAFM,MAEA,IAAIoR,gBAAgB,CAACpS,GAAD,CAApB,EAA2B;AAChC,sBAAgBA,GAAG,CAAChB,IAAJ,CAASxQ,MAAzB,SAAmC6kB,aAAa,CAACrT,GAAG,CAAChB,IAAJ,CAASrV,IAAV,CAAhD;AACD,GAFM,MAEA;AACL,UAAM,IAAIgD,KAAJ,gDAAuDyP,IAAI,CAACC,SAAL,CAAe2D,GAAf,CAAvD,CAAN;AACD;AACF;SAcewT,oBAAoBC;AAClC,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,KAAgB,WAAhB,GAA8B,WAA9B,GAA4CD,IAAI,CAACC,MAAhE;AACA,sBAAkBA,MAAlB,UAA6BD,IAAI,CAACvoB,IAAlC,SAA0CuoB,IAAI,CAACE,IAAL,CACvC3W,GADuC,CACnC,UAAAtT,GAAG;AAAA,iBAAQA,GAAG,CAACwB,IAAZ,SAAoBmoB,aAAa,CAAC3pB,GAAG,CAACC,IAAL,CAAjC;AAAA,GADgC,EAEvCqX,IAFuC,CAElC,GAFkC,CAA1C;AAGD;;AAqCD,SAAS4S,SAAT,CAAmB3Q,EAAnB,EAAqC4Q,OAArC;AACE,MAAMT,KAAK,GAAGf,YAAY,CAACwB,OAAD,CAA1B;;AAEA,UAAQ5Q,EAAE,CAACtZ,IAAX;AACE,SAAK0V,mBAAW,CAACa,QAAjB;AACA,SAAKb,mBAAW,CAACc,SAAjB;AACE,aAAOiT,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACc,kBAArC;;AACF,SAAKnT,mBAAW,CAACe,GAAjB;AACE,aAAOgT,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACa,oBAArC;;AACF,SAAKlT,mBAAW,CAACiB,IAAjB;AACE,aAAO8S,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACY,qBAArC;;AACF,SAAKjT,mBAAW,CAAClO,MAAjB;AACE,aACEiiB,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACkB,oBAA9B,IACAQ,KAAK,CAACzpB,IAAN,CAAW6W,MAAX,CAAkBhS,MAAlB,IAA4ByU,EAAE,CAACzC,MAAH,CAAUhS,MAFxC;;AAIF,SAAK6Q,mBAAW,CAAC6B,WAAjB;AACE,aACEkS,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACuB,yBAA9B,IACAG,KAAK,CAACzpB,IAAN,CAAW,cAAX,EAA2B6E,MAA3B,IAAqCyU,EAAE,CAACtS,IAAH,CAAQnC,MAF/C;;AAIF,SAAK6Q,mBAAW,CAAC8B,UAAjB;AACE,aACEiS,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACwB,wBAA9B,IACAE,KAAK,CAACzpB,IAAN,CAAW,aAAX,EAA0B6E,MAA1B,IAAoCyU,EAAE,CAACtS,IAAH,CAAQnC,MAF9C;;AAIF,SAAK6Q,mBAAW,CAACqB,YAAjB;AACE,aACE0S,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACiB,kBAA9B,IACAS,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACoB,sBAFhC;;AAIF,SAAKzT,mBAAW,CAACsB,YAAjB;AACE,aACEyS,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACoB,sBAA9B,IACAc,SAAS,CAAC3Q,EAAE,CAAC5a,KAAJ,EAAW+qB,KAAK,CAACzpB,IAAN,CAAWsoB,QAAtB,CAFX;;AAIF,SAAK5S,mBAAW,CAACuB,WAAjB;AACE,aACEwS,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACmB,sBAA9B,IACAe,SAAS,CAAC3Q,EAAE,CAAC5a,KAAJ,EAAW+qB,KAAK,CAACzpB,IAAN,CAAWmhB,QAAX,CAAoB7e,KAA/B,CAFX;;AAIF,SAAKoT,mBAAW,CAACwB,UAAjB;AACE,aACEuS,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACmB,sBAA9B,IACAe,SAAS,CAAC3Q,EAAE,CAAC5a,KAAJ,EAAW+qB,KAAK,CAACzpB,IAAN,CAAWmhB,QAAX,CAAoBwI,EAA/B,CAFX;;AAIF,SAAKjU,mBAAW,CAACE,iBAAjB;AACE,aACE6T,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACe,uBAA9B,IACAW,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACgB,4BAFhC;;AAIF,SAAKrT,mBAAW,CAACC,iBAAjB;AACE,aAAO8T,KAAK,CAAC3U,EAAN,KAAaiT,wBAAgB,CAACe,uBAArC;;AACF,SAAKpT,mBAAW,CAACyB,IAAjB;AACE,aACEsS,KAAK,CAAC3U,EAAN,IAAYiT,wBAAgB,CAACsB,kBAA7B,IACAI,KAAK,CAACzpB,IAAN,CAAWqV,IAAX,CAAgBxQ,MAAhB,KAA2ByU,EAAE,CAACjE,IAAH,CAAQxQ,MADnC,IAEAyU,EAAE,CAACjE,IAAH,CAAQ8U,KAAR,CAAc,UAAA9T,GAAG;AAAA,eAAI4T,SAAS,CAAC5T,GAAD,EAAMoT,KAAK,CAACzpB,IAAN,CAAWqV,IAAX,CAAgBrV,IAAtB,CAAb;AAAA,OAAjB,CAHF;;AAKF,SAAK0V,mBAAW,CAAC4B,KAAjB;AACE,UAAImS,KAAK,CAAC3U,EAAN,IAAYiT,wBAAgB,CAACqB,mBAAjC,EAAsD;AACpD,YAAMZ,KAAK,GAAGpK,SAAS,CAAC9E,EAAE,CAACtS,IAAJ,CAAvB;;AACA,aAAK,IAAI9B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGukB,KAAK,CAACzpB,IAAN,CAAWwoB,KAAX,CAAiB3jB,MAArC,EAA6CK,CAAC,EAA9C,EAAkD;AAChD,cAAMklB,aAAa,GAAGX,KAAK,CAACzpB,IAAN,CAAWwoB,KAAX,CAAiBtjB,CAAjB,CAAtB;AACA,cAAMzG,GAAG,GAAG2rB,aAAa,CAAC7oB,IAA1B;AACA,cAAM8U,GAAG,GAAGmS,KAAK,CAAC/pB,GAAD,CAAjB;;AAIA,cAAI4X,GAAJ,EAAS;AACP,gBAAI,CAAC4T,SAAS,CAAC5T,GAAD,EAAM+T,aAAa,CAACpqB,IAApB,CAAd,EAAyC;AACvC,qBAAO,KAAP;AACD;;AACD,mBAAOwoB,KAAK,CAAC/pB,GAAD,CAAZ;AACD,WALD,MAKO;AACL,mBAAO,KAAP;AACD;AACF;;AACD,eAAO,IAAP;AACD,OAnBD,MAmBO;AACL,eAAO,KAAP;AACD;;AACH;AACE,aAAO,KAAP;AAhFJ;AAkFD;;SAUe4rB,qBAAqBva,SAA8Bwa;AACjE,MAAMC,QAAQ,GAAGD,GAAG,CAACE,SAAJ,CAAczP,MAAd,CAAqB,UAAAjb,EAAE;AAAA,WAAIA,EAAE,CAACyB,IAAH,KAAYuO,OAAO,CAAChB,YAAR,CAAqBoF,OAArC;AAAA,GAAvB,CAAjB;;AACA,MAAIqW,QAAQ,CAAC1lB,MAAT,KAAoB,CAAxB,EAA2B;AACzB,QAAM4lB,OAAO,GAAGF,QAAQ,CAAC,CAAD,CAAxB;AACA,QAAMG,OAAO,GAAGD,OAAO,CAACT,IAAxB;;AAEA,QAAIla,OAAO,CAACf,YAAR,CAAqBlK,MAArB,KAAgC6lB,OAAO,CAAC7lB,MAA5C,EAAoD;AAClD,YAAM,IAAI7B,KAAJ,+BACwB0nB,OAAO,CAAC7lB,MADhC,kCACmEiL,OAAO,CAACf,YAAR,CAAqBlK,MADxF,CAAN;AAGD;;AAED,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4K,OAAO,CAACf,YAAR,CAAqBlK,MAAzC,EAAiDK,CAAC,EAAlD,EAAsD;AACpD,UAAMylB,UAAU,GAAG7a,OAAO,CAACf,YAAR,CAAqB7J,CAArB,CAAnB;AACA,UAAM0lB,MAAM,GAAGF,OAAO,CAACxlB,CAAD,CAAtB;;AAEA,UAAI,CAAC+kB,SAAS,CAACU,UAAD,EAAaC,MAAM,CAAC5qB,IAApB,CAAd,EAAyC;AACvC,YAAM6qB,MAAM,GAAG3lB,CAAC,GAAG,CAAnB;AACA,cAAM,IAAIlC,KAAJ,wBAEF8M,OAAO,CAAChB,YAAR,CAAqBoF,OAFnB,2BAGmB2W,MAHnB,uBAG2CnB,aAAa,CAC1DkB,MAAM,CAAC5qB,IADmD,CAHxD,cAKM4X,eAAe,CAAC+S,UAAD,CALrB,CAAN;AAOD;AACF;;AAED,WAAO,IAAP;AACD,GA3BD,MA2BO,IAAIJ,QAAQ,CAAC1lB,MAAT,KAAoB,CAAxB,EAA2B;AAChC,UAAM,IAAI7B,KAAJ,mDAA0D8M,OAAO,CAAChB,YAAR,CAAqBoF,OAA/E,CAAN;AACD,GAFM,MAEA;AACL,UAAM,IAAIlR,KAAJ,+DACwD8M,OAAO,CAAChB,YAAR,CAAqBoF,OAD7E,CAAN;AAGD;AACF;SAWe4W,UAAUngB,OAAe3K;AACvC,MAAM+qB,UAAU,GAAGrB,aAAa,CAAC1pB,IAAD,CAAhC;;AACA,MAAIgoB,qBAAqB,CAAChoB,IAAD,CAAzB,EAAiC;AAC/B,QAAIA,IAAI,KAAK,SAAb,EAAwB;AACtB,aAAOqY,MAAM,CAAC1N,KAAD,CAAb;AACD,KAFD,MAEO,IAAI3K,IAAI,KAAK,QAAb,EAAuB;AAC5B,aAAOgY,KAAK,CAACrN,KAAD,CAAZ;AACD,KAFM,MAEA,IAAI3K,IAAI,KAAK,MAAb,EAAqB;AAC1B,UAAI2K,KAAK,CAACsc,WAAN,OAAwB,MAA5B,EAAoC;AAClC,eAAOnP,MAAM,EAAb;AACD,OAFD,MAEO,IAAInN,KAAK,CAACsc,WAAN,OAAwB,OAA5B,EAAqC;AAC1C,eAAOlP,OAAO,EAAd;AACD,OAFM,MAEA;AACL,cAAM,IAAI/U,KAAJ,0BAAiC2H,KAAjC,CAAN;AACD;AACF,KARM,MAQA,IAAI3K,IAAI,KAAK,WAAb,EAA0B;AAC/B,UAAI2K,KAAK,CAAC8I,QAAN,CAAe,GAAf,CAAJ,EAAyB;AAAA,2BACS9I,KAAK,CAAC+I,KAAN,CAAY,GAAZ,CADT;AAAA,YAChBJ,OADgB;AAAA,YACPzE,YADO;;AAEvB,eAAOgH,mBAAmB,CAACvC,OAAD,EAAUzE,YAAV,CAA1B;AACD,OAHD,MAGO;AACL,eAAOiH,mBAAmB,CAACnL,KAAD,CAA1B;AACD;AACF,KAPM,MAOA;AACL,YAAM,IAAI3H,KAAJ,+DAAsE+nB,UAAtE,CAAN;AACD;AACF,GAvBD,MAuBO,IAAI9C,kBAAkB,CAACjoB,IAAD,CAAtB,EAA8B;AACnC,QAAMgrB,WAAW,GAAGxjB,MAAM,CAACC,IAAP,CAAYkD,KAAZ,EAAmBgF,UAAvC;;AACA,QAAIqb,WAAW,GAAGhrB,IAAI,CAAC6W,MAAL,CAAYhS,MAA9B,EAAsC;AACpC,YAAM,IAAI7B,KAAJ,qDAA4DhD,IAAI,CAAC6W,MAAL,CAAYhS,MAAxE,CAAN;AACD;;AACD,WAAO2T,kBAAkB,CAAC7N,KAAD,CAAzB;AACD,GANM,MAMA,IAAIyd,oBAAoB,CAACpoB,IAAD,CAAxB,EAAgC;AACrC,UAAM,IAAIgD,KAAJ,+DAAsE+nB,UAAtE,CAAN;AACD,GAFM,MAEA,IAAI1C,oBAAoB,CAACroB,IAAD,CAAxB,EAAgC;AACrC,UAAM,IAAIgD,KAAJ,+DAAsE+nB,UAAtE,CAAN;AACD,GAFM,MAEA,IAAIxC,iBAAiB,CAACvoB,IAAD,CAArB,EAA6B;AAClC,UAAM,IAAIgD,KAAJ,+DAAsE+nB,UAAtE,CAAN;AACD,GAFM,MAEA,IAAItC,gBAAgB,CAACzoB,IAAD,CAApB,EAA4B;AACjC,UAAM,IAAIgD,KAAJ,+DAAsE+nB,UAAtE,CAAN;AACD,GAFM,MAEA;AACL,UAAM,IAAI/nB,KAAJ,+DAAsE+nB,UAAtE,CAAN;AACD;AACF;;SCnYqBE,QAAtB;AAAA;AAAA;;;6DAAO,iBAAwB3X,OAAxB,EAAyC4X,SAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,cADD,GACkB,IAAIC,qBAAJ,EADlB;AAECC,YAAAA,GAFD,GAEOH,SAAO,GACfA,SAAO,CAACI,gBAAR,CAAyBhY,OAAzB,CADe,GAEf6X,cAAc,CAACG,gBAAf,CAAgChY,OAAhC,CAJC;AAAA;AAAA,mBAMkBgN,mBAAY,CAAC+K,GAAD,CAN9B;;AAAA;AAMClK,YAAAA,QAND;;AAAA,gBAOAA,QAAQ,CAACwI,EAPT;AAAA;AAAA;AAAA;;AAQC4B,YAAAA,GARD,GAQO,EARP;AAAA;AAAA;AAAA,mBAUWpK,QAAQ,CAACqK,IAAT,EAVX;;AAAA;AAUDD,YAAAA,GAVC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAYG,IAAIvoB,KAAJ,qCAC8Bme,QAAQ,CAACsK,MADvC,UACkDtK,QAAQ,CAACuK,UAD3D,6BAC6FL,GAD7F,wCACkIE,GADlI,QAZH;;AAAA;AAAA;AAAA,mBAgBiBpK,QAAQ,CAACwK,IAAT,EAhBjB;;AAAA;AAgBCxpB,YAAAA,MAhBD;AAAA,6CAiBE,IAAI6L,0BAAJ,CAAW7L,MAAM,CAACmgB,KAAlB,CAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SA4BesJ,gBAAtB;AAAA;AAAA;;;qEAAO,kBACLzE,WADK,EAEL+D,SAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAID/D,WAAW,CAACrX,OAAZ,CAAoBrB,WAApB,KAAoCjS,mBAAW,CAACkS,aAJ/C;AAAA;AAAA;AAAA;;AAAA,kBAKG,IAAI1L,KAAJ,oDAEFxG,mBAAW,CAACA,mBAAW,CAACkS,aAAb,CAFT,qCAG4BlS,mBAAW,CAAC2qB,WAAW,CAACrX,OAAZ,CAAoBrB,WAArB,CAHvC,CALH;;AAAA;AAYCod,YAAAA,cAZD,GAYkB;AACrBC,cAAAA,MAAM,EAAE;AADa,aAZlB;AAgBCC,YAAAA,YAhBD,GAgBgB;AACnB5qB,cAAAA,MAAM,EAAE,KADW;AAEnB6qB,cAAAA,OAAO,EAAEH;AAFU,aAhBhB;AAqBCV,YAAAA,cArBD,GAqBkB,IAAIC,qBAAJ,EArBlB;AAsBCC,YAAAA,GAtBD,GAsBOH,SAAO,GACfA,SAAO,CAACe,4BAAR,EADe,GAEfd,cAAc,CAACc,4BAAf,EAxBC;AAAA;AAAA,mBA0BkB3L,mBAAY,CAAC+K,GAAD,EAAMU,YAAN,CA1B9B;;AAAA;AA0BC5K,YAAAA,QA1BD;;AAAA,gBA2BAA,QAAQ,CAACwI,EA3BT;AAAA;AAAA;AAAA;;AA4BC4B,YAAAA,GA5BD,GA4BO,EA5BP;AAAA;AAAA;AAAA,mBA8BWpK,QAAQ,CAACqK,IAAT,EA9BX;;AAAA;AA8BDD,YAAAA,GA9BC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAgCG,IAAIvoB,KAAJ,iDAC0Cme,QAAQ,CAACsK,MADnD,UAC8DtK,QAAQ,CAACuK,UADvE,6BACyGL,GADzG,wCAC8IE,GAD9I,QAhCH;;AAAA;AAAA;AAAA,mBAoCuBpK,QAAQ,CAACqK,IAAT,EApCvB;;AAAA;AAoCCU,YAAAA,aApCD;AAqCCC,YAAAA,OArCD,GAqCW,IAAIne,0BAAJ,CAAWmZ,WAAW,CAAC9B,SAAZ,GAAwB1V,UAAnC,CArCX;AAsCCyc,YAAAA,OAtCD,GAsCW,IAAIpe,0BAAJ,CAAWke,aAAX,CAtCX;AAAA,8CAuCEE,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAvCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SA2DeG,oBAAtB;AAAA;AAAA;;;yEAAO,kBACLnF,WADK,EAEL+D,OAFK,EAGLqB,UAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKCC,YAAAA,KALD,GAKSrF,WAAW,CAAC9B,SAAZ,EALT;AAMCgG,YAAAA,GAND,GAMOH,OAAO,CAACuB,kBAAR,EANP;AAAA,8CAQEC,uBAAuB,CAACF,KAAD,EAAQnB,GAAR,EAAakB,UAAb,CARzB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SAmBeG,uBAAtB;AAAA;AAAA;;;4EAAO,kBACLF,KADK,EAELnB,GAFK,EAGLkB,UAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKChiB,YAAAA,OALD,GAKW;AACdpJ,cAAAA,MAAM,EAAE,MADM;AAEd6qB,cAAAA,OAAO,EAAE;AAAE,gCAAgBO,UAAU,GAAG,kBAAH,GAAwB;AAApD,eAFK;AAGdI,cAAAA,IAAI,EAAEJ,UAAU,GACZ9Z,IAAI,CAACC,SAAL,CAAe;AACb0T,gBAAAA,EAAE,EAAEoG,KAAK,CAAC3oB,QAAN,CAAe,KAAf,CADS;AAEb0oB,gBAAAA,UAAU,EAAEA,UAAU,CAAC1oB,QAAX,CAAoB,KAApB;AAFC,eAAf,CADY,GAKZ2oB;AARU,aALX;AAAA;AAAA,mBAgBkBlM,mBAAY,CAAC+K,GAAD,EAAM9gB,OAAN,CAhB9B;;AAAA;AAgBC4W,YAAAA,QAhBD;;AAAA,gBAiBAA,QAAQ,CAACwI,EAjBT;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAmBaxI,QAAQ,CAACwK,IAAT,EAnBb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAqBK3oB,KAAK,uCAAsC,aAAY+E,OAAlD,CArBV;;AAAA;AAAA;AAAA,mBAyBcoZ,QAAQ,CAACqK,IAAT,EAzBd;;AAAA;AAyBCA,YAAAA,IAzBD;AAAA;AAAA,8CA2BI/Y,IAAI,CAACma,KAAL,CAAWpB,IAAX,CA3BJ;;AAAA;AAAA;AAAA;AAAA,8CA6BIA,IA7BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SA0CeqB,MAAtB;AAAA;AAAA;;;2DAAO,kBACLvZ,OADK,EAELzE,YAFK,EAGLqc,OAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKC3gB,YAAAA,OALD,GAKW;AACdpJ,cAAAA,MAAM,EAAE;AADM,aALX;AASCkqB,YAAAA,GATD,GASOH,OAAO,CAAC4B,YAAR,CAAqBxZ,OAArB,EAA8BzE,YAA9B,CATP;AAAA;AAAA,mBAWkByR,mBAAY,CAAC+K,GAAD,EAAM9gB,OAAN,CAX9B;;AAAA;AAWC4W,YAAAA,QAXD;;AAAA,gBAYAA,QAAQ,CAACwI,EAZT;AAAA;AAAA;AAAA;;AAaC4B,YAAAA,GAbD,GAaO,EAbP;AAAA;AAAA;AAAA,mBAeWpK,QAAQ,CAACqK,IAAT,EAfX;;AAAA;AAeDD,YAAAA,GAfC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAiBG,IAAIvoB,KAAJ,iDACyC6L,YADzC,sBACqEyE,OADrE,mBAC0F6N,QAAQ,CAACsK,MADnG,UAC8GtK,QAAQ,CAACuK,UADvH,6BACyJL,GADzJ,wCAC8LE,GAD9L,QAjBH;;AAAA;AAAA,2BAsBE9Y,IAtBF;AAAA;AAAA,mBAsBmB0O,QAAQ,CAACqK,IAAT,EAtBnB;;AAAA;AAAA;AAAA,2DAsBOoB,KAtBP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SA0FeG,4BAAtB;AAAA;AAAA;;;iFAAO,kBACLC,SADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCC,YAAAA,cAHD,GAGkB;AACrB1K,cAAAA,GAAG,EAAE,IAAIvU,0BAAJ,CAAW,CAAX,CADgB;AAErBsU,cAAAA,KAAK,EAAE,IAAItU,0BAAJ,CAAW,CAAX,CAFc;AAGrBkd,cAAAA,OAAO,EAAE,IAAIE,qBAAJ,EAHY;AAIrBtF,cAAAA,UAAU,EAAErpB,kBAAU,CAACypB,GAJF;AAKrBL,cAAAA,iBAAiB,EAAEjpB,yBAAiB,CAACopB,IALhB;AAMrB3X,cAAAA,IAAI,EAAE,EANe;AAOrB6e,cAAAA,SAAS,EAAE;AAPU,aAHlB;AAaC3iB,YAAAA,OAbD,GAaW7M,MAAM,CAACghB,MAAP,CAAcuO,cAAd,EAA8BD,SAA9B,CAbX;AAeCld,YAAAA,OAfD,GAeW3B,0BAA0B,CAAC5D,OAAO,CAAC6D,SAAT,EAAoB7D,OAAO,CAACiC,MAA5B,EAAoCjC,OAAO,CAAC8D,IAA5C,CAfrC;AAiBD8e,YAAAA,aAjBC,GAiBe,IAjBf;AAkBD5I,YAAAA,iBAlBC,GAkBmB,IAlBnB;;AAoBL,gBAAI,eAAeha,OAAnB,EAA4B;AAE1Bga,cAAAA,iBAAiB,GAAGlC,gCAAgC,CAClDtlB,uBAAe,CAACqK,cADkC,EAElDmD,OAAO,CAACtD,SAF0C,EAGlDsD,OAAO,CAAC+X,KAH0C,EAIlD/X,OAAO,CAACgY,GAJ0C,CAApD;AAMD,aARD,MAQO;AAELgC,cAAAA,iBAAiB,GAAG7B,+BAA+B,CACjD3lB,uBAAe,CAAC4V,aADiC,EAEjDpI,OAAO,CAAC6iB,aAFyC,EAGjD7iB,OAAO,CAAC4I,UAHyC,EAIjD5I,OAAO,CAAC+X,KAJyC,EAKjD/X,OAAO,CAACgY,GALyC,CAAnD;AAOD;;AAED,gBAAIhY,OAAO,CAAC2iB,SAAZ,EAAuB;AACrBC,cAAAA,aAAa,GAAG,IAAI5H,sBAAJ,CAA2BhB,iBAA3B,CAAhB;AACD,aAFD,MAEO;AACL4I,cAAAA,aAAa,GAAG,IAAI7H,qBAAJ,CAA0Bf,iBAA1B,CAAhB;AACD;;AAEKqB,YAAAA,cA7CD,GA6CmC,EA7CnC;;AA8CL,gBAAIrb,OAAO,CAACqb,cAAR,IAA0Brb,OAAO,CAACqb,cAAR,CAAuB/gB,MAAvB,GAAgC,CAA9D,EAAiE;AAC/D0F,cAAAA,OAAO,CAACqb,cAAR,CAAuB1kB,OAAvB,CAA+B,UAAAmM,aAAa;AAC1CuY,gBAAAA,cAAc,CAACthB,IAAf,CAAoB+I,aAApB;AACD,eAFD;AAGD;;AAEKggB,YAAAA,gBApDD,GAoDoBlY,YAAY,CAACyQ,cAAD,CApDhC;AAqDCuB,YAAAA,WArDD,GAqDe,IAAIzB,iBAAJ,CAClBnb,OAAO,CAAC2gB,OAAR,CAAgBrf,OADE,EAElBshB,aAFkB,EAGlBrd,OAHkB,EAIlBud,gBAJkB,EAKlB9iB,OAAO,CAACsb,iBALU,EAMlBoH,cAAc,CAACnH,UANG,EAOlBvb,OAAO,CAAC2gB,OAAR,CAAgBnF,OAPE,CArDf;;AAAA,gBA+DAiH,SAAS,CAACzK,GA/DV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgEiBqJ,gBAAgB,CAACzE,WAAD,EAAc5c,OAAO,CAAC2gB,OAAtB,CAhEjC;;AAAA;AAgEGoC,YAAAA,KAhEH;AAiEHnG,YAAAA,WAAW,CAACpC,MAAZ,CAAmBuI,KAAnB;;AAjEG;AAAA,gBAoEAN,SAAS,CAAC1K,KApEV;AAAA;AAAA;AAAA;;AAqEGiL,YAAAA,cArEH,GAsEDhjB,OAAO,CAAC2gB,OAAR,CAAgBrf,OAAhB,KAA4BnP,0BAAkB,CAACZ,OAA/C,GACIkB,sBAAc,CAACkV,gBADnB,GAEIlV,sBAAc,CAACwV,gBAxElB;AAyEGgb,YAAAA,aAzEH,GAyEmB1hB,mBAAU,CAACyhB,cAAD,EAAiBpG,WAAW,CAACxB,IAAZ,CAAiBpB,iBAAjB,CAAoC/B,MAArD,CAzE7B;AAAA;AAAA,mBA0EmByI,QAAQ,CAACuC,aAAD,EAAgBjjB,OAAO,CAAC2gB,OAAxB,CA1E3B;;AAAA;AA0EGuC,YAAAA,OA1EH;AA2EHtG,YAAAA,WAAW,CAAClC,QAAZ,CAAqBwI,OAArB;;AA3EG;AAAA,8CA8EEtG,WA9EF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SA0FeuG,oBAAtB;AAAA;AAAA;;;yEAAO,kBACLV,SADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGD,eAAeA,SAHd;AAAA;AAAA;AAAA;;AAIG/lB,YAAAA,SAJH,GAIeiC,iBAAiB,CAACwC,YAAY,CAAClC,sBAAsB,CAACwjB,SAAS,CAACW,SAAX,CAAvB,CAAb,CAJhC;AAKGpjB,YAAAA,OALH,GAKa+T,IAAI,CAAC0O,SAAD,EAAY,WAAZ,CALjB;AAAA;AAAA,mBAMuBD,4BAA4B;AAAG9lB,cAAAA,SAAS,EAATA;AAAH,eAAiBsD,OAAjB,EANnD;;AAAA;AAMG4c,YAAAA,WANH;AAQG5d,YAAAA,OARH,GAQaC,sBAAsB,CAACwjB,SAAS,CAACW,SAAX,CARnC;AASGnL,YAAAA,MATH,GASY,IAAI0E,iBAAJ,CAAsBC,WAAtB,CATZ;AAUH3E,YAAAA,MAAM,CAACiF,UAAP,CAAkBle,OAAlB;AAVG,8CAYI4d,WAZJ;;AAAA;AAcG5c,YAAAA,QAdH,GAca+T,IAAI,CAAC0O,SAAD,EAAY,YAAZ,CAdjB;AAAA;AAAA,mBAeuBD,4BAA4B,CAACxiB,QAAD,CAfnD;;AAAA;AAeG4c,YAAAA,YAfH;AAiBG3E,YAAAA,OAjBH,GAiBY,IAAI0E,iBAAJ,CAAsBC,YAAtB,CAjBZ;AAkBCjH,YAAAA,OAlBD,GAkBW8M,SAAS,CAAC7Z,UAlBrB;;AAAA;AAAA,kBAmBQ1U,GAnBR;AAoBD,kBAAMoI,MAAM,GAAGC,iBAAiB,CAACrI,GAAD,CAAhC;AACAyhB,cAAAA,OAAO,GAAGA,OAAO,CAACnF,MAAR,CAAe,UAAA6S,EAAE;AAAA,uBAAIA,EAAE,KAAK/mB,MAAM,CAACG,IAAP,CAAYnD,QAAZ,CAAqB,KAArB,CAAX;AAAA,eAAjB,CAAV;;AACA2e,cAAAA,OAAM,CAACiF,UAAP,CAAkBje,sBAAsB,CAAC/K,GAAD,CAAxC;AAtBC;;AAmBH,6DAAkBuuB,SAAS,CAACa,UAA5B,iCAAwC;AAAA;AAIvC;;AAED,8DAAkB3N,OAAlB,mCAA2B;AAAhBzhB,cAAAA,GAAgB;;AACzB+jB,cAAAA,OAAM,CAACmF,YAAP,CAAoB5e,mBAAmB,CAACvB,MAAM,CAACC,IAAP,CAAYhJ,GAAZ,EAAiB,KAAjB,CAAD,CAAvC;AACD;;AA3BE,8CA6BI0oB,YA7BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SAsEe2G,sBAAtB;AAAA;AAAA;;;2EAAO,kBACL3G,WADK,EAEL+D,SAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAID/D,WAAW,CAACrX,OAAZ,CAAoBrB,WAApB,KAAoCjS,mBAAW,CAAC8S,aAJ/C;AAAA;AAAA;AAAA;;AAAA,kBAKG,IAAItM,KAAJ,wDAEFxG,mBAAW,CAACA,mBAAW,CAAC8S,aAAb,CAFT,qCAG4B9S,mBAAW,CAAC2qB,WAAW,CAACrX,OAAZ,CAAoBrB,WAArB,CAHvC,CALH;;AAAA;AAYCod,YAAAA,cAZD,GAYkB;AACrBC,cAAAA,MAAM,EAAE;AADa,aAZlB;AAgBCC,YAAAA,YAhBD,GAgBgB;AACnB5qB,cAAAA,MAAM,EAAE,KADW;AAEnB6qB,cAAAA,OAAO,EAAEH;AAFU,aAhBhB;AAuBCV,YAAAA,cAvBD,GAuBkB,IAAIC,qBAAJ,EAvBlB;AAwBCC,YAAAA,GAxBD,GAwBOH,SAAO,GACfA,SAAO,CAACe,4BAAR,EADe,GAEfd,cAAc,CAACc,4BAAf,EA1BC;AAAA;AAAA,mBA4BkB3L,mBAAY,CAAC+K,GAAD,EAAMU,YAAN,CA5B9B;;AAAA;AA4BC5K,YAAAA,QA5BD;;AAAA,gBA6BAA,QAAQ,CAACwI,EA7BT;AAAA;AAAA;AAAA;;AA8BC4B,YAAAA,GA9BD,GA8BO,EA9BP;AAAA;AAAA;AAAA,mBAgCWpK,QAAQ,CAACqK,IAAT,EAhCX;;AAAA;AAgCDD,YAAAA,GAhCC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAkCG,IAAIvoB,KAAJ,qDAC8Cme,QAAQ,CAACsK,MADvD,UACkEtK,QAAQ,CAACuK,UAD3E,6BAC6GL,GAD7G,wCACkJE,GADlJ,QAlCH;;AAAA;AAAA;AAAA,mBAsCuBpK,QAAQ,CAACqK,IAAT,EAtCvB;;AAAA;AAsCCU,YAAAA,aAtCD;AAuCCC,YAAAA,OAvCD,GAuCW,IAAIne,0BAAJ,CAAWmZ,WAAW,CAAC9B,SAAZ,GAAwB1V,UAAnC,CAvCX;AAwCCyc,YAAAA,OAxCD,GAwCW,IAAIpe,0BAAJ,CAAWke,aAAX,CAxCX;AAAA,8CAyCEE,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAzCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SAqDe4B,kBAAtB;AAAA;AAAA;;;uEAAO,kBACLf,SADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCC,YAAAA,cAHD,GAGkB;AACrB1K,cAAAA,GAAG,EAAE,IAAIvU,0BAAJ,CAAW,CAAX,CADgB;AAErBsU,cAAAA,KAAK,EAAE,IAAItU,0BAAJ,CAAW,CAAX,CAFc;AAGrBkd,cAAAA,OAAO,EAAE,IAAIE,qBAAJ,EAHY;AAIrBtF,cAAAA,UAAU,EAAErpB,kBAAU,CAACypB,GAJF;AAKrBL,cAAAA,iBAAiB,EAAEjpB,yBAAiB,CAACopB,IALhB;AAMrBkH,cAAAA,SAAS,EAAE;AANU,aAHlB;AAYC3iB,YAAAA,OAZD,GAYW7M,MAAM,CAACghB,MAAP,CAAcuO,cAAd,EAA8BD,SAA9B,CAZX;AAcCld,YAAAA,OAdD,GAcWX,0BAA0B,CAAC5E,OAAO,CAACsE,YAAT,EAAuBtE,OAAO,CAAC6E,QAA/B,CAdrC;AAgBC4e,YAAAA,eAhBD,GAgBmBjxB,uBAAe,CAACqK,cAhBnC;AAiBCmC,YAAAA,OAjBD,GAiBWC,sBAAsB,CAACe,OAAO,CAACojB,SAAT,CAjBjC;AAkBC9mB,YAAAA,MAlBD,GAkBU6E,YAAY,CAACnC,OAAD,CAlBtB;AAoBD4jB,YAAAA,aApBC,GAoBe,IApBf;AAsBC5I,YAAAA,iBAtBD,GAsBqBlC,gCAAgC,CACxD2L,eADwD,EAExD9kB,iBAAiB,CAACrC,MAAD,CAFuC,EAGxD0D,OAAO,CAAC+X,KAHgD,EAIxD/X,OAAO,CAACgY,GAJgD,CAtBrD;;AA6BL,gBAAIhY,OAAO,CAAC2iB,SAAZ,EAAuB;AACrBC,cAAAA,aAAa,GAAG,IAAI5H,sBAAJ,CAA2BhB,iBAA3B,CAAhB;AACD,aAFD,MAEO;AACL4I,cAAAA,aAAa,GAAG,IAAI7H,qBAAJ,CAA0Bf,iBAA1B,CAAhB;AACD;;AAEKqB,YAAAA,cAnCD,GAmCmC,EAnCnC;;AAoCL,gBAAIrb,OAAO,CAACqb,cAAR,IAA0Brb,OAAO,CAACqb,cAAR,CAAuB/gB,MAAvB,GAAgC,CAA9D,EAAiE;AAC/D0F,cAAAA,OAAO,CAACqb,cAAR,CAAuB1kB,OAAvB,CAA+B,UAAAmM,aAAa;AAC1CuY,gBAAAA,cAAc,CAACthB,IAAf,CAAoB+I,aAApB;AACD,eAFD;AAGD;;AAEKggB,YAAAA,gBA1CD,GA0CoBlY,YAAY,CAACyQ,cAAD,CA1ChC;AA2CCuB,YAAAA,WA3CD,GA2Ce,IAAIzB,iBAAJ,CAClBnb,OAAO,CAAC2gB,OAAR,CAAgBrf,OADE,EAElBshB,aAFkB,EAGlBrd,OAHkB,EAIlBud,gBAJkB,EAKlB9iB,OAAO,CAACsb,iBALU,EAMlBtb,OAAO,CAACub,UANU,EAOlBvb,OAAO,CAAC2gB,OAAR,CAAgBnF,OAPE,CA3Cf;;AAAA,gBAqDAiH,SAAS,CAACzK,GArDV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAsDiBuL,sBAAsB,CAAC3G,WAAD,EAAc5c,OAAO,CAAC2gB,OAAtB,CAtDvC;;AAAA;AAsDGoC,YAAAA,KAtDH;AAuDHnG,YAAAA,WAAW,CAACpC,MAAZ,CAAmBuI,KAAnB;;AAvDG;AAAA,gBA0DAN,SAAS,CAAC1K,KA1DV;AAAA;AAAA;AAAA;;AA2DGiL,YAAAA,cA3DH,GA4DDhjB,OAAO,CAAC2gB,OAAR,CAAgBrf,OAAhB,KAA4BnP,0BAAkB,CAACZ,OAA/C,GACIkB,sBAAc,CAACkV,gBADnB,GAEIlV,sBAAc,CAACwV,gBA9DlB;AA+DGgb,YAAAA,aA/DH,GA+DmB5hB,kBAAkB,CAAC2hB,cAAD,EAAiB1mB,MAAjB,CA/DrC;AAAA;AAAA,mBAgEmBokB,QAAQ,CAACuC,aAAD,EAAgBjjB,OAAO,CAAC2gB,OAAxB,CAhE3B;;AAAA;AAgEGuC,YAAAA,OAhEH;AAiEHtG,YAAAA,WAAW,CAAClC,QAAZ,CAAqBwI,OAArB;;AAjEG;AAoEL,gBAAIljB,OAAO,CAACojB,SAAZ,EAAuB;AACfnL,cAAAA,MADe,GACN,IAAI0E,iBAAJ,CAAsBC,WAAtB,CADM;AAErB3E,cAAAA,MAAM,CAACiF,UAAP,CAAkBle,OAAlB;AACD;;AAvEI,8CAyEE4d,WAzEF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SAwIe8G,4BAAtB;AAAA;AAAA;;;iFAAO,mBACL9G,WADK,EAEL+D,SAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAID/D,WAAW,CAACrX,OAAZ,CAAoBrB,WAApB,KAAoCjS,mBAAW,CAAC0S,YAJ/C;AAAA;AAAA;AAAA;;AAAA,kBAKG,IAAIlM,KAAJ,sDAEFxG,mBAAW,CAACA,mBAAW,CAAC0S,YAAb,CAFT,qCAG4B1S,mBAAW,CAAC2qB,WAAW,CAACrX,OAAZ,CAAoBrB,WAArB,CAHvC,CALH;;AAAA;AAYCod,YAAAA,cAZD,GAYkB;AACrBC,cAAAA,MAAM,EAAE;AADa,aAZlB;AAgBCC,YAAAA,YAhBD,GAgBgB;AACnB5qB,cAAAA,MAAM,EAAE,KADW;AAEnB6qB,cAAAA,OAAO,EAAEH;AAFU,aAhBhB;AAuBCV,YAAAA,cAvBD,GAuBkB,IAAIC,qBAAJ,EAvBlB;AAwBCC,YAAAA,GAxBD,GAwBOH,SAAO,GACfA,SAAO,CAACe,4BAAR,EADe,GAEfd,cAAc,CAACc,4BAAf,EA1BC;AAAA;AAAA,mBA4BkB3L,mBAAY,CAAC+K,GAAD,EAAMU,YAAN,CA5B9B;;AAAA;AA4BC5K,YAAAA,QA5BD;;AAAA,gBA6BAA,QAAQ,CAACwI,EA7BT;AAAA;AAAA;AAAA;;AA8BC4B,YAAAA,GA9BD,GA8BO,EA9BP;AAAA;AAAA;AAAA,mBAgCWpK,QAAQ,CAACqK,IAAT,EAhCX;;AAAA;AAgCDD,YAAAA,GAhCC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAkCG,IAAIvoB,KAAJ,mDAC4Cme,QAAQ,CAACsK,MADrD,UACgEtK,QAAQ,CAACuK,UADzE,6BAC2GL,GAD3G,wCACgJE,GADhJ,QAlCH;;AAAA;AAAA;AAAA,mBAsCuBpK,QAAQ,CAACqK,IAAT,EAtCvB;;AAAA;AAsCCU,YAAAA,aAtCD;AAuCCC,YAAAA,OAvCD,GAuCW,IAAIne,0BAAJ,CAAWmZ,WAAW,CAAC9B,SAAZ,GAAwB1V,UAAnC,CAvCX;AAwCCyc,YAAAA,OAxCD,GAwCW,IAAIpe,0BAAJ,CAAWke,aAAX,CAxCX;AAAA,+CAyCEE,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAzCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SAmDe+B,wBAAtB;AAAA;AAAA;;;6EAAO,mBACLlB,SADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCC,YAAAA,cAHD,GAGkB;AACrB1K,cAAAA,GAAG,EAAE,IAAIvU,0BAAJ,CAAW,CAAX,CADgB;AAErBsU,cAAAA,KAAK,EAAE,IAAItU,0BAAJ,CAAW,CAAX,CAFc;AAGrBkd,cAAAA,OAAO,EAAE,IAAIE,qBAAJ,EAHY;AAIrBtF,cAAAA,UAAU,EAAErpB,kBAAU,CAACypB,GAJF;AAKrBL,cAAAA,iBAAiB,EAAEjpB,yBAAiB,CAACopB,IALhB;AAMrBkH,cAAAA,SAAS,EAAE;AANU,aAHlB;AAYC3iB,YAAAA,OAZD,GAYW7M,MAAM,CAACghB,MAAP,CAAcuO,cAAd,EAA8BD,SAA9B,CAZX;AAcCld,YAAAA,OAdD,GAcWnB,yBAAyB,CACvCpE,OAAO,CAACqE,eAD+B,EAEvCrE,OAAO,CAACsE,YAF+B,EAGvCtE,OAAO,CAACuE,YAH+B,EAIvCvE,OAAO,CAACwE,YAJ+B,CAdpC;;AAAA,kBAqBDxE,OArBC,oBAqBDA,OAAO,CAAE4jB,eArBR;AAAA;AAAA;AAAA;;AAAA,kBAuBC,OAAO5jB,OAAO,CAAC4jB,eAAf,KAAmC,SAvBpC;AAAA;AAAA;AAAA;;AAAA,kBAwBG5jB,OAxBH,oBAwBGA,OAAO,CAAE2gB,OAxBZ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAyBa2B,MAAM,CAACtiB,OAAO,CAACqE,eAAT,EAA0BrE,OAAO,CAACsE,YAAlC,EAAgDtE,OAAO,CAAC2gB,OAAxD,CAzBnB;;AAAA;AAyBCZ,YAAAA,GAzBD;AAAA;AAAA;;AAAA;AAAA,kBA2BO,IAAItnB,KAAJ,CAAU,+DAAV,CA3BP;;AAAA;AAAA;AAAA;;AAAA;AA8BDsnB,YAAAA,GAAG,GAAG/f,OAAO,CAAC4jB,eAAd;;AA9BC;AAiCH9D,YAAAA,oBAAoB,CAACva,OAAD,EAAUwa,GAAV,CAApB;;AAjCG;AAoCD/F,YAAAA,iBApCC,GAoCmB,IApCnB;AAqCD4I,YAAAA,aArCC,GAqCe,IArCf;;AAuCL,gBAAI,eAAe5iB,OAAnB,EAA4B;AAE1Bga,cAAAA,iBAAiB,GAAGlC,gCAAgC,CAClDtlB,uBAAe,CAACqK,cADkC,EAElDmD,OAAO,CAACtD,SAF0C,EAGlDsD,OAAO,CAAC+X,KAH0C,EAIlD/X,OAAO,CAACgY,GAJ0C,CAApD;AAMD,aARD,MAQO;AAELgC,cAAAA,iBAAiB,GAAG7B,+BAA+B,CACjD3lB,uBAAe,CAAC4V,aADiC,EAEjDpI,OAAO,CAAC6iB,aAFyC,EAGjD7iB,OAAO,CAAC4I,UAHyC,EAIjD5I,OAAO,CAAC+X,KAJyC,EAKjD/X,OAAO,CAACgY,GALyC,CAAnD;AAOD;;AAED,gBAAIhY,OAAO,CAAC2iB,SAAZ,EAAuB;AACrBC,cAAAA,aAAa,GAAG,IAAI5H,sBAAJ,CAA2BhB,iBAA3B,CAAhB;AACD,aAFD,MAEO;AACL4I,cAAAA,aAAa,GAAG,IAAI7H,qBAAJ,CAA0Bf,iBAA1B,CAAhB;AACD;;AAEKqB,YAAAA,cAhED,GAgEmC,EAhEnC;;AAiEL,gBAAIrb,OAAO,CAACqb,cAAR,IAA0Brb,OAAO,CAACqb,cAAR,CAAuB/gB,MAAvB,GAAgC,CAA9D,EAAiE;AAC/D0F,cAAAA,OAAO,CAACqb,cAAR,CAAuB1kB,OAAvB,CAA+B,UAAAmM,aAAa;AAC1CuY,gBAAAA,cAAc,CAACthB,IAAf,CAAoB+I,aAApB;AACD,eAFD;AAGD;;AAEKggB,YAAAA,gBAvED,GAuEoBlY,YAAY,CAACyQ,cAAD,CAvEhC;AAwECuB,YAAAA,WAxED,GAwEe,IAAIzB,iBAAJ,CAClBnb,OAAO,CAAC2gB,OAAR,CAAgBrf,OADE,EAElBshB,aAFkB,EAGlBrd,OAHkB,EAIlBud,gBAJkB,EAKlB9iB,OAAO,CAACsb,iBALU,EAMlBtb,OAAO,CAACub,UANU,EAOlBvb,OAAO,CAAC2gB,OAAR,CAAgBnF,OAPE,CAxEf;;AAAA,gBAkFAiH,SAAS,CAACzK,GAlFV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAmFiB0L,4BAA4B,CAAC9G,WAAD,EAAc5c,OAAO,CAAC2gB,OAAtB,CAnF7C;;AAAA;AAmFGoC,YAAAA,KAnFH;AAoFHnG,YAAAA,WAAW,CAACpC,MAAZ,CAAmBuI,KAAnB;;AApFG;AAAA,gBAuFAN,SAAS,CAAC1K,KAvFV;AAAA;AAAA;AAAA;;AAwFGiL,YAAAA,cAxFH,GAyFDhjB,OAAO,CAAC2gB,OAAR,CAAgBrf,OAAhB,KAA4BnP,0BAAkB,CAACZ,OAA/C,GACIkB,sBAAc,CAACkV,gBADnB,GAEIlV,sBAAc,CAACwV,gBA3FlB;AA4FGgb,YAAAA,aA5FH,GA4FmB1hB,mBAAU,CAACyhB,cAAD,EAAiBpG,WAAW,CAACxB,IAAZ,CAAiBpB,iBAAjB,CAAoC/B,MAArD,CA5F7B;AAAA;AAAA,mBA6FmByI,QAAQ,CAACuC,aAAD,EAAgBjjB,OAAO,CAAC2gB,OAAxB,CA7F3B;;AAAA;AA6FGuC,YAAAA,OA7FH;AA8FHtG,YAAAA,WAAW,CAAClC,QAAZ,CAAqBwI,OAArB;;AA9FG;AAAA,+CAiGEtG,WAjGF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SA6GeiH,gBAAtB;AAAA;AAAA;;;qEAAO,mBACLpB,SADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGD,eAAeA,SAHd;AAAA;AAAA;AAAA;;AAIG/lB,YAAAA,SAJH,GAIeiC,iBAAiB,CAACwC,YAAY,CAAClC,sBAAsB,CAACwjB,SAAS,CAACW,SAAX,CAAvB,CAAb,CAJhC;AAKGpjB,YAAAA,OALH,GAKa+T,IAAI,CAAC0O,SAAD,EAAY,WAAZ,CALjB;AAAA;AAAA,mBAMuBkB,wBAAwB;AAAGjnB,cAAAA,SAAS,EAATA;AAAH,eAAiBsD,OAAjB,EAN/C;;AAAA;AAMG4c,YAAAA,WANH;AAQG5d,YAAAA,OARH,GAQaC,sBAAsB,CAACwjB,SAAS,CAACW,SAAX,CARnC;AASGnL,YAAAA,MATH,GASY,IAAI0E,iBAAJ,CAAsBC,WAAtB,CATZ;AAUH3E,YAAAA,MAAM,CAACiF,UAAP,CAAkBle,OAAlB;AAVG,+CAYI4d,WAZJ;;AAAA;AAcG5c,YAAAA,SAdH,GAca+T,IAAI,CAAC0O,SAAD,EAAY,YAAZ,CAdjB;AAAA;AAAA,mBAeuBkB,wBAAwB,CAAC3jB,SAAD,CAf/C;;AAAA;AAeG4c,YAAAA,aAfH;AAiBG3E,YAAAA,QAjBH,GAiBY,IAAI0E,iBAAJ,CAAsBC,aAAtB,CAjBZ;AAkBCjH,YAAAA,QAlBD,GAkBW8M,SAAS,CAAC7Z,UAlBrB;;AAAA;AAAA,kBAmBQ1U,GAnBR;AAoBD,kBAAMoI,MAAM,GAAGC,iBAAiB,CAACrI,GAAD,CAAhC;AACAyhB,cAAAA,QAAO,GAAGA,QAAO,CAACnF,MAAR,CAAe,UAAA6S,EAAE;AAAA,uBAAIA,EAAE,KAAK/mB,MAAM,CAACG,IAAP,CAAYnD,QAAZ,CAAqB,KAArB,CAAX;AAAA,eAAjB,CAAV;;AACA2e,cAAAA,QAAM,CAACiF,UAAP,CAAkBje,sBAAsB,CAAC/K,GAAD,CAAxC;AAtBC;;AAmBH,8DAAkBuuB,SAAS,CAACa,UAA5B,mCAAwC;AAAA;AAIvC;;AAED,8DAAkB3N,QAAlB,mCAA2B;AAAhBzhB,cAAAA,GAAgB;;AACzB+jB,cAAAA,QAAM,CAACmF,YAAP,CAAoB5e,mBAAmB,CAACvB,MAAM,CAACC,IAAP,CAAYhJ,GAAZ,EAAiB,KAAjB,CAAD,CAAvC;AACD;;AA3BE,+CA6BI0oB,aA7BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SA4CSkH,6BACd/a,SACA/G,eACAC;AAEA,SAAOH,sBAAsB,CAACuH,uBAAuB,CAACN,OAAD,CAAxB,EAAmC/G,aAAnC,EAAkDC,MAAlD,CAA7B;AACD;SAce8hB,6BACdhb,SACAzE,cACAtC,eACAC;AAEA,SAAOH,sBAAsB,CAC3BsH,uBAAuB,CAACL,OAAD,EAAUzE,YAAV,CADI,EAE3BtC,aAF2B,EAG3BC,MAH2B,CAA7B;AAKD;SAce+hB,kCACdjb,SACA/G,eACAC,QACAM;AAEA,SAAOD,2BAA2B,CAChC+G,uBAAuB,CAACN,OAAD,CADS,EAEhC/G,aAFgC,EAGhCC,MAHgC,EAIhCM,SAJgC,CAAlC;AAMD;SAee0hB,kCACdlb,SACAzE,cACAtC,eACAC,QACAM;AAEA,SAAOD,2BAA2B,CAChC8G,uBAAuB,CAACL,OAAD,EAAUzE,YAAV,CADS,EAEhCtC,aAFgC,EAGhCC,MAHgC,EAIhCM,SAJgC,CAAlC;AAMD;SAce2hB,qCACdnb,SACA/G,eACAO,WACAI;AAEA,SAAOD,8BAA8B,CACnC2G,uBAAuB,CAACN,OAAD,CADY,EAEnC/G,aAFmC,EAGnCO,SAHmC,EAInCI,SAJmC,CAArC;AAMD;SAeewhB,qCACdpb,SACAzE,cACAtC,eACAO,WACAI;AAEA,SAAOD,8BAA8B,CACnC0G,uBAAuB,CAACL,OAAD,EAAUzE,YAAV,CADY,EAEnCtC,aAFmC,EAGnCO,SAHmC,EAInCI,SAJmC,CAArC;AAMD;SA+BqByhB,oBAAtB;AAAA;AAAA;;;yEAAO,mBACLC,uBADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAGC3B,YAAAA,cAHD,GAGkB;AACrB/B,cAAAA,OAAO,EAAE,IAAIE,qBAAJ;AADY,aAHlB;AAOC7gB,YAAAA,OAPD,GAOW7M,MAAM,CAACghB,MAAP,CAAcuO,cAAd,EAA8B2B,uBAA9B,CAPX;AAUH/f,YAAAA,YAVG,GAgBDtE,OAhBC,CAUHsE,YAVG,EAWHD,eAXG,GAgBDrE,OAhBC,CAWHqE,eAXG,EAYHE,YAZG,GAgBDvE,OAhBC,CAYHuE,YAZG,EAaHC,YAbG,GAgBDxE,OAhBC,CAaHwE,YAbG,EAcHmc,SAdG,GAgBD3gB,OAhBC,CAcH2gB,OAdG,EAeHsC,aAfG,GAgBDjjB,OAhBC,CAeHijB,aAfG;AAkBCnC,YAAAA,GAlBD,GAkBOH,SAAO,CAAC2D,6BAAR,CAAsCjgB,eAAtC,EAAuDC,YAAvD,EAAqEC,YAArE,CAlBP;AAoBCkb,YAAAA,IApBD,GAoBQjb,YAAY,CAACsE,GAAb,CAAiB,UAAAtT,GAAG;AAAA,qBAAI+gB,OAAO,CAAC/gB,GAAD,CAAX;AAAA,aAApB,CApBR;AAsBC4sB,YAAAA,IAtBD,GAsBQla,IAAI,CAACC,SAAL,CAAe;AAC1Boc,cAAAA,MAAM,EAAEtB,aADkB;AAE1BuB,cAAAA,SAAS,EAAE/E;AAFe,aAAf,CAtBR;AAAA;AAAA,mBA2BkB1J,mBAAY,CAAC+K,GAAD,EAAM;AACvClqB,cAAAA,MAAM,EAAE,MAD+B;AAEvCwrB,cAAAA,IAAI,EAAJA,IAFuC;AAGvCX,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AAH8B,aAAN,CA3B9B;;AAAA;AA2BC7K,YAAAA,QA3BD;;AAAA,gBAmCAA,QAAQ,CAACwI,EAnCT;AAAA;AAAA;AAAA;;AAoCC4B,YAAAA,GApCD,GAoCO,EApCP;AAAA;AAAA;AAAA,mBAsCWpK,QAAQ,CAACqK,IAAT,EAtCX;;AAAA;AAsCDD,YAAAA,GAtCC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAwCG,IAAIvoB,KAAJ,iDAC0Cme,QAAQ,CAACsK,MADnD,UAC8DtK,QAAQ,CAACuK,UADvE,6BACyGL,GADzG,wCAC8IE,GAD9I,QAxCH;;AAAA;AAAA,+CA6CEpK,QAAQ,CAACwK,IAAT,GAAgBvpB,IAAhB,CAAqB,UAAA4sB,YAAY;AAAA,qBAAI9N,qBAAqB,CAAC8N,YAAD,CAAzB;AAAA,aAAjC,CA7CF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;SA4EeC,kBAAtB;AAAA;AAAA;;;uEAAO,mBACLC,cADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCjC,YAAAA,cAHD,GAGkB;AACrB1K,cAAAA,GAAG,EAAE,IAAIvU,0BAAJ,CAAW,CAAX,CADgB;AAErBmhB,cAAAA,YAAY,EAAE,IAAInhB,0BAAJ,CAAW,CAAX,CAFO;AAGrBohB,cAAAA,sBAAsB,EAAEryB,uBAAe,CAACqK;AAHnB,aAHlB;AASCmD,YAAAA,OATD,GASW7M,MAAM,CAACghB,MAAP,CAAcuO,cAAd,EAA8BiC,cAA9B,CATX;AAUChE,YAAAA,SAVD,4BAWHgE,cAAc,CAAChE,OAXZ,oCAYF3gB,OAAO,CAAC4c,WAAR,CAAoBtb,OAApB,KAAgCnP,0BAAkB,CAACZ,OAAnD,GACG,IAAIsvB,qBAAJ,EADH,GAEG,IAAIiE,qBAAJ,EAdD;AAeCC,YAAAA,aAfD,GAeiBxoB,iBAAiB,CAACyD,OAAO,CAACglB,iBAAT,CAflC;;AAAA,gBAiBAL,cAAc,CAAC3M,GAjBf;AAAA;AAAA;AAAA;;AAkBC+K,YAAAA,KAlBD,GAkBS,IAAItf,0BAAJ,CAAW,CAAX,CAlBT;AAAA,4BAmBKzD,OAAO,CAAC4c,WAAR,CAAoBrX,OAApB,CAA4BrB,WAnBjC;AAAA,gDAoBIjS,mBAAW,CAACkS,aApBhB,yBAuBIlS,mBAAW,CAAC8S,aAvBhB,0BA0BI9S,mBAAW,CAAC0S,YA1BhB;AAAA;;AAAA;AAAA;AAAA,mBAqBe0c,gBAAgB,CAACrhB,OAAO,CAAC4c,WAAT,EAAsB+D,SAAtB,CArB/B;;AAAA;AAqBCoC,YAAAA,KArBD;AAAA;;AAAA;AAAA;AAAA,mBAwBeQ,sBAAsB,CAACvjB,OAAO,CAAC4c,WAAT,EAAsB+D,SAAtB,CAxBrC;;AAAA;AAwBCoC,YAAAA,KAxBD;AAAA;;AAAA;AAAA;AAAA,mBA2BeW,4BAA4B,CAAC1jB,OAAO,CAAC4c,WAAT,EAAsB+D,SAAtB,CA3B3C;;AAAA;AA2BCoC,YAAAA,KA3BD;AAAA;;AAAA;AAAA,kBA8BO,IAAItqB,KAAJ,gEAEFxG,mBAAW,CAAC+N,OAAO,CAAC4c,WAAR,CAAoBrX,OAApB,CAA4BrB,WAA7B,CAFT,CA9BP;;AAAA;AAoCHlE,YAAAA,OAAO,CAAC4c,WAAR,CAAoBpC,MAApB,CAA2BuI,KAA3B;AACA/iB,YAAAA,OAAO,CAACgY,GAAR,GAAc+K,KAAd;;AArCG;AAAA,gBAwCA4B,cAAc,CAACC,YAxCf;AAAA;AAAA;AAAA;;AAyCG5B,YAAAA,cAzCH,GA0CDrC,SAAO,CAACrf,OAAR,KAAoBnP,0BAAkB,CAACZ,OAAvC,GACIkB,sBAAc,CAACkV,gBADnB,GAEIlV,sBAAc,CAACwV,gBA5ClB;AA8CGgb,YAAAA,aA9CH,GA8CmB5hB,kBAAkB,CAAC2hB,cAAD,EAAiB+B,aAAjB,CA9CrC;AAAA;AAAA,mBA+CwBrE,QAAQ,CAACuC,aAAD,EAAgBtC,SAAhB,CA/ChC;;AAAA;AA+CGiE,YAAAA,YA/CH;AAgDH5kB,YAAAA,OAAO,CAAC4kB,YAAR,GAAuBA,YAAvB;;AAhDG;AAmDCvK,YAAAA,wBAnDD,GAmD4BvC,gCAAgC,CAC/D9X,OAAO,CAAC6kB,sBADuD,EAE/DlmB,iBAAiB,CAAComB,aAAD,CAF8C,EAG/D/kB,OAAO,CAAC4kB,YAHuD,EAI/D5kB,OAAO,CAACgY,GAJuD,CAnD5D;AA0DLhY,YAAAA,OAAO,CAAC4c,WAAR,CAAoBhC,UAApB,CAA+BP,wBAA/B;AAEMrb,YAAAA,OA5DD,GA4DWC,sBAAsB,CAACe,OAAO,CAACglB,iBAAT,CA5DjC;AA6DC/M,YAAAA,MA7DD,GA6DU0E,iBAAiB,CAACK,mBAAlB,CACbhd,OAAO,CAAC4c,WADK,EAEbvC,wBAFa,CA7DV;AAiELpC,YAAAA,MAAM,CAACoF,WAAP,CAAmBre,OAAnB;AAjEK,+CAmEEgB,OAAO,CAAC4c,WAnEV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}