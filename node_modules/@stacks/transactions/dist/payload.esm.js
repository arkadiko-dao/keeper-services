import { StacksMessageType, PayloadType, COINBASE_BUFFER_LENGTH_BYTES } from './constants.esm.js';
import BigNum from 'bn.js';
import { createMemoString, createAddress, createLPString, codeBodyString, serializeStacksMessage, deserializeLPString, deserializeAddress, deserializeMemoString } from './types.esm.js';
import { principalCV } from './clarity/types/principalCV.esm.js';
import './clarity/clarityValue.esm.js';
import { serializeCV } from './clarity/serialize.esm.js';
import deserializeCV from './clarity/deserialize.esm.js';
import { BufferArray } from './utils.esm.js';

function createTokenTransferPayload(recipient, amount, memo) {
  var _memo;

  if (typeof recipient === 'string') {
    recipient = principalCV(recipient);
  }

  if (typeof memo === 'string') {
    memo = createMemoString(memo);
  }

  return {
    type: StacksMessageType.Payload,
    payloadType: PayloadType.TokenTransfer,
    recipient: recipient,
    amount: amount,
    memo: (_memo = memo) != null ? _memo : createMemoString('')
  };
}
function createContractCallPayload(contractAddress, contractName, functionName, functionArgs) {
  if (typeof contractAddress === 'string') {
    contractAddress = createAddress(contractAddress);
  }

  if (typeof contractName === 'string') {
    contractName = createLPString(contractName);
  }

  if (typeof functionName === 'string') {
    functionName = createLPString(functionName);
  }

  return {
    type: StacksMessageType.Payload,
    payloadType: PayloadType.ContractCall,
    contractAddress: contractAddress,
    contractName: contractName,
    functionName: functionName,
    functionArgs: functionArgs
  };
}
function createSmartContractPayload(contractName, codeBody) {
  if (typeof contractName === 'string') {
    contractName = createLPString(contractName);
  }

  if (typeof codeBody === 'string') {
    codeBody = codeBodyString(codeBody);
  }

  return {
    type: StacksMessageType.Payload,
    payloadType: PayloadType.SmartContract,
    contractName: contractName,
    codeBody: codeBody
  };
}
function createPoisonPayload() {
  return {
    type: StacksMessageType.Payload,
    payloadType: PayloadType.PoisonMicroblock
  };
}
function createCoinbasePayload(coinbaseBuffer) {
  if (coinbaseBuffer.byteLength != COINBASE_BUFFER_LENGTH_BYTES) {
    throw Error("Coinbase buffer size must be " + COINBASE_BUFFER_LENGTH_BYTES + " bytes");
  }

  return {
    type: StacksMessageType.Payload,
    payloadType: PayloadType.Coinbase,
    coinbaseBuffer: coinbaseBuffer
  };
}
function serializePayload(payload) {
  var bufferArray = new BufferArray();
  bufferArray.appendByte(payload.payloadType);

  switch (payload.payloadType) {
    case PayloadType.TokenTransfer:
      bufferArray.push(serializeCV(payload.recipient));
      bufferArray.push(payload.amount.toArrayLike(Buffer, 'be', 8));
      bufferArray.push(serializeStacksMessage(payload.memo));
      break;

    case PayloadType.ContractCall:
      bufferArray.push(serializeStacksMessage(payload.contractAddress));
      bufferArray.push(serializeStacksMessage(payload.contractName));
      bufferArray.push(serializeStacksMessage(payload.functionName));
      var numArgs = Buffer.alloc(4);
      numArgs.writeUInt32BE(payload.functionArgs.length, 0);
      bufferArray.push(numArgs);
      payload.functionArgs.forEach(function (arg) {
        bufferArray.push(serializeCV(arg));
      });
      break;

    case PayloadType.SmartContract:
      bufferArray.push(serializeStacksMessage(payload.contractName));
      bufferArray.push(serializeStacksMessage(payload.codeBody));
      break;

    case PayloadType.PoisonMicroblock:
      break;

    case PayloadType.Coinbase:
      bufferArray.push(payload.coinbaseBuffer);
      break;
  }

  return bufferArray.concatBuffer();
}
function deserializePayload(bufferReader) {
  var payloadType = bufferReader.readUInt8Enum(PayloadType, function (n) {
    throw new Error("Cannot recognize PayloadType: " + n);
  });

  switch (payloadType) {
    case PayloadType.TokenTransfer:
      var recipient = deserializeCV(bufferReader);
      var amount = new BigNum(bufferReader.readBuffer(8));
      var memo = deserializeMemoString(bufferReader);
      return createTokenTransferPayload(recipient, amount, memo);

    case PayloadType.ContractCall:
      var contractAddress = deserializeAddress(bufferReader);
      var contractCallName = deserializeLPString(bufferReader);
      var functionName = deserializeLPString(bufferReader);
      var functionArgs = [];
      var numberOfArgs = bufferReader.readUInt32BE();

      for (var i = 0; i < numberOfArgs; i++) {
        var clarityValue = deserializeCV(bufferReader);
        functionArgs.push(clarityValue);
      }

      return createContractCallPayload(contractAddress, contractCallName, functionName, functionArgs);

    case PayloadType.SmartContract:
      var smartContractName = deserializeLPString(bufferReader);
      var codeBody = deserializeLPString(bufferReader, 4, 100000);
      return createSmartContractPayload(smartContractName, codeBody);

    case PayloadType.PoisonMicroblock:
      return createPoisonPayload();

    case PayloadType.Coinbase:
      var coinbaseBuffer = bufferReader.readBuffer(COINBASE_BUFFER_LENGTH_BYTES);
      return createCoinbasePayload(coinbaseBuffer);
  }
}

export { createCoinbasePayload, createContractCallPayload, createPoisonPayload, createSmartContractPayload, createTokenTransferPayload, deserializePayload, serializePayload };
//# sourceMappingURL=payload.esm.js.map
