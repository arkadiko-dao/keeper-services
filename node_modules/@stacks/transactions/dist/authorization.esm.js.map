{"version":3,"file":"authorization.esm.js","sources":["../src/authorization.ts"],"sourcesContent":["import {\n  AddressHashMode,\n  AuthType,\n  MultiSigHashMode,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  SingleSigHashMode,\n  StacksMessageType,\n} from './constants';\n\nimport { BufferArray, cloneDeep, leftPadHex, txidFromData } from './utils';\n\nimport {\n  addressFromPublicKeys,\n  createEmptyAddress,\n  createLPList,\n  deserializeLPList,\n  serializeLPList,\n} from './types';\n\nimport {\n  compressPublicKey,\n  createStacksPublicKey,\n  deserializePublicKey,\n  getPublicKey,\n  isCompressed,\n  publicKeyFromSignature,\n  serializePublicKey,\n  signWithKey,\n  StacksPrivateKey,\n  StacksPublicKey,\n} from './keys';\n\nimport BigNum from 'bn.js';\nimport { BufferReader } from './bufferReader';\nimport { DeserializationError, SerializationError, SigningError } from './errors';\n\nabstract class Deserializable {\n  abstract serialize(): Buffer;\n  abstract deserialize(bufferReader: BufferReader): void;\n  static deserialize<T extends Deserializable>(this: new () => T, bufferReader: BufferReader): T {\n    const message = new this();\n    message.deserialize(bufferReader);\n    return message;\n  }\n}\n\nexport interface MessageSignature {\n  readonly type: StacksMessageType.MessageSignature;\n  data: string;\n}\n\nexport function createMessageSignature(signature: string): MessageSignature {\n  const length = Buffer.from(signature, 'hex').byteLength;\n  if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n    throw Error('Invalid signature');\n  }\n\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: signature,\n  };\n}\n\nexport function emptyMessageSignature(): MessageSignature {\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: Buffer.alloc(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, 0x00).toString('hex'),\n  };\n}\n\nexport function serializeMessageSignature(messageSignature: MessageSignature): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendHexString(messageSignature.data);\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeMessageSignature(bufferReader: BufferReader): MessageSignature {\n  return createMessageSignature(\n    bufferReader.readBuffer(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES).toString('hex')\n  );\n}\n\nenum AuthFieldType {\n  PublicKeyCompressed = 0x00,\n  PublicKeyUncompressed = 0x01,\n  SignatureCompressed = 0x02,\n  SignatureUncompressed = 0x03,\n}\n\nexport type TransactionAuthFieldContents = StacksPublicKey | MessageSignature;\n\nexport interface TransactionAuthField {\n  type: StacksMessageType.TransactionAuthField;\n  pubKeyEncoding: PubKeyEncoding;\n  contents: TransactionAuthFieldContents;\n}\n\nexport function createTransactionAuthField(\n  pubKeyEncoding: PubKeyEncoding,\n  contents: TransactionAuthFieldContents\n): TransactionAuthField {\n  return {\n    pubKeyEncoding,\n    type: StacksMessageType.TransactionAuthField,\n    contents,\n  };\n}\n\nexport function serializeTransactionAuthField(field: TransactionAuthField): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n\n  switch (field.contents.type) {\n    case StacksMessageType.PublicKey:\n      if (field.pubKeyEncoding == PubKeyEncoding.Compressed) {\n        bufferArray.appendByte(AuthFieldType.PublicKeyCompressed);\n        bufferArray.push(serializePublicKey(field.contents));\n      } else {\n        bufferArray.appendByte(AuthFieldType.PublicKeyUncompressed);\n        bufferArray.push(serializePublicKey(compressPublicKey(field.contents.data)));\n      }\n      break;\n    case StacksMessageType.MessageSignature:\n      if (field.pubKeyEncoding == PubKeyEncoding.Compressed) {\n        bufferArray.appendByte(AuthFieldType.SignatureCompressed);\n      } else {\n        bufferArray.appendByte(AuthFieldType.SignatureUncompressed);\n      }\n      bufferArray.push(serializeMessageSignature(field.contents));\n      break;\n  }\n\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeTransactionAuthField(bufferReader: BufferReader): TransactionAuthField {\n  const authFieldType = bufferReader.readUInt8Enum(AuthFieldType, n => {\n    throw new DeserializationError(`Could not read ${n} as AuthFieldType`);\n  });\n\n  switch (authFieldType) {\n    case AuthFieldType.PublicKeyCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializePublicKey(bufferReader)\n      );\n    case AuthFieldType.PublicKeyUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        deserializePublicKey(bufferReader)\n      );\n    case AuthFieldType.SignatureCompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Compressed,\n        deserializeMessageSignature(bufferReader)\n      );\n    case AuthFieldType.SignatureUncompressed:\n      return createTransactionAuthField(\n        PubKeyEncoding.Uncompressed,\n        deserializeMessageSignature(bufferReader)\n      );\n    default:\n      throw new Error(`Unknown auth field type: ${JSON.stringify(authFieldType)}`);\n  }\n}\n\nexport interface SingleSigSpendingCondition {\n  hashMode: SingleSigHashMode;\n  signer: string;\n  nonce: BigNum;\n  fee: BigNum;\n  keyEncoding: PubKeyEncoding;\n  signature: MessageSignature;\n}\n\nexport interface MultiSigSpendingCondition {\n  hashMode: MultiSigHashMode;\n  signer: string;\n  nonce: BigNum;\n  fee: BigNum;\n  fields: TransactionAuthField[];\n  signaturesRequired: number;\n}\n\nexport type SpendingCondition = SingleSigSpendingCondition | MultiSigSpendingCondition;\n\nexport function createSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  pubKey: string,\n  nonce: BigNum,\n  fee: BigNum\n): SingleSigSpendingCondition {\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, 1, [createStacksPublicKey(pubKey)]).hash160;\n  const keyEncoding = isCompressed(createStacksPublicKey(pubKey))\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature: emptyMessageSignature(),\n  };\n}\n\nexport function createMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  numSigs: number,\n  pubKeys: string[],\n  nonce: BigNum,\n  fee: BigNum\n): MultiSigSpendingCondition {\n  const stacksPublicKeys = pubKeys.map(createStacksPublicKey);\n\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, numSigs, stacksPublicKeys).hash160;\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields: [],\n    signaturesRequired: numSigs,\n  };\n}\n\nexport function isSingleSig(condition: SpendingCondition): condition is SingleSigSpendingCondition {\n  return 'signature' in condition;\n}\n\nfunction clearCondition(condition: SpendingCondition): SpendingCondition {\n  const cloned = cloneDeep(condition);\n  cloned.nonce = new BigNum(0);\n  cloned.fee = new BigNum(0);\n\n  if (isSingleSig(cloned)) {\n    cloned.signature = emptyMessageSignature();\n  } else {\n    cloned.fields = [];\n  }\n\n  return cloned;\n}\n\nexport function serializeSingleSigSpendingCondition(condition: SingleSigSpendingCondition): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(condition.hashMode);\n  bufferArray.appendHexString(condition.signer);\n  bufferArray.push(condition.nonce.toArrayLike(Buffer, 'be', 8));\n  bufferArray.push(condition.fee.toArrayLike(Buffer, 'be', 8));\n  bufferArray.appendByte(condition.keyEncoding);\n  bufferArray.push(serializeMessageSignature(condition.signature));\n  return bufferArray.concatBuffer();\n}\n\nexport function serializeMultiSigSpendingCondition(condition: MultiSigSpendingCondition): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(condition.hashMode);\n  bufferArray.appendHexString(condition.signer);\n  bufferArray.push(condition.nonce.toArrayLike(Buffer, 'be', 8));\n  bufferArray.push(condition.fee.toArrayLike(Buffer, 'be', 8));\n\n  const fields = createLPList(condition.fields);\n  bufferArray.push(serializeLPList(fields));\n\n  const numSigs = Buffer.alloc(2);\n  numSigs.writeUInt16BE(condition.signaturesRequired, 0);\n  bufferArray.push(numSigs);\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  bufferReader: BufferReader\n): SingleSigSpendingCondition {\n  const signer = bufferReader.readBuffer(20).toString('hex');\n  const nonce = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n  const fee = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n\n  const keyEncoding = bufferReader.readUInt8Enum(PubKeyEncoding, n => {\n    throw new DeserializationError(`Could not parse ${n} as PubKeyEncoding`);\n  });\n  const signature = deserializeMessageSignature(bufferReader);\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature,\n  };\n}\n\nexport function deserializeMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  bufferReader: BufferReader\n): MultiSigSpendingCondition {\n  const signer = bufferReader.readBuffer(20).toString('hex');\n  const nonce = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n  const fee = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n\n  const fields = deserializeLPList(bufferReader, StacksMessageType.TransactionAuthField)\n    .values as TransactionAuthField[];\n\n  const signaturesRequired = bufferReader.readUInt16BE();\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields,\n    signaturesRequired,\n  };\n}\n\nexport function serializeSpendingCondition(condition: SpendingCondition): Buffer {\n  if (isSingleSig(condition)) {\n    return serializeSingleSigSpendingCondition(condition);\n  } else {\n    return serializeMultiSigSpendingCondition(condition);\n  }\n}\n\nexport function deserializeSpendingCondition(bufferReader: BufferReader): SpendingCondition {\n  const hashMode = bufferReader.readUInt8Enum(AddressHashMode, n => {\n    throw new DeserializationError(`Could not parse ${n} as AddressHashMode`);\n  });\n\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    return deserializeSingleSigSpendingCondition(hashMode, bufferReader);\n  } else {\n    return deserializeMultiSigSpendingCondition(hashMode, bufferReader);\n  }\n}\n\nexport function makeSigHashPreSign(\n  curSigHash: string,\n  authType: AuthType,\n  fee: BigNum,\n  nonce: BigNum\n): string {\n  // new hash combines the previous hash and all the new data this signature will add. This\n  // includes:\n  // * the previous hash\n  // * the auth flag\n  // * the tx fee (big-endian 8-byte number)\n  // * nonce (big-endian 8-byte number)\n  const hashLength = 32 + 1 + 8 + 8;\n\n  const sigHash =\n    curSigHash +\n    Buffer.from([authType]).toString('hex') +\n    fee.toArrayLike(Buffer, 'be', 8).toString('hex') +\n    nonce.toArrayLike(Buffer, 'be', 8).toString('hex');\n\n  if (Buffer.from(sigHash, 'hex').byteLength !== hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(Buffer.from(sigHash, 'hex'));\n}\n\nfunction makeSigHashPostSign(\n  curSigHash: string,\n  pubKey: StacksPublicKey,\n  signature: MessageSignature\n): string {\n  // new hash combines the previous hash and all the new data this signature will add.  This\n  // includes:\n  // * the public key compression flag\n  // * the signature\n  const hashLength = 32 + 1 + RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;\n\n  const pubKeyEncoding = isCompressed(pubKey)\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  const sigHash = curSigHash + leftPadHex(pubKeyEncoding.toString(16)) + signature.data;\n\n  const sigHashBuffer = Buffer.from(sigHash, 'hex');\n  if (sigHashBuffer.byteLength > hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(sigHashBuffer);\n}\n\nexport function nextSignature(\n  curSigHash: string,\n  authType: AuthType,\n  fee: BigNum,\n  nonce: BigNum,\n  privateKey: StacksPrivateKey\n): {\n  nextSig: MessageSignature;\n  nextSigHash: string;\n} {\n  const sigHashPreSign = makeSigHashPreSign(curSigHash, authType, fee, nonce);\n\n  const signature = signWithKey(privateKey, sigHashPreSign);\n  const publicKey = getPublicKey(privateKey);\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n\n  return {\n    nextSig: signature,\n    nextSigHash,\n  };\n}\n\nexport function nextVerification(\n  initialSigHash: string,\n  authType: AuthType,\n  fee: BigNum,\n  nonce: BigNum,\n  // @ts-ignore\n  pubKeyEncoding: PubKeyEncoding,\n  signature: MessageSignature\n) {\n  const sigHashPreSign = makeSigHashPreSign(initialSigHash, authType, fee, nonce);\n\n  const publicKey = createStacksPublicKey(\n    publicKeyFromSignature(sigHashPreSign, signature, pubKeyEncoding)\n  );\n\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n\n  return {\n    pubKey: publicKey,\n    nextSigHash,\n  };\n}\n\nfunction newInitialSigHash(): SpendingCondition {\n  const spendingCondition = createSingleSigSpendingCondition(\n    AddressHashMode.SerializeP2PKH,\n    '',\n    new BigNum(0),\n    new BigNum(0)\n  );\n  spendingCondition.signer = createEmptyAddress().hash160;\n  spendingCondition.keyEncoding = PubKeyEncoding.Compressed;\n  spendingCondition.signature = emptyMessageSignature();\n  return spendingCondition;\n}\n\nfunction verify(condition: SpendingCondition, initialSigHash: string, authType: AuthType): string {\n  if (isSingleSig(condition)) {\n    return verifySingleSig(condition, initialSigHash, authType);\n  } else {\n    // TODO: verify multisig\n    return '';\n  }\n}\n\nfunction verifySingleSig(\n  condition: SingleSigSpendingCondition,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const { nextSigHash } = nextVerification(\n    initialSigHash,\n    authType,\n    condition.fee,\n    condition.nonce,\n    condition.keyEncoding,\n    condition.signature\n  );\n\n  // TODO: verify pub key\n\n  return nextSigHash;\n}\n\nexport class Authorization extends Deserializable {\n  authType?: AuthType;\n  spendingCondition?: SpendingCondition;\n  sponsorSpendingCondition?: SpendingCondition;\n\n  constructor(\n    authType?: AuthType,\n    spendingConditions?: SpendingCondition,\n    sponsorSpendingCondition?: SpendingCondition\n  ) {\n    super();\n    this.authType = authType;\n    this.spendingCondition = spendingConditions;\n    this.sponsorSpendingCondition = sponsorSpendingCondition;\n  }\n\n  intoInitialSighashAuth(): Authorization {\n    if (this.spendingCondition) {\n      switch (this.authType) {\n        case AuthType.Standard:\n          return new Authorization(AuthType.Standard, clearCondition(this.spendingCondition));\n        case AuthType.Sponsored:\n          return new Authorization(\n            AuthType.Sponsored,\n            clearCondition(this.spendingCondition),\n            newInitialSigHash()\n          );\n        default:\n          throw new SigningError('Unexpected authorization type for signing');\n      }\n    }\n\n    throw new Error('Authorization missing SpendingCondition');\n  }\n\n  setFee(amount: BigNum) {\n    switch (this.authType) {\n      case AuthType.Standard:\n        this.spendingCondition!.fee = amount;\n        break;\n      case AuthType.Sponsored:\n        this.sponsorSpendingCondition!.fee = amount;\n        break;\n    }\n  }\n\n  getFee() {\n    switch (this.authType) {\n      case AuthType.Standard:\n        return this.spendingCondition!.fee;\n      case AuthType.Sponsored:\n        return this.sponsorSpendingCondition!.fee;\n      default:\n        return 0;\n    }\n  }\n\n  setNonce(nonce: BigNum) {\n    this.spendingCondition!.nonce = nonce;\n  }\n\n  setSponsorNonce(nonce: BigNum) {\n    this.sponsorSpendingCondition!.nonce = nonce;\n  }\n\n  setSponsor(sponsorSpendingCondition: SpendingCondition) {\n    this.sponsorSpendingCondition = sponsorSpendingCondition;\n  }\n\n  verifyOrigin(initialSigHash: string): string {\n    switch (this.authType) {\n      case AuthType.Standard:\n        return verify(this.spendingCondition!, initialSigHash, AuthType.Standard);\n      case AuthType.Sponsored:\n        return verify(this.spendingCondition!, initialSigHash, AuthType.Standard);\n      default:\n        throw new SigningError('Invalid origin auth type');\n    }\n  }\n\n  serialize(): Buffer {\n    const bufferArray: BufferArray = new BufferArray();\n    if (this.authType === undefined) {\n      throw new SerializationError('\"authType\" is undefined');\n    }\n    bufferArray.appendByte(this.authType);\n\n    switch (this.authType) {\n      case AuthType.Standard:\n        if (this.spendingCondition === undefined) {\n          throw new SerializationError('\"spendingCondition\" is undefined');\n        }\n        bufferArray.push(serializeSpendingCondition(this.spendingCondition));\n        break;\n      case AuthType.Sponsored:\n        if (this.spendingCondition === undefined) {\n          throw new SerializationError('\"spendingCondition\" is undefined');\n        }\n        if (this.sponsorSpendingCondition === undefined) {\n          throw new SerializationError('\"spendingCondition\" is undefined');\n        }\n        bufferArray.push(serializeSpendingCondition(this.spendingCondition));\n        bufferArray.push(serializeSpendingCondition(this.sponsorSpendingCondition));\n        break;\n      default:\n        throw new SerializationError(\n          `Unexpected transaction AuthType while serializing: ${JSON.stringify(this.authType)}`\n        );\n    }\n\n    return bufferArray.concatBuffer();\n  }\n\n  deserialize(bufferReader: BufferReader) {\n    this.authType = bufferReader.readUInt8Enum(AuthType, n => {\n      throw new DeserializationError(`Could not parse ${n} as AuthType`);\n    });\n\n    switch (this.authType) {\n      case AuthType.Standard:\n        this.spendingCondition = deserializeSpendingCondition(bufferReader);\n        break;\n      case AuthType.Sponsored:\n        this.spendingCondition = deserializeSpendingCondition(bufferReader);\n        this.sponsorSpendingCondition = deserializeSpendingCondition(bufferReader);\n        break;\n      // throw new DeserializationError('Not yet implemented: deserializing sponsored transactions');\n      default:\n        throw new DeserializationError(\n          `Unexpected transaction AuthType while deserializing: ${JSON.stringify(this.authType)}`\n        );\n    }\n  }\n}\n\nexport class StandardAuthorization extends Authorization {\n  constructor(spendingCondition: SpendingCondition) {\n    super(AuthType.Standard, spendingCondition);\n  }\n}\n\nexport class SponsoredAuthorization extends Authorization {\n  constructor(\n    originSpendingCondition: SpendingCondition,\n    sponsorSpendingCondition?: SpendingCondition\n  ) {\n    let sponsorSC = sponsorSpendingCondition;\n    if (!sponsorSC) {\n      sponsorSC = createSingleSigSpendingCondition(\n        AddressHashMode.SerializeP2PKH,\n        '0'.repeat(66),\n        new BigNum(0),\n        new BigNum(0)\n      );\n    }\n    super(AuthType.Sponsored, originSpendingCondition, sponsorSC);\n  }\n}\n"],"names":["Deserializable","deserialize","bufferReader","message","createMessageSignature","signature","length","Buffer","from","byteLength","RECOVERABLE_ECDSA_SIG_LENGTH_BYTES","Error","type","StacksMessageType","MessageSignature","data","emptyMessageSignature","alloc","toString","serializeMessageSignature","messageSignature","bufferArray","BufferArray","appendHexString","concatBuffer","deserializeMessageSignature","readBuffer","AuthFieldType","createTransactionAuthField","pubKeyEncoding","contents","TransactionAuthField","serializeTransactionAuthField","field","PublicKey","PubKeyEncoding","Compressed","appendByte","PublicKeyCompressed","push","serializePublicKey","PublicKeyUncompressed","compressPublicKey","SignatureCompressed","SignatureUncompressed","deserializeTransactionAuthField","authFieldType","readUInt8Enum","n","DeserializationError","deserializePublicKey","Uncompressed","JSON","stringify","createSingleSigSpendingCondition","hashMode","pubKey","nonce","fee","signer","addressFromPublicKeys","createStacksPublicKey","hash160","keyEncoding","isCompressed","createMultiSigSpendingCondition","numSigs","pubKeys","stacksPublicKeys","map","fields","signaturesRequired","isSingleSig","condition","clearCondition","cloned","cloneDeep","BigNum","serializeSingleSigSpendingCondition","toArrayLike","serializeMultiSigSpendingCondition","createLPList","serializeLPList","writeUInt16BE","deserializeSingleSigSpendingCondition","deserializeMultiSigSpendingCondition","deserializeLPList","values","readUInt16BE","serializeSpendingCondition","deserializeSpendingCondition","AddressHashMode","SerializeP2PKH","SerializeP2WPKH","makeSigHashPreSign","curSigHash","authType","hashLength","sigHash","txidFromData","makeSigHashPostSign","leftPadHex","sigHashBuffer","nextSignature","privateKey","sigHashPreSign","signWithKey","publicKey","getPublicKey","nextSigHash","nextSig","nextVerification","initialSigHash","publicKeyFromSignature","newInitialSigHash","spendingCondition","createEmptyAddress","verify","verifySingleSig","Authorization","spendingConditions","sponsorSpendingCondition","intoInitialSighashAuth","AuthType","Standard","Sponsored","SigningError","setFee","amount","getFee","setNonce","setSponsorNonce","setSponsor","verifyOrigin","serialize","undefined","SerializationError","StandardAuthorization","SponsoredAuthorization","originSpendingCondition","sponsorSC","repeat"],"mappings":"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"}