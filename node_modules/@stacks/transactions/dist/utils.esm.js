import './constants.esm.js';
import { createClass as _createClass, inheritsLoose as _inheritsLoose, asyncToGenerator as _asyncToGenerator, assertThisInitialized as _assertThisInitialized } from './_virtual/_rollupPluginBabelHelpers.js';
import runtime_1 from './node_modules/regenerator-runtime/runtime.esm.js';
import { sha512, sha256 } from 'sha.js';
import 'elliptic';
import { c32addressDecode } from 'c32check';
import 'bn.js';
import './clarity/clarityValue.esm.js';
import { serializeCV } from './clarity/serialize.esm.js';
import deserializeCV from './clarity/deserialize.esm.js';
import RIPEMD160 from 'ripemd160-min';
export { default as randomBytes } from 'randombytes';
import fetch from 'cross-fetch';
import lodashCloneDeep from 'lodash-es/cloneDeep';
import './authorization.esm.js';

var BufferArray = /*#__PURE__*/function () {
  function BufferArray() {
    this._value = [];
  }

  var _proto = BufferArray.prototype;

  _proto.appendHexString = function appendHexString(hexString) {
    this.value.push(Buffer.from(hexString, 'hex'));
  };

  _proto.push = function push(buffer) {
    return this._value.push(buffer);
  };

  _proto.appendByte = function appendByte(octet) {
    if (!Number.isInteger(octet) || octet < 0 || octet > 255) {
      throw new Error("Value " + octet + " is not a valid byte");
    }

    this.value.push(Buffer.from([octet]));
  };

  _proto.concatBuffer = function concatBuffer() {
    return Buffer.concat(this.value);
  };

  _createClass(BufferArray, [{
    key: "value",
    get: function get() {
      return this._value;
    }
  }]);

  return BufferArray;
}();
var leftPadHex = function leftPadHex(hexString) {
  return hexString.length % 2 == 0 ? hexString : "0" + hexString;
};
var leftPadHexToLength = function leftPadHexToLength(hexString, length) {
  return hexString.padStart(length, '0');
};
var rightPadHexToLength = function rightPadHexToLength(hexString, length) {
  return hexString.padEnd(length, '0');
};
var intToHexString = function intToHexString(integer, lengthBytes) {
  if (lengthBytes === void 0) {
    lengthBytes = 8;
  }

  return integer.toString(16).padStart(lengthBytes * 2, '0');
};
var hexStringToInt = function hexStringToInt(hexString) {
  return parseInt(hexString, 16);
};
var exceedsMaxLengthBytes = function exceedsMaxLengthBytes(string, maxLengthBytes) {
  return string ? Buffer.from(string).length > maxLengthBytes : false;
};
function cloneDeep(obj) {
  return lodashCloneDeep(obj);
}
function omit(obj, prop) {
  var clone = cloneDeep(obj);
  delete clone[prop];
  return clone;
}
var sha512_256 = /*#__PURE__*/function (_sha) {
  _inheritsLoose(sha512_256, _sha);

  function sha512_256() {
    var _this;

    _this = _sha.call(this) || this;
    Object.assign(_assertThisInitialized(_this), {
      _ah: 0x22312194,
      _al: 0xfc2bf72c,
      _bh: 0x9f555fa3,
      _bl: 0xc84c64c2,
      _ch: 0x2393b86b,
      _cl: 0x6f53b151,
      _dh: 0x96387719,
      _dl: 0x5940eabd,
      _eh: 0x96283ee2,
      _el: 0xa88effe3,
      _fh: 0xbe5e1e25,
      _fl: 0x53863992,
      _gh: 0x2b0199fc,
      _gl: 0x2c85b8aa,
      _hh: 0x0eb72ddc,
      _hl: 0x81c52ca2
    });
    return _this;
  }

  var _proto2 = sha512_256.prototype;

  _proto2.digest = function digest(encoding) {
    var buff = _sha.prototype.digest.call(this).slice(0, 32);

    return encoding ? buff.toString(encoding) : buff;
  };

  return sha512_256;
}(sha512);
var txidFromData = function txidFromData(data) {
  return new sha512_256().update(data).digest('hex');
};
var hash160 = function hash160(input) {
  var sha256Result = new sha256().update(input).digest();
  return Buffer.from(new RIPEMD160().update(sha256Result).digest());
};
var hashP2PKH = function hashP2PKH(input) {
  return hash160(input).toString('hex');
};
var hashP2SH = function hashP2SH(numSigs, pubKeys) {
  if (numSigs > 15 || pubKeys.length > 15) {
    throw Error('P2SH multisig address can only contain up to 15 public keys');
  }

  var bufferArray = new BufferArray();
  bufferArray.appendByte(80 + numSigs);
  pubKeys.forEach(function (pubKey) {
    bufferArray.appendByte(pubKey.length);
    bufferArray.push(pubKey);
  });
  bufferArray.appendByte(80 + pubKeys.length);
  bufferArray.appendByte(174);
  var redeemScript = bufferArray.concatBuffer();
  var redeemScriptHash = hash160(redeemScript);
  return redeemScriptHash.toString('hex');
};
function isClarityName(name) {
  var regex = /^[a-zA-Z]([a-zA-Z0-9]|[-_!?+<>=/*])*$|^[-+=/*]$|^[<>]=?$/;
  return regex.test(name) && name.length < 128;
}
function fetchPrivate(_x, _x2) {
  return _fetchPrivate.apply(this, arguments);
}

function _fetchPrivate() {
  _fetchPrivate = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(input, init) {
    var defaultFetchOpts, fetchOpts, fetchResult;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            defaultFetchOpts = {
              referrer: 'no-referrer',
              referrerPolicy: 'no-referrer'
            };
            fetchOpts = Object.assign(defaultFetchOpts, init);
            _context.next = 4;
            return fetch(input, fetchOpts);

          case 4:
            fetchResult = _context.sent;
            return _context.abrupt("return", fetchResult);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _fetchPrivate.apply(this, arguments);
}

function cvToHex(cv) {
  var serialized = serializeCV(cv);
  return "0x" + serialized.toString('hex');
}
function hexToCV(hex) {
  var hexWithoutPrefix = hex.startsWith('0x') ? hex.slice(2) : hex;
  var bufferCV = Buffer.from(hexWithoutPrefix, 'hex');
  return deserializeCV(bufferCV);
}
var parseReadOnlyResponse = function parseReadOnlyResponse(response) {
  if (response.okay) {
    return hexToCV(response.result);
  } else {
    throw new Error(response.cause);
  }
};
var validateStacksAddress = function validateStacksAddress(stacksAddress) {
  try {
    c32addressDecode(stacksAddress);
    return true;
  } catch (e) {
    return false;
  }
};

export { BufferArray, cloneDeep, cvToHex, exceedsMaxLengthBytes, fetchPrivate, hash160, hashP2PKH, hashP2SH, hexStringToInt, hexToCV, intToHexString, isClarityName, leftPadHex, leftPadHexToLength, omit, parseReadOnlyResponse, rightPadHexToLength, sha512_256, txidFromData, validateStacksAddress };
//# sourceMappingURL=utils.esm.js.map
