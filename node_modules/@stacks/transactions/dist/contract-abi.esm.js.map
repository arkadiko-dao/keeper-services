{"version":3,"file":"contract-abi.esm.js","sources":["../src/contract-abi.ts"],"sourcesContent":["import { cloneDeep } from './utils';\nimport {\n  ClarityValue,\n  uintCV,\n  intCV,\n  contractPrincipalCV,\n  standardPrincipalCV,\n  noneCV,\n  bufferCV,\n  falseCV,\n  trueCV,\n  ClarityType,\n  getCVTypeString,\n  bufferCVFromString,\n} from './clarity';\nimport { ContractCallPayload } from './payload';\nimport { NotImplementedError } from './errors';\nimport { stringAsciiCV, stringUtf8CV } from './clarity/types/stringCV';\n\n// From https://github.com/blockstack/stacks-blockchain-sidecar/blob/master/src/event-stream/contract-abi.ts\n\nexport type ClarityAbiTypeBuffer = { buffer: { length: number } };\nexport type ClarityAbiTypeStringAscii = { 'string-ascii': { length: number } };\nexport type ClarityAbiTypeStringUtf8 = { 'string-utf8': { length: number } };\nexport type ClarityAbiTypeResponse = { response: { ok: ClarityAbiType; error: ClarityAbiType } };\nexport type ClarityAbiTypeOptional = { optional: ClarityAbiType };\nexport type ClarityAbiTypeTuple = { tuple: { name: string; type: ClarityAbiType }[] };\nexport type ClarityAbiTypeList = { list: { type: ClarityAbiType; length: number } };\n\nexport type ClarityAbiTypeUInt128 = 'uint128';\nexport type ClarityAbiTypeInt128 = 'int128';\nexport type ClarityAbiTypeBool = 'bool';\nexport type ClarityAbiTypePrincipal = 'principal';\nexport type ClarityAbiTypeTraitReference = 'trait_reference';\nexport type ClarityAbiTypeNone = 'none';\n\nexport type ClarityAbiTypePrimitive =\n  | ClarityAbiTypeUInt128\n  | ClarityAbiTypeInt128\n  | ClarityAbiTypeBool\n  | ClarityAbiTypePrincipal\n  | ClarityAbiTypeTraitReference\n  | ClarityAbiTypeNone;\n\nexport type ClarityAbiType =\n  | ClarityAbiTypePrimitive\n  | ClarityAbiTypeBuffer\n  | ClarityAbiTypeResponse\n  | ClarityAbiTypeOptional\n  | ClarityAbiTypeTuple\n  | ClarityAbiTypeList\n  | ClarityAbiTypeStringAscii\n  | ClarityAbiTypeStringUtf8\n  | ClarityAbiTypeTraitReference;\n\nexport enum ClarityAbiTypeId {\n  ClarityAbiTypeUInt128 = 1,\n  ClarityAbiTypeInt128 = 2,\n  ClarityAbiTypeBool = 3,\n  ClarityAbiTypePrincipal = 4,\n  ClarityAbiTypeNone = 5,\n  ClarityAbiTypeBuffer = 6,\n  ClarityAbiTypeResponse = 7,\n  ClarityAbiTypeOptional = 8,\n  ClarityAbiTypeTuple = 9,\n  ClarityAbiTypeList = 10,\n  ClarityAbiTypeStringAscii = 11,\n  ClarityAbiTypeStringUtf8 = 12,\n  ClarityAbiTypeTraitReference = 13,\n}\n\nexport const isClarityAbiPrimitive = (val: ClarityAbiType): val is ClarityAbiTypePrimitive =>\n  typeof val === 'string';\nexport const isClarityAbiBuffer = (val: ClarityAbiType): val is ClarityAbiTypeBuffer =>\n  (val as ClarityAbiTypeBuffer).buffer !== undefined;\nexport const isClarityAbiStringAscii = (val: ClarityAbiType): val is ClarityAbiTypeStringAscii =>\n  (val as ClarityAbiTypeStringAscii)['string-ascii'] !== undefined;\nexport const isClarityAbiStringUtf8 = (val: ClarityAbiType): val is ClarityAbiTypeStringUtf8 =>\n  (val as ClarityAbiTypeStringUtf8)['string-utf8'] !== undefined;\nexport const isClarityAbiResponse = (val: ClarityAbiType): val is ClarityAbiTypeResponse =>\n  (val as ClarityAbiTypeResponse).response !== undefined;\nexport const isClarityAbiOptional = (val: ClarityAbiType): val is ClarityAbiTypeOptional =>\n  (val as ClarityAbiTypeOptional).optional !== undefined;\nexport const isClarityAbiTuple = (val: ClarityAbiType): val is ClarityAbiTypeTuple =>\n  (val as ClarityAbiTypeTuple).tuple !== undefined;\nexport const isClarityAbiList = (val: ClarityAbiType): val is ClarityAbiTypeList =>\n  (val as ClarityAbiTypeList).list !== undefined;\n\nexport type ClarityAbiTypeUnion =\n  | { id: ClarityAbiTypeId.ClarityAbiTypeUInt128; type: ClarityAbiTypeUInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeInt128; type: ClarityAbiTypeInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBool; type: ClarityAbiTypeBool }\n  | { id: ClarityAbiTypeId.ClarityAbiTypePrincipal; type: ClarityAbiTypePrincipal }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference; type: ClarityAbiTypeTraitReference }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeNone; type: ClarityAbiTypeNone }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBuffer; type: ClarityAbiTypeBuffer }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeResponse; type: ClarityAbiTypeResponse }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeOptional; type: ClarityAbiTypeOptional }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTuple; type: ClarityAbiTypeTuple }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeList; type: ClarityAbiTypeList }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii; type: ClarityAbiTypeStringAscii }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8; type: ClarityAbiTypeStringUtf8 };\n\nexport function getTypeUnion(val: ClarityAbiType): ClarityAbiTypeUnion {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'uint128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeUInt128, type: val };\n    } else if (val === 'int128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeInt128, type: val };\n    } else if (val === 'bool') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeBool, type: val };\n    } else if (val === 'principal') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypePrincipal, type: val };\n    } else if (val === 'trait_reference') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference, type: val };\n    } else if (val === 'none') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeNone, type: val };\n    } else {\n      throw new Error(`Unexpected Clarity ABI type primitive: ${JSON.stringify(val)}`);\n    }\n  } else if (isClarityAbiBuffer(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeBuffer, type: val };\n  } else if (isClarityAbiResponse(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeResponse, type: val };\n  } else if (isClarityAbiOptional(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeOptional, type: val };\n  } else if (isClarityAbiTuple(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeTuple, type: val };\n  } else if (isClarityAbiList(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeList, type: val };\n  } else if (isClarityAbiStringAscii(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii, type: val };\n  } else if (isClarityAbiStringUtf8(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8, type: val };\n  } else {\n    throw new Error(`Unexpected Clarity ABI type: ${JSON.stringify(val)}`);\n  }\n}\n\nfunction encodeClarityValue(type: ClarityAbiType, val: string): ClarityValue;\nfunction encodeClarityValue(type: ClarityAbiTypeUnion, val: string): ClarityValue;\nfunction encodeClarityValue(\n  input: ClarityAbiTypeUnion | ClarityAbiType,\n  val: string\n): ClarityValue {\n  let union: ClarityAbiTypeUnion;\n  if ((input as ClarityAbiTypeUnion).id !== undefined) {\n    union = input as ClarityAbiTypeUnion;\n  } else {\n    union = getTypeUnion(input as ClarityAbiType);\n  }\n  switch (union.id) {\n    case ClarityAbiTypeId.ClarityAbiTypeUInt128:\n      return uintCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeInt128:\n      return intCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeBool:\n      if (val === 'false' || val === '0') return falseCV();\n      else if (val === 'true' || val === '1') return trueCV();\n      else throw new Error(`Unexpected Clarity bool value: ${JSON.stringify(val)}`);\n    case ClarityAbiTypeId.ClarityAbiTypePrincipal:\n      if (val.includes('.')) {\n        const [addr, name] = val.split('.');\n        return contractPrincipalCV(addr, name);\n      } else {\n        return standardPrincipalCV(val);\n      }\n    case ClarityAbiTypeId.ClarityAbiTypeTraitReference:\n      const [addr, name] = val.split('.');\n      return contractPrincipalCV(addr, name);\n    case ClarityAbiTypeId.ClarityAbiTypeNone:\n      return noneCV();\n    case ClarityAbiTypeId.ClarityAbiTypeBuffer:\n      return bufferCV(Buffer.from(val, 'utf8'));\n    case ClarityAbiTypeId.ClarityAbiTypeStringAscii:\n      return stringAsciiCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeStringUtf8:\n      return stringUtf8CV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeResponse:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeOptional:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeTuple:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeList:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    default:\n      throw new Error(`Unexpected Clarity type ID: ${JSON.stringify(union)}`);\n  }\n}\nexport { encodeClarityValue };\n\nexport function getTypeString(val: ClarityAbiType): string {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'int128') {\n      return 'int';\n    } else if (val === 'uint128') {\n      return 'uint';\n    }\n    return val;\n  } else if (isClarityAbiBuffer(val)) {\n    return `(buff ${val.buffer.length})`;\n  } else if (isClarityAbiStringAscii(val)) {\n    return `(string-ascii ${val['string-ascii'].length})`;\n  } else if (isClarityAbiStringUtf8(val)) {\n    return `(string-utf8 ${val['string-utf8'].length})`;\n  } else if (isClarityAbiResponse(val)) {\n    return `(response ${getTypeString(val.response.ok)} ${getTypeString(val.response.error)})`;\n  } else if (isClarityAbiOptional(val)) {\n    return `(optional ${getTypeString(val.optional)})`;\n  } else if (isClarityAbiTuple(val)) {\n    return `(tuple ${val.tuple.map(t => `(${t.name} ${getTypeString(t.type)})`).join(' ')})`;\n  } else if (isClarityAbiList(val)) {\n    return `(list ${val.list.length} ${getTypeString(val.list.type)})`;\n  } else {\n    throw new Error(`Type string unsupported for Clarity type: ${JSON.stringify(val)}`);\n  }\n}\n\nexport interface ClarityAbiFunction {\n  name: string;\n  access: 'private' | 'public' | 'read_only';\n  args: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  outputs: {\n    type: ClarityAbiType;\n  };\n}\n\nexport function abiFunctionToString(func: ClarityAbiFunction): string {\n  const access = func.access === 'read_only' ? 'read-only' : func.access;\n  return `(define-${access} (${func.name} ${func.args\n    .map(arg => `(${arg.name} ${getTypeString(arg.type)})`)\n    .join(' ')}))`;\n}\n\nexport interface ClarityAbiVariable {\n  name: string;\n  access: 'variable' | 'constant';\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbiMap {\n  name: string;\n  key: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  value: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n}\n\nexport interface ClarityAbiTypeFungibleToken {\n  name: string;\n}\n\nexport interface ClarityAbiTypeNonFungibleToken {\n  name: string;\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbi {\n  functions: ClarityAbiFunction[];\n  variables: ClarityAbiVariable[];\n  maps: ClarityAbiMap[];\n  fungible_tokens: ClarityAbiTypeFungibleToken[];\n  non_fungible_tokens: ClarityAbiTypeNonFungibleToken[];\n}\n\nfunction matchType(cv: ClarityValue, abiType: ClarityAbiType): boolean {\n  const union = getTypeUnion(abiType);\n\n  switch (cv.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeBool;\n    case ClarityType.Int:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeInt128;\n    case ClarityType.UInt:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeUInt128;\n    case ClarityType.Buffer:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer &&\n        union.type.buffer.length >= cv.buffer.length\n      );\n    case ClarityType.StringASCII:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringAscii &&\n        union.type['string-ascii'].length >= cv.data.length\n      );\n    case ClarityType.StringUTF8:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringUtf8 &&\n        union.type['string-utf8'].length >= cv.data.length\n      );\n    case ClarityType.OptionalNone:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeNone ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional\n      );\n    case ClarityType.OptionalSome:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional &&\n        matchType(cv.value, union.type.optional)\n      );\n    case ClarityType.ResponseErr:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.error)\n      );\n    case ClarityType.ResponseOk:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.ok)\n      );\n    case ClarityType.PrincipalContract:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeTraitReference\n      );\n    case ClarityType.PrincipalStandard:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal;\n    case ClarityType.List:\n      return (\n        union.id == ClarityAbiTypeId.ClarityAbiTypeList &&\n        union.type.list.length === cv.list.length &&\n        cv.list.every(val => matchType(val, union.type.list.type))\n      );\n    case ClarityType.Tuple:\n      if (union.id == ClarityAbiTypeId.ClarityAbiTypeTuple) {\n        const tuple = cloneDeep(cv.data);\n        for (let i = 0; i < union.type.tuple.length; i++) {\n          const abiTupleEntry = union.type.tuple[i];\n          const key = abiTupleEntry.name;\n          const val = tuple[key];\n\n          // if key exists in cv tuple, check if its type matches the abi\n          // return false if key doesn't exist\n          if (val) {\n            if (!matchType(val, abiTupleEntry.type)) {\n              return false;\n            }\n            delete tuple[key];\n          } else {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    default:\n      return false;\n  }\n}\n\n/**\n * Validates a contract-call payload with a contract ABI\n *\n * @param {ContractCallPayload} payload - a contract-call payload\n * @param {ClarityAbi} abi - a contract ABI\n *\n * @returns {boolean} true if the payloads functionArgs type check against those in the ABI\n */\nexport function validateContractCall(payload: ContractCallPayload, abi: ClarityAbi): boolean {\n  const filtered = abi.functions.filter(fn => fn.name === payload.functionName.content);\n  if (filtered.length === 1) {\n    const abiFunc = filtered[0];\n    const abiArgs = abiFunc.args;\n\n    if (payload.functionArgs.length !== abiArgs.length) {\n      throw new Error(\n        `Clarity function expects ${abiArgs.length} argument(s) but received ${payload.functionArgs.length}`\n      );\n    }\n\n    for (let i = 0; i < payload.functionArgs.length; i++) {\n      const payloadArg = payload.functionArgs[i];\n      const abiArg = abiArgs[i];\n\n      if (!matchType(payloadArg, abiArg.type)) {\n        const argNum = i + 1;\n        throw new Error(\n          `Clarity function \\`${\n            payload.functionName.content\n          }\\` expects argument ${argNum} to be of type ${getTypeString(\n            abiArg.type\n          )}, not ${getCVTypeString(payloadArg)}`\n        );\n      }\n    }\n\n    return true;\n  } else if (filtered.length === 0) {\n    throw new Error(`ABI doesn't contain a function with the name ${payload.functionName.content}`);\n  } else {\n    throw new Error(\n      `Malformed ABI. Contains multiple functions with the name ${payload.functionName.content}`\n    );\n  }\n}\n\n/**\n * Convert string input to Clarity value based on contract ABI data. Only handles Clarity\n * primitives and buffers. Responses, optionals, tuples and lists are not supported.\n *\n * @param {string} input - string to be parsed into Clarity value\n * @param {ClarityAbiType} type - the contract function argument object\n *\n * @returns {ClarityValue} returns a Clarity value\n */\nexport function parseToCV(input: string, type: ClarityAbiType): ClarityValue {\n  const typeString = getTypeString(type);\n  if (isClarityAbiPrimitive(type)) {\n    if (type === 'uint128') {\n      return uintCV(input);\n    } else if (type === 'int128') {\n      return intCV(input);\n    } else if (type === 'bool') {\n      if (input.toLowerCase() === 'true') {\n        return trueCV();\n      } else if (input.toLowerCase() === 'false') {\n        return falseCV();\n      } else {\n        throw new Error(`Invalid bool value: ${input}`);\n      }\n    } else if (type === 'principal') {\n      if (input.includes('.')) {\n        const [address, contractName] = input.split('.');\n        return contractPrincipalCV(address, contractName);\n      } else {\n        return standardPrincipalCV(input);\n      }\n    } else {\n      throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n  } else if (isClarityAbiBuffer(type)) {\n    const inputLength = Buffer.from(input).byteLength;\n    if (inputLength > type.buffer.length) {\n      throw new Error(`Input exceeds specified buffer length limit of ${type.buffer.length}`);\n    }\n    return bufferCVFromString(input);\n  } else if (isClarityAbiResponse(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiOptional(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiTuple(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiList(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  }\n}\n"],"names":["ClarityAbiTypeId","isClarityAbiPrimitive","val","isClarityAbiBuffer","buffer","undefined","isClarityAbiStringAscii","isClarityAbiStringUtf8","isClarityAbiResponse","response","isClarityAbiOptional","optional","isClarityAbiTuple","tuple","isClarityAbiList","list","getTypeUnion","id","ClarityAbiTypeUInt128","type","ClarityAbiTypeInt128","ClarityAbiTypeBool","ClarityAbiTypePrincipal","ClarityAbiTypeTraitReference","ClarityAbiTypeNone","Error","JSON","stringify","ClarityAbiTypeBuffer","ClarityAbiTypeResponse","ClarityAbiTypeOptional","ClarityAbiTypeTuple","ClarityAbiTypeList","ClarityAbiTypeStringAscii","ClarityAbiTypeStringUtf8","encodeClarityValue","input","union","uintCV","intCV","falseCV","trueCV","includes","split","addr","name","contractPrincipalCV","standardPrincipalCV","noneCV","bufferCV","Buffer","from","stringAsciiCV","stringUtf8CV","NotImplementedError","getTypeString","length","ok","error","map","t","join","abiFunctionToString","func","access","args","arg","matchType","cv","abiType","ClarityType","BoolTrue","BoolFalse","Int","UInt","StringASCII","data","StringUTF8","OptionalNone","OptionalSome","value","ResponseErr","ResponseOk","PrincipalContract","PrincipalStandard","List","every","Tuple","cloneDeep","i","abiTupleEntry","key","validateContractCall","payload","abi","filtered","functions","filter","fn","functionName","content","abiFunc","abiArgs","functionArgs","payloadArg","abiArg","argNum","getCVTypeString","parseToCV","typeString","toLowerCase","address","contractName","inputLength","byteLength","bufferCVFromString"],"mappings":"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"}