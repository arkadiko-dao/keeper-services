{"version":3,"file":"postcondition.esm.js","sources":["../src/postcondition.ts"],"sourcesContent":["import {\n  PostConditionType,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  StacksMessageType,\n} from './constants';\n\nimport { BufferArray } from './utils';\n\nimport {\n  AssetInfo,\n  serializeAssetInfo,\n  deserializeAssetInfo,\n  PostConditionPrincipal,\n  serializePrincipal,\n  deserializePrincipal,\n  parseAssetInfoString,\n  parsePrincipalString,\n} from './types';\n\nimport BigNum from 'bn.js';\nimport { BufferReader } from './bufferReader';\nimport { ClarityValue, serializeCV, deserializeCV } from './clarity';\nimport { DeserializationError } from './errors';\n\nexport type PostCondition = STXPostCondition | FungiblePostCondition | NonFungiblePostCondition;\n\nexport interface STXPostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.STX;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: BigNum;\n}\n\nexport function createSTXPostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum\n): STXPostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.STX,\n    principal,\n    conditionCode,\n    amount,\n  };\n}\n\nexport interface FungiblePostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.Fungible;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: BigNum;\n  readonly assetInfo: AssetInfo;\n}\n\nexport function createFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.Fungible,\n    principal,\n    conditionCode,\n    amount,\n    assetInfo,\n  };\n}\n\nexport interface NonFungiblePostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.NonFungible;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: NonFungibleConditionCode;\n  /** Structure that identifies the token type. */\n  readonly assetInfo: AssetInfo;\n  /** The Clarity value that names the token instance. */\n  readonly assetName: ClarityValue;\n}\n\nexport function createNonFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.NonFungible,\n    principal,\n    conditionCode,\n    assetInfo,\n    assetName,\n  };\n}\n\nexport function serializePostCondition(postCondition: PostCondition): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(postCondition.conditionType);\n  bufferArray.push(serializePrincipal(postCondition.principal));\n\n  if (\n    postCondition.conditionType === PostConditionType.Fungible ||\n    postCondition.conditionType === PostConditionType.NonFungible\n  ) {\n    bufferArray.push(serializeAssetInfo(postCondition.assetInfo));\n  }\n\n  if (postCondition.conditionType === PostConditionType.NonFungible) {\n    bufferArray.push(serializeCV(postCondition.assetName));\n  }\n\n  bufferArray.appendByte(postCondition.conditionCode);\n\n  if (\n    postCondition.conditionType === PostConditionType.STX ||\n    postCondition.conditionType === PostConditionType.Fungible\n  ) {\n    bufferArray.push(postCondition.amount.toArrayLike(Buffer, 'be', 8));\n  }\n\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializePostCondition(bufferReader: BufferReader): PostCondition {\n  const postConditionType = bufferReader.readUInt8Enum(PostConditionType, n => {\n    throw new DeserializationError(`Could not read ${n} as PostConditionType`);\n  });\n\n  const principal = deserializePrincipal(bufferReader);\n\n  let conditionCode;\n  let assetInfo;\n  let amount;\n  switch (postConditionType) {\n    case PostConditionType.STX:\n      conditionCode = bufferReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.STX,\n        principal,\n        conditionCode,\n        amount,\n      };\n    case PostConditionType.Fungible:\n      assetInfo = deserializeAssetInfo(bufferReader);\n      conditionCode = bufferReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.Fungible,\n        principal,\n        conditionCode,\n        amount,\n        assetInfo,\n      };\n    case PostConditionType.NonFungible:\n      assetInfo = deserializeAssetInfo(bufferReader);\n      const assetName = deserializeCV(bufferReader);\n      conditionCode = bufferReader.readUInt8Enum(NonFungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.NonFungible,\n        principal,\n        conditionCode,\n        assetInfo,\n        assetName,\n      };\n  }\n}\n"],"names":["createSTXPostCondition","principal","conditionCode","amount","parsePrincipalString","type","StacksMessageType","PostCondition","conditionType","PostConditionType","STX","createFungiblePostCondition","assetInfo","parseAssetInfoString","Fungible","createNonFungiblePostCondition","assetName","NonFungible","serializePostCondition","postCondition","bufferArray","BufferArray","appendByte","push","serializePrincipal","serializeAssetInfo","serializeCV","toArrayLike","Buffer","concatBuffer","deserializePostCondition","bufferReader","postConditionType","readUInt8Enum","n","DeserializationError","deserializePrincipal","FungibleConditionCode","BigNum","readBuffer","toString","deserializeAssetInfo","deserializeCV","NonFungibleConditionCode"],"mappings":"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"}