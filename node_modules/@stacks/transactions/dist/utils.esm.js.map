{"version":3,"file":"utils.esm.js","sources":["../src/utils.ts"],"sourcesContent":["import { sha256, sha512 } from 'sha.js';\nimport { ClarityValue, serializeCV } from './clarity';\nimport RIPEMD160 from 'ripemd160-min';\nimport randombytes from 'randombytes';\nimport { deserializeCV } from './clarity';\nimport fetch from 'cross-fetch';\nimport { c32addressDecode } from 'c32check';\nimport lodashCloneDeep from 'lodash/cloneDeep';\n\nexport { randombytes as randomBytes };\n\nexport class BufferArray {\n  _value: Buffer[] = [];\n  get value() {\n    return this._value;\n  }\n  appendHexString(hexString: string) {\n    this.value.push(Buffer.from(hexString, 'hex'));\n  }\n\n  push(buffer: Buffer) {\n    return this._value.push(buffer);\n  }\n  appendByte(octet: number) {\n    if (!Number.isInteger(octet) || octet < 0 || octet > 255) {\n      throw new Error(`Value ${octet} is not a valid byte`);\n    }\n    this.value.push(Buffer.from([octet]));\n  }\n\n  concatBuffer(): Buffer {\n    return Buffer.concat(this.value);\n  }\n}\n\nexport const leftPadHex = (hexString: string): string =>\n  hexString.length % 2 == 0 ? hexString : `0${hexString}`;\n\nexport const leftPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padStart(length, '0');\n\nexport const rightPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padEnd(length, '0');\n\nexport const intToHexString = (integer: number, lengthBytes = 8): string =>\n  integer.toString(16).padStart(lengthBytes * 2, '0');\n\nexport const hexStringToInt = (hexString: string): number => parseInt(hexString, 16);\n\nexport const exceedsMaxLengthBytes = (string: string, maxLengthBytes: number): boolean =>\n  string ? Buffer.from(string).length > maxLengthBytes : false;\n\nexport function cloneDeep<T>(obj: T): T {\n  return lodashCloneDeep(obj);\n}\n\nexport function omit<T, K extends keyof any>(obj: T, prop: K): Omit<T, K> {\n  const clone = cloneDeep(obj);\n  // @ts-expect-error\n  delete clone[prop];\n  return clone;\n}\n\nexport class sha512_256 extends sha512 {\n  constructor() {\n    super();\n    // set the \"SHA-512/256\" initialization vector\n    // see https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n    Object.assign(this, {\n      _ah: 0x22312194,\n      _al: 0xfc2bf72c,\n      _bh: 0x9f555fa3,\n      _bl: 0xc84c64c2,\n      _ch: 0x2393b86b,\n      _cl: 0x6f53b151,\n      _dh: 0x96387719,\n      _dl: 0x5940eabd,\n      _eh: 0x96283ee2,\n      _el: 0xa88effe3,\n      _fh: 0xbe5e1e25,\n      _fl: 0x53863992,\n      _gh: 0x2b0199fc,\n      _gl: 0x2c85b8aa,\n      _hh: 0x0eb72ddc,\n      _hl: 0x81c52ca2,\n    });\n  }\n  digest(): Buffer;\n  digest(encoding: import('crypto').HexBase64Latin1Encoding): string;\n  digest(encoding?: import('crypto').HexBase64Latin1Encoding): string | Buffer {\n    // \"SHA-512/256\" truncates the digest to 32 bytes\n    const buff = super.digest().slice(0, 32);\n    return encoding ? buff.toString(encoding) : buff;\n  }\n}\n\nexport const txidFromData = (data: Buffer): string => new sha512_256().update(data).digest('hex');\n\nexport const hash160 = (input: Buffer): Buffer => {\n  const sha256Result = new sha256().update(input).digest();\n  return Buffer.from(new RIPEMD160().update(sha256Result).digest());\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// single-sig address (p2pkh)\nexport const hashP2PKH = (input: Buffer): string => {\n  return hash160(input).toString('hex');\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// multi-sig address (p2sh)\nexport const hashP2SH = (numSigs: number, pubKeys: Buffer[]): string => {\n  if (numSigs > 15 || pubKeys.length > 15) {\n    throw Error('P2SH multisig address can only contain up to 15 public keys');\n  }\n\n  // construct P2SH script\n  const bufferArray = new BufferArray();\n  // OP_n\n  bufferArray.appendByte(80 + numSigs);\n  // public keys prepended by their length\n  pubKeys.forEach(pubKey => {\n    bufferArray.appendByte(pubKey.length);\n    bufferArray.push(pubKey);\n  });\n  // OP_m\n  bufferArray.appendByte(80 + pubKeys.length);\n  // OP_CHECKMULTISIG\n  bufferArray.appendByte(174);\n\n  const redeemScript = bufferArray.concatBuffer();\n  const redeemScriptHash = hash160(redeemScript);\n  return redeemScriptHash.toString('hex');\n};\n\nexport function isClarityName(name: string) {\n  const regex = /^[a-zA-Z]([a-zA-Z0-9]|[-_!?+<>=/*])*$|^[-+=/*]$|^[<>]=?$/;\n  return regex.test(name) && name.length < 128;\n}\n\n/** @ignore */\nexport async function fetchPrivate(input: RequestInfo, init?: RequestInit): Promise<Response> {\n  const defaultFetchOpts: RequestInit = {\n    referrer: 'no-referrer',\n    referrerPolicy: 'no-referrer',\n  };\n  const fetchOpts = Object.assign(defaultFetchOpts, init);\n  const fetchResult = await fetch(input, fetchOpts);\n  return fetchResult;\n}\n/**\n * Converts a clarity value to a hex encoded string with `0x` prefix\n * @param {ClarityValue} cv  - the clarity value to convert\n */\nexport function cvToHex(cv: ClarityValue) {\n  const serialized = serializeCV(cv);\n  return `0x${serialized.toString('hex')}`;\n}\n\n/**\n * Converts a hex encoded string to a clarity value\n * @param {string} hex - the hex encoded string with or without `0x` prefix\n */\nexport function hexToCV(hex: string) {\n  const hexWithoutPrefix = hex.startsWith('0x') ? hex.slice(2) : hex;\n  const bufferCV = Buffer.from(hexWithoutPrefix, 'hex');\n  return deserializeCV(bufferCV);\n}\n/**\n * Read only function response object\n *\n * @param {Boolean} okay - the status of the response\n * @param {string} result - serialized hex clarity value\n */\n\nexport interface ReadOnlyFunctionSuccessResponse {\n  okay: true;\n  result: string;\n}\n\nexport interface ReadOnlyFunctionErrorResponse {\n  okay: false;\n  cause: string;\n}\n\nexport type ReadOnlyFunctionResponse =\n  | ReadOnlyFunctionSuccessResponse\n  | ReadOnlyFunctionErrorResponse;\n\n/**\n * Converts the response of a read-only function call into its Clarity Value\n * @param param\n */\nexport const parseReadOnlyResponse = (response: ReadOnlyFunctionResponse): ClarityValue => {\n  if (response.okay) {\n    return hexToCV(response.result);\n  } else {\n    throw new Error(response.cause);\n  }\n};\n\nexport const validateStacksAddress = (stacksAddress: string): boolean => {\n  try {\n    c32addressDecode(stacksAddress);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n"],"names":["BufferArray","appendHexString","hexString","value","push","Buffer","from","buffer","_value","appendByte","octet","Number","isInteger","Error","concatBuffer","concat","leftPadHex","length","leftPadHexToLength","padStart","rightPadHexToLength","padEnd","intToHexString","integer","lengthBytes","toString","hexStringToInt","parseInt","exceedsMaxLengthBytes","string","maxLengthBytes","cloneDeep","obj","lodashCloneDeep","omit","prop","clone","sha512_256","Object","assign","_ah","_al","_bh","_bl","_ch","_cl","_dh","_dl","_eh","_el","_fh","_fl","_gh","_gl","_hh","_hl","digest","encoding","buff","slice","sha512","txidFromData","data","update","hash160","input","sha256Result","sha256","RIPEMD160","hashP2PKH","hashP2SH","numSigs","pubKeys","bufferArray","forEach","pubKey","redeemScript","redeemScriptHash","isClarityName","name","regex","test","fetchPrivate","init","defaultFetchOpts","referrer","referrerPolicy","fetchOpts","fetch","fetchResult","cvToHex","cv","serialized","serializeCV","hexToCV","hex","hexWithoutPrefix","startsWith","bufferCV","deserializeCV","parseReadOnlyResponse","response","okay","result","cause","validateStacksAddress","stacksAddress","c32addressDecode","e"],"mappings":"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"}