import { StacksMessageType, PostConditionType, NonFungibleConditionCode, FungibleConditionCode } from './constants.esm.js';
import BigNum from 'bn.js';
import { DeserializationError } from './errors.esm.js';
import { parsePrincipalString, parseAssetInfoString, serializePrincipal, serializeAssetInfo, deserializePrincipal, deserializeAssetInfo } from './types.esm.js';
import './clarity/clarityValue.esm.js';
import { serializeCV } from './clarity/serialize.esm.js';
import deserializeCV from './clarity/deserialize.esm.js';
import { BufferArray } from './utils.esm.js';

function createSTXPostCondition(principal, conditionCode, amount) {
  if (typeof principal === 'string') {
    principal = parsePrincipalString(principal);
  }

  return {
    type: StacksMessageType.PostCondition,
    conditionType: PostConditionType.STX,
    principal: principal,
    conditionCode: conditionCode,
    amount: amount
  };
}
function createFungiblePostCondition(principal, conditionCode, amount, assetInfo) {
  if (typeof principal === 'string') {
    principal = parsePrincipalString(principal);
  }

  if (typeof assetInfo === 'string') {
    assetInfo = parseAssetInfoString(assetInfo);
  }

  return {
    type: StacksMessageType.PostCondition,
    conditionType: PostConditionType.Fungible,
    principal: principal,
    conditionCode: conditionCode,
    amount: amount,
    assetInfo: assetInfo
  };
}
function createNonFungiblePostCondition(principal, conditionCode, assetInfo, assetName) {
  if (typeof principal === 'string') {
    principal = parsePrincipalString(principal);
  }

  if (typeof assetInfo === 'string') {
    assetInfo = parseAssetInfoString(assetInfo);
  }

  return {
    type: StacksMessageType.PostCondition,
    conditionType: PostConditionType.NonFungible,
    principal: principal,
    conditionCode: conditionCode,
    assetInfo: assetInfo,
    assetName: assetName
  };
}
function serializePostCondition(postCondition) {
  var bufferArray = new BufferArray();
  bufferArray.appendByte(postCondition.conditionType);
  bufferArray.push(serializePrincipal(postCondition.principal));

  if (postCondition.conditionType === PostConditionType.Fungible || postCondition.conditionType === PostConditionType.NonFungible) {
    bufferArray.push(serializeAssetInfo(postCondition.assetInfo));
  }

  if (postCondition.conditionType === PostConditionType.NonFungible) {
    bufferArray.push(serializeCV(postCondition.assetName));
  }

  bufferArray.appendByte(postCondition.conditionCode);

  if (postCondition.conditionType === PostConditionType.STX || postCondition.conditionType === PostConditionType.Fungible) {
    bufferArray.push(postCondition.amount.toArrayLike(Buffer, 'be', 8));
  }

  return bufferArray.concatBuffer();
}
function deserializePostCondition(bufferReader) {
  var postConditionType = bufferReader.readUInt8Enum(PostConditionType, function (n) {
    throw new DeserializationError("Could not read " + n + " as PostConditionType");
  });
  var principal = deserializePrincipal(bufferReader);
  var conditionCode;
  var assetInfo;
  var amount;

  switch (postConditionType) {
    case PostConditionType.STX:
      conditionCode = bufferReader.readUInt8Enum(FungibleConditionCode, function (n) {
        throw new DeserializationError("Could not read " + n + " as FungibleConditionCode");
      });
      amount = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);
      return {
        type: StacksMessageType.PostCondition,
        conditionType: PostConditionType.STX,
        principal: principal,
        conditionCode: conditionCode,
        amount: amount
      };

    case PostConditionType.Fungible:
      assetInfo = deserializeAssetInfo(bufferReader);
      conditionCode = bufferReader.readUInt8Enum(FungibleConditionCode, function (n) {
        throw new DeserializationError("Could not read " + n + " as FungibleConditionCode");
      });
      amount = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);
      return {
        type: StacksMessageType.PostCondition,
        conditionType: PostConditionType.Fungible,
        principal: principal,
        conditionCode: conditionCode,
        amount: amount,
        assetInfo: assetInfo
      };

    case PostConditionType.NonFungible:
      assetInfo = deserializeAssetInfo(bufferReader);
      var assetName = deserializeCV(bufferReader);
      conditionCode = bufferReader.readUInt8Enum(NonFungibleConditionCode, function (n) {
        throw new DeserializationError("Could not read " + n + " as FungibleConditionCode");
      });
      return {
        type: StacksMessageType.PostCondition,
        conditionType: PostConditionType.NonFungible,
        principal: principal,
        conditionCode: conditionCode,
        assetInfo: assetInfo,
        assetName: assetName
      };
  }
}

export { createFungiblePostCondition, createNonFungiblePostCondition, createSTXPostCondition, deserializePostCondition, serializePostCondition };
//# sourceMappingURL=postcondition.esm.js.map
