{"version":3,"file":"payload.esm.js","sources":["../src/payload.ts"],"sourcesContent":["import { COINBASE_BUFFER_LENGTH_BYTES, PayloadType, StacksMessageType } from './constants';\n\nimport { BufferArray } from './utils';\n\nimport {\n  Address,\n  MemoString,\n  createAddress,\n  createMemoString,\n  LengthPrefixedString,\n  createLPString,\n  serializeStacksMessage,\n  deserializeAddress,\n  deserializeLPString,\n  deserializeMemoString,\n  codeBodyString,\n} from './types';\n\nimport { ClarityValue, serializeCV, deserializeCV } from './clarity/';\n\nimport BigNum from 'bn.js';\nimport { BufferReader } from './bufferReader';\nimport { PrincipalCV, principalCV } from './clarity/types/principalCV';\n\nexport type Payload =\n  | TokenTransferPayload\n  | ContractCallPayload\n  | SmartContractPayload\n  | PoisonPayload\n  | CoinbasePayload;\n\nexport interface TokenTransferPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.TokenTransfer;\n  readonly recipient: PrincipalCV;\n  readonly amount: BigNum;\n  readonly memo: MemoString;\n}\n\nexport function createTokenTransferPayload(\n  recipient: string | PrincipalCV,\n  amount: BigNum,\n  memo?: string | MemoString\n): TokenTransferPayload {\n  if (typeof recipient === 'string') {\n    recipient = principalCV(recipient);\n  }\n  if (typeof memo === 'string') {\n    memo = createMemoString(memo);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.TokenTransfer,\n    recipient,\n    amount,\n    memo: memo ?? createMemoString(''),\n  };\n}\n\nexport interface ContractCallPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.ContractCall;\n  readonly contractAddress: Address;\n  readonly contractName: LengthPrefixedString;\n  readonly functionName: LengthPrefixedString;\n  readonly functionArgs: ClarityValue[];\n}\n\nexport function createContractCallPayload(\n  contractAddress: string | Address,\n  contractName: string | LengthPrefixedString,\n  functionName: string | LengthPrefixedString,\n  functionArgs: ClarityValue[]\n): ContractCallPayload {\n  if (typeof contractAddress === 'string') {\n    contractAddress = createAddress(contractAddress);\n  }\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof functionName === 'string') {\n    functionName = createLPString(functionName);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.ContractCall,\n    contractAddress,\n    contractName,\n    functionName,\n    functionArgs,\n  };\n}\n\nexport interface SmartContractPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.SmartContract;\n  readonly contractName: LengthPrefixedString;\n  readonly codeBody: LengthPrefixedString;\n}\n\nexport function createSmartContractPayload(\n  contractName: string | LengthPrefixedString,\n  codeBody: string | LengthPrefixedString\n): SmartContractPayload {\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof codeBody === 'string') {\n    codeBody = codeBodyString(codeBody);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.SmartContract,\n    contractName,\n    codeBody,\n  };\n}\n\nexport interface PoisonPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.PoisonMicroblock;\n}\n\nexport function createPoisonPayload(): PoisonPayload {\n  return { type: StacksMessageType.Payload, payloadType: PayloadType.PoisonMicroblock };\n}\n\nexport interface CoinbasePayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.Coinbase;\n  readonly coinbaseBuffer: Buffer;\n}\n\nexport function createCoinbasePayload(coinbaseBuffer: Buffer): CoinbasePayload {\n  if (coinbaseBuffer.byteLength != COINBASE_BUFFER_LENGTH_BYTES) {\n    throw Error(`Coinbase buffer size must be ${COINBASE_BUFFER_LENGTH_BYTES} bytes`);\n  }\n  return { type: StacksMessageType.Payload, payloadType: PayloadType.Coinbase, coinbaseBuffer };\n}\n\nexport function serializePayload(payload: Payload): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(payload.payloadType);\n\n  switch (payload.payloadType) {\n    case PayloadType.TokenTransfer:\n      bufferArray.push(serializeCV(payload.recipient));\n      bufferArray.push(payload.amount.toArrayLike(Buffer, 'be', 8));\n      bufferArray.push(serializeStacksMessage(payload.memo));\n      break;\n    case PayloadType.ContractCall:\n      bufferArray.push(serializeStacksMessage(payload.contractAddress));\n      bufferArray.push(serializeStacksMessage(payload.contractName));\n      bufferArray.push(serializeStacksMessage(payload.functionName));\n      const numArgs = Buffer.alloc(4);\n      numArgs.writeUInt32BE(payload.functionArgs.length, 0);\n      bufferArray.push(numArgs);\n      payload.functionArgs.forEach(arg => {\n        bufferArray.push(serializeCV(arg));\n      });\n      break;\n    case PayloadType.SmartContract:\n      bufferArray.push(serializeStacksMessage(payload.contractName));\n      bufferArray.push(serializeStacksMessage(payload.codeBody));\n      break;\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      break;\n    case PayloadType.Coinbase:\n      bufferArray.push(payload.coinbaseBuffer);\n      break;\n  }\n\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializePayload(bufferReader: BufferReader): Payload {\n  const payloadType = bufferReader.readUInt8Enum(PayloadType, n => {\n    throw new Error(`Cannot recognize PayloadType: ${n}`);\n  });\n\n  switch (payloadType) {\n    case PayloadType.TokenTransfer:\n      const recipient = deserializeCV(bufferReader) as PrincipalCV;\n      const amount = new BigNum(bufferReader.readBuffer(8));\n      const memo = deserializeMemoString(bufferReader);\n      return createTokenTransferPayload(recipient, amount, memo);\n    case PayloadType.ContractCall:\n      const contractAddress = deserializeAddress(bufferReader);\n      const contractCallName = deserializeLPString(bufferReader);\n      const functionName = deserializeLPString(bufferReader);\n      const functionArgs = [];\n      const numberOfArgs = bufferReader.readUInt32BE();\n      for (let i = 0; i < numberOfArgs; i++) {\n        const clarityValue = deserializeCV(bufferReader);\n        functionArgs.push(clarityValue);\n      }\n      return createContractCallPayload(\n        contractAddress,\n        contractCallName,\n        functionName,\n        functionArgs\n      );\n    case PayloadType.SmartContract:\n      const smartContractName = deserializeLPString(bufferReader);\n      const codeBody = deserializeLPString(bufferReader, 4, 100000);\n      return createSmartContractPayload(smartContractName, codeBody);\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      return createPoisonPayload();\n    case PayloadType.Coinbase:\n      const coinbaseBuffer = bufferReader.readBuffer(COINBASE_BUFFER_LENGTH_BYTES);\n      return createCoinbasePayload(coinbaseBuffer);\n  }\n}\n"],"names":["createTokenTransferPayload","recipient","amount","memo","principalCV","createMemoString","type","StacksMessageType","Payload","payloadType","PayloadType","TokenTransfer","createContractCallPayload","contractAddress","contractName","functionName","functionArgs","createAddress","createLPString","ContractCall","createSmartContractPayload","codeBody","codeBodyString","SmartContract","createPoisonPayload","PoisonMicroblock","createCoinbasePayload","coinbaseBuffer","byteLength","COINBASE_BUFFER_LENGTH_BYTES","Error","Coinbase","serializePayload","payload","bufferArray","BufferArray","appendByte","push","serializeCV","toArrayLike","Buffer","serializeStacksMessage","numArgs","alloc","writeUInt32BE","length","forEach","arg","concatBuffer","deserializePayload","bufferReader","readUInt8Enum","n","deserializeCV","BigNum","readBuffer","deserializeMemoString","deserializeAddress","contractCallName","deserializeLPString","numberOfArgs","readUInt32BE","i","clarityValue","smartContractName"],"mappings":"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"}