{"version":3,"file":"keys.esm.js","sources":["../src/keys.ts"],"sourcesContent":["import {\n  AddressHashMode,\n  AddressVersion,\n  COMPRESSED_PUBKEY_LENGTH_BYTES,\n  UNCOMPRESSED_PUBKEY_LENGTH_BYTES,\n  StacksMessageType,\n  TransactionVersion,\n  PubKeyEncoding,\n} from './constants';\n\nimport {\n  BufferArray,\n  hash160,\n  hashP2PKH,\n  hexStringToInt,\n  intToHexString,\n  leftPadHexToLength,\n  randomBytes,\n} from './utils';\n\nimport { ec as EC } from 'elliptic';\n\nimport { MessageSignature, createMessageSignature } from './authorization';\nimport { BufferReader } from './bufferReader';\nimport { c32address } from 'c32check';\nimport { addressHashModeToVersion, addressFromVersionHash, addressToString } from './types';\n\nexport interface StacksPublicKey {\n  readonly type: StacksMessageType.PublicKey;\n  readonly data: Buffer;\n}\n\n/** Creates a P2PKH address string from the given private key and tx version. */\nexport function getAddressFromPrivateKey(\n  /** Private key buffer or hex string */\n  privateKey: string | Buffer,\n  transactionVersion = TransactionVersion.Mainnet\n): string {\n  const pubKey = pubKeyfromPrivKey(privateKey);\n  return getAddressFromPublicKey(pubKey.data, transactionVersion);\n}\n\n/** Creates a P2PKH address string from the given public key and tx version. */\nexport function getAddressFromPublicKey(\n  /** Public key buffer or hex string */\n  publicKey: string | Buffer,\n  transactionVersion = TransactionVersion.Mainnet\n): string {\n  publicKey = typeof publicKey === 'string' ? publicKey : publicKey.toString('hex');\n  const addrVer = addressHashModeToVersion(AddressHashMode.SerializeP2PKH, transactionVersion);\n  const addr = addressFromVersionHash(addrVer, hashP2PKH(Buffer.from(publicKey, 'hex')));\n  const addrString = addressToString(addr);\n  return addrString;\n}\n\nexport function createStacksPublicKey(key: string): StacksPublicKey {\n  return {\n    type: StacksMessageType.PublicKey,\n    data: Buffer.from(key, 'hex'),\n  };\n}\n\nexport function publicKeyFromSignature(\n  message: string,\n  messageSignature: MessageSignature,\n  pubKeyEncoding = PubKeyEncoding.Compressed\n) {\n  const ec = new EC('secp256k1');\n  const messageBN = ec.keyFromPrivate(message, 'hex').getPrivate().toString(10);\n\n  const parsedSignature = parseRecoverableSignature(messageSignature.data);\n\n  const publicKey = ec.recoverPubKey(\n    messageBN,\n    parsedSignature,\n    parsedSignature.recoveryParam,\n    'hex'\n  );\n\n  if (pubKeyEncoding == PubKeyEncoding.Uncompressed) {\n    return publicKey.encode('hex');\n  }\n\n  return publicKey.encodeCompressed('hex');\n}\n\nexport function publicKeyFromBuffer(data: Buffer): StacksPublicKey {\n  return { type: StacksMessageType.PublicKey, data };\n}\n\nexport function isCompressed(key: StacksPublicKey): boolean {\n  return !key.data.toString('hex').startsWith('04');\n}\n\nexport function publicKeyToString(key: StacksPublicKey): string {\n  return key.data.toString('hex');\n}\n\nexport function serializePublicKey(key: StacksPublicKey): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.push(key.data);\n  return bufferArray.concatBuffer();\n}\n\nexport function pubKeyfromPrivKey(privateKey: string | Buffer): StacksPublicKey {\n  const privKey = createStacksPrivateKey(privateKey);\n  const ec = new EC('secp256k1');\n  const keyPair = ec.keyFromPrivate(privKey.data.toString('hex').slice(0, 64), 'hex');\n  const pubKey = keyPair.getPublic(privKey.compressed, 'hex');\n  return createStacksPublicKey(pubKey);\n}\n\nexport function compressPublicKey(publicKey: string | Buffer): StacksPublicKey {\n  const ec = new EC('secp256k1');\n  const key = ec.keyFromPublic(publicKey);\n  const pubKey = key.getPublic(true, 'hex');\n  return createStacksPublicKey(pubKey);\n}\n\nexport function deserializePublicKey(bufferReader: BufferReader): StacksPublicKey {\n  const fieldId = bufferReader.readUInt8();\n  const keyLength =\n    fieldId !== 4 ? COMPRESSED_PUBKEY_LENGTH_BYTES : UNCOMPRESSED_PUBKEY_LENGTH_BYTES;\n  return publicKeyFromBuffer(\n    Buffer.concat([Buffer.from([fieldId]), bufferReader.readBuffer(keyLength)])\n  );\n}\n\nexport interface StacksPrivateKey {\n  data: Buffer;\n  compressed: boolean;\n}\n\nexport function createStacksPrivateKey(key: string | Buffer): StacksPrivateKey {\n  const data = typeof key === 'string' ? Buffer.from(key, 'hex') : key;\n  let compressed: boolean;\n  if (data.length === 33) {\n    if (data[data.length - 1] !== 1) {\n      throw new Error(\n        'Improperly formatted private-key. 33 byte length usually ' +\n          'indicates compressed key, but last byte must be == 0x01'\n      );\n    }\n    compressed = true;\n  } else if (data.length === 32) {\n    compressed = false;\n  } else {\n    throw new Error(\n      `Improperly formatted private-key hex string: length should be 32 or 33 bytes, provided with length ${data.length}`\n    );\n  }\n  return { data, compressed };\n}\n\nexport function makeRandomPrivKey(entropy?: Buffer): StacksPrivateKey {\n  const ec = new EC('secp256k1');\n  const options = { entropy: entropy || randomBytes(32) };\n  const keyPair = ec.genKeyPair(options);\n  const privateKey = keyPair.getPrivate().toString('hex', 32);\n  return createStacksPrivateKey(privateKey);\n}\n\nexport function signWithKey(privateKey: StacksPrivateKey, input: string): MessageSignature {\n  const ec = new EC('secp256k1');\n  const key = ec.keyFromPrivate(privateKey.data.toString('hex').slice(0, 64), 'hex');\n  const signature = key.sign(input, 'hex', { canonical: true });\n  const coordinateValueBytes = 32;\n  const r = leftPadHexToLength(signature.r.toString('hex'), coordinateValueBytes * 2);\n  const s = leftPadHexToLength(signature.s.toString('hex'), coordinateValueBytes * 2);\n  if (signature.recoveryParam === undefined || signature.recoveryParam === null) {\n    throw new Error('\"signature.recoveryParam\" is not set');\n  }\n  const recoveryParam = intToHexString(signature.recoveryParam, 1);\n  const recoverableSignatureString = recoveryParam + r + s;\n  return createMessageSignature(recoverableSignatureString);\n}\n\nexport function getSignatureRecoveryParam(signature: string) {\n  const coordinateValueBytes = 32;\n  if (signature.length < coordinateValueBytes * 2 * 2 + 1) {\n    throw new Error('Invalid signature');\n  }\n  const recoveryParamHex = signature.substr(0, 2);\n  return hexStringToInt(recoveryParamHex);\n}\n\nexport function parseRecoverableSignature(signature: string) {\n  const coordinateValueBytes = 32;\n  if (signature.length < coordinateValueBytes * 2 * 2 + 1) {\n    throw new Error('Invalid signature');\n  }\n  const recoveryParamHex = signature.substr(0, 2);\n  const r = signature.substr(2, coordinateValueBytes * 2);\n  const s = signature.substr(2 + coordinateValueBytes * 2, coordinateValueBytes * 2);\n  return {\n    recoveryParam: hexStringToInt(recoveryParamHex),\n    r,\n    s,\n  };\n}\n\nexport function getPublicKey(privateKey: StacksPrivateKey): StacksPublicKey {\n  return pubKeyfromPrivKey(privateKey.data);\n}\n\nexport function privateKeyToString(privateKey: StacksPrivateKey): string {\n  return privateKey.data.toString('hex');\n}\n\nexport function publicKeyToAddress(version: AddressVersion, publicKey: StacksPublicKey): string {\n  return c32address(version, hash160(publicKey.data).toString('hex'));\n}\n"],"names":["getAddressFromPrivateKey","privateKey","transactionVersion","TransactionVersion","Mainnet","pubKey","pubKeyfromPrivKey","getAddressFromPublicKey","data","publicKey","toString","addrVer","addressHashModeToVersion","AddressHashMode","SerializeP2PKH","addr","addressFromVersionHash","hashP2PKH","Buffer","from","addrString","addressToString","createStacksPublicKey","key","type","StacksMessageType","PublicKey","publicKeyFromSignature","message","messageSignature","pubKeyEncoding","PubKeyEncoding","Compressed","ec","EC","messageBN","keyFromPrivate","getPrivate","parsedSignature","parseRecoverableSignature","recoverPubKey","recoveryParam","Uncompressed","encode","encodeCompressed","publicKeyFromBuffer","isCompressed","startsWith","publicKeyToString","serializePublicKey","bufferArray","BufferArray","push","concatBuffer","privKey","createStacksPrivateKey","keyPair","slice","getPublic","compressed","compressPublicKey","keyFromPublic","deserializePublicKey","bufferReader","fieldId","readUInt8","keyLength","COMPRESSED_PUBKEY_LENGTH_BYTES","UNCOMPRESSED_PUBKEY_LENGTH_BYTES","concat","readBuffer","length","Error","makeRandomPrivKey","entropy","options","randomBytes","genKeyPair","signWithKey","input","signature","sign","canonical","coordinateValueBytes","r","leftPadHexToLength","s","undefined","intToHexString","recoverableSignatureString","createMessageSignature","getSignatureRecoveryParam","recoveryParamHex","substr","hexStringToInt","getPublicKey","privateKeyToString","publicKeyToAddress","version","c32address","hash160"],"mappings":"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"}