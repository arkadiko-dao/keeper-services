{"version":3,"file":"builders.esm.js","sources":["../src/builders.ts"],"sourcesContent":["import { StacksTransaction } from './transaction';\n\nimport { StacksNetwork, StacksMainnet, StacksTestnet } from '@stacks/network';\n\nimport {\n  createTokenTransferPayload,\n  createSmartContractPayload,\n  createContractCallPayload,\n} from './payload';\n\nimport {\n  StandardAuthorization,\n  SponsoredAuthorization,\n  createSingleSigSpendingCondition,\n  createMultiSigSpendingCondition,\n} from './authorization';\n\nimport {\n  publicKeyToString,\n  createStacksPrivateKey,\n  getPublicKey,\n  publicKeyToAddress,\n  pubKeyfromPrivKey,\n  publicKeyFromBuffer,\n} from './keys';\n\nimport { TransactionSigner } from './signer';\n\nimport {\n  PostCondition,\n  STXPostCondition,\n  FungiblePostCondition,\n  NonFungiblePostCondition,\n  createSTXPostCondition,\n  createFungiblePostCondition,\n  createNonFungiblePostCondition,\n} from './postcondition';\n\nimport {\n  AddressHashMode,\n  AddressVersion,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  PostConditionMode,\n  PayloadType,\n  AnchorMode,\n  TransactionVersion,\n  TxRejectedReason,\n  SingleSigHashMode,\n} from './constants';\n\nimport { AssetInfo, createLPList, createStandardPrincipal, createContractPrincipal } from './types';\n\nimport { cvToHex, parseReadOnlyResponse, omit } from './utils';\n\nimport { fetchPrivate } from '@stacks/common';\n\nimport BigNum from 'bn.js';\nimport { ClarityValue, PrincipalCV } from './clarity';\nimport { validateContractCall, ClarityAbi } from './contract-abi';\nimport { c32address } from 'c32check';\n\n/**\n * Lookup the nonce for an address from a core node\n *\n * @param {string} address - the c32check address to look up\n * @param {StacksNetwork} network - the Stacks network to look up address on\n *\n * @return a promise that resolves to an integer\n */\nexport async function getNonce(address: string, network?: StacksNetwork): Promise<BigNum> {\n  const defaultNetwork = new StacksMainnet();\n  const url = network\n    ? network.getAccountApiUrl(address)\n    : defaultNetwork.getAccountApiUrl(address);\n\n  const response = await fetchPrivate(url);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error fetching nonce. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const result = (await response.json()) as { nonce: string };\n  return new BigNum(result.nonce);\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a token transfer\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateTransfer(\n  transaction: StacksTransaction,\n  network?: StacksNetwork\n): Promise<BigNum> {\n  if (transaction.payload.payloadType !== PayloadType.TokenTransfer) {\n    throw new Error(\n      `Transaction fee estimation only possible with ${\n        PayloadType[PayloadType.TokenTransfer]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  const defaultNetwork = new StacksMainnet();\n  const url = network\n    ? network.getTransferFeeEstimateApiUrl()\n    : defaultNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await fetchPrivate(url, fetchOptions);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = new BigNum(transaction.serialize().byteLength);\n  const feeRate = new BigNum(feeRateResult);\n  return feeRate.mul(txBytes);\n}\n\nexport type TxBroadcastResultOk = string;\nexport type TxBroadcastResultRejected = {\n  error: string;\n  reason: TxRejectedReason;\n  reason_data: any;\n  txid: string;\n};\nexport type TxBroadcastResult = TxBroadcastResultOk | TxBroadcastResultRejected;\n\n/**\n * Broadcast the signed transaction to a core node\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to broadcast\n * @param {StacksNetwork} network - the Stacks network to broadcast transaction to\n *\n * @returns {Promise} that resolves to a response if the operation succeeds\n */\nexport async function broadcastTransaction(\n  transaction: StacksTransaction,\n  network: StacksNetwork,\n  attachment?: Buffer\n): Promise<TxBroadcastResult> {\n  const rawTx = transaction.serialize();\n  const url = network.getBroadcastApiUrl();\n\n  return broadcastRawTransaction(rawTx, url, attachment);\n}\n\n/**\n * Broadcast the signed transaction to a core node\n *\n * @param {Buffer} rawTx - the raw serialized transaction buffer to broadcast\n * @param {string} url - the broadcast endpoint URL\n *\n * @returns {Promise} that resolves to a response if the operation succeeds\n */\nexport async function broadcastRawTransaction(\n  rawTx: Buffer,\n  url: string,\n  attachment?: Buffer\n): Promise<TxBroadcastResult> {\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': attachment ? 'application/json' : 'application/octet-stream' },\n    body: attachment\n      ? JSON.stringify({\n          tx: rawTx.toString('hex'),\n          attachment: attachment.toString('hex'),\n        })\n      : rawTx,\n  };\n\n  const response = await fetchPrivate(url, options);\n  if (!response.ok) {\n    try {\n      return (await response.json()) as TxBroadcastResult;\n    } catch (e) {\n      throw Error(`Failed to broadcast transaction: ${(e as Error).message}`);\n    }\n  }\n\n  const text = await response.text();\n  try {\n    return JSON.parse(text) as TxBroadcastResult;\n  } catch (e) {\n    return text;\n  }\n}\n\n/**\n * Fetch a contract's ABI\n *\n * @param {string} address - the contracts address\n * @param {string} contractName - the contracts name\n * @param {StacksNetwork} network - the Stacks network to broadcast transaction to\n *\n * @returns {Promise} that resolves to a ClarityAbi if the operation succeeds\n */\nexport async function getAbi(\n  address: string,\n  contractName: string,\n  network: StacksNetwork\n): Promise<ClarityAbi> {\n  const options = {\n    method: 'GET',\n  };\n\n  const url = network.getAbiApiUrl(address, contractName);\n\n  const response = await fetchPrivate(url, options);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error fetching contract ABI for contract \"${contractName}\" at address ${address}. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return JSON.parse(await response.text()) as ClarityAbi;\n}\n\nexport interface MultiSigOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys?: string[];\n}\n\n/**\n * STX token transfer transaction options\n *\n * @param  {String|PrincipalCV} recipientAddress - the c32check address of the recipient or a\n *                                                  principal clarity value\n * @param  {BigNum} amount - number of tokens to transfer in microstacks\n * @param  {BigNum} fee - transaction fee in microstacks\n * @param  {BigNum} nonce - a nonce must be increased monotonically with each new transaction\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param  {anchorMode} anchorMode - identify how the the transaction should be mined\n * @param  {String} memo - an arbitrary string to include with the transaction, must be less than\n *                          34 bytes\n * @param  {PostConditionMode} postConditionMode - whether post conditions must fully cover all\n *                                                 transferred assets\n * @param  {PostCondition[]} postConditions - an array of post conditions to add to the\n *                                                  transaction\n * @param  {Boolean} sponsored - true if another account is sponsoring the transaction fees\n */\nexport interface TokenTransferOptions {\n  recipient: string | PrincipalCV;\n  amount: BigNum;\n  fee?: BigNum;\n  nonce?: BigNum;\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  memo?: string;\n  postConditionMode?: PostConditionMode;\n  postConditions?: PostCondition[];\n  sponsored?: boolean;\n}\n\nexport interface UnsignedTokenTransferOptions extends TokenTransferOptions {\n  publicKey: string;\n}\n\nexport interface SignedTokenTransferOptions extends TokenTransferOptions {\n  senderKey: string;\n}\n\nexport interface UnsignedMultiSigTokenTransferOptions extends TokenTransferOptions {\n  numSignatures: number;\n  publicKeys: string[];\n}\n\nexport interface SignedMultiSigTokenTransferOptions extends TokenTransferOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys: string[];\n}\n\n/**\n * Generates an unsigned Stacks token transfer transaction\n *\n * Returns a Stacks token transfer transaction.\n *\n * @param  {UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {Promis<StacksTransaction>}\n */\nexport async function makeUnsignedSTXTokenTransfer(\n  txOptions: UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: new BigNum(0),\n    nonce: new BigNum(0),\n    network: new StacksMainnet(),\n    anchorMode: AnchorMode.Any,\n    postConditionMode: PostConditionMode.Deny,\n    memo: '',\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createTokenTransferPayload(options.recipient, options.amount, options.memo);\n\n  let authorization = null;\n  let spendingCondition = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.SerializeP2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    spendingCondition = createMultiSigSpendingCondition(\n      AddressHashMode.SerializeP2SH,\n      options.numSignatures,\n      options.publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  if (options.sponsored) {\n    authorization = new SponsoredAuthorization(spendingCondition);\n  } else {\n    authorization = new StandardAuthorization(spendingCondition);\n  }\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n\n  const lpPostConditions = createLPList(postConditions);\n  const transaction = new StacksTransaction(\n    options.network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    defaultOptions.anchorMode,\n    options.network.chainId\n  );\n\n  if (!txOptions.fee) {\n    const txFee = await estimateTransfer(transaction, options.network);\n    transaction.setFee(txFee);\n  }\n\n  if (!txOptions.nonce) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a signed Stacks token transfer transaction\n *\n * Returns a signed Stacks token transfer transaction.\n *\n * @param  {SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {StacksTransaction}\n */\nexport async function makeSTXTokenTransfer(\n  txOptions: SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions\n): Promise<StacksTransaction> {\n  if ('senderKey' in txOptions) {\n    const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedSTXTokenTransfer({ publicKey, ...options });\n\n    const privKey = createStacksPrivateKey(txOptions.senderKey);\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedSTXTokenTransfer(options);\n\n    const signer = new TransactionSigner(transaction);\n    let pubKeys = txOptions.publicKeys;\n    for (const key of txOptions.signerKeys) {\n      const pubKey = pubKeyfromPrivKey(key);\n      pubKeys = pubKeys.filter(pk => pk !== pubKey.data.toString('hex'));\n      signer.signOrigin(createStacksPrivateKey(key));\n    }\n\n    for (const key of pubKeys) {\n      signer.appendOrigin(publicKeyFromBuffer(Buffer.from(key, 'hex')));\n    }\n\n    return transaction;\n  }\n}\n\n/**\n * Contract deploy transaction options\n *\n * @param  {String} contractName - the contract name\n * @param  {String} codeBody - the code body string\n * @param  {String} senderKey - hex string sender private key used to sign transaction\n * @param  {BigNum} fee - transaction fee in microstacks\n * @param  {BigNum} nonce - a nonce must be increased monotonically with each new transaction\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param  {anchorMode} anchorMode - identify how the the transaction should be mined\n * @param  {PostConditionMode} postConditionMode - whether post conditions must fully cover all\n *                                                 transferred assets\n * @param  {PostCondition[]} postConditions - an array of post conditions to add to the\n *                                                  transaction\n * @param  {Boolean} sponsored - true if another account is sponsoring the transaction fees\n */\nexport interface ContractDeployOptions {\n  contractName: string;\n  codeBody: string;\n  senderKey: string;\n  fee?: BigNum;\n  nonce?: BigNum;\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  postConditionMode?: PostConditionMode;\n  postConditions?: PostCondition[];\n  sponsored?: boolean;\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a contract deploy\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateContractDeploy(\n  transaction: StacksTransaction,\n  network?: StacksNetwork\n): Promise<BigNum> {\n  if (transaction.payload.payloadType !== PayloadType.SmartContract) {\n    throw new Error(\n      `Contract deploy fee estimation only possible with ${\n        PayloadType[PayloadType.SmartContract]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  // Place holder estimate until contract deploy fee estimation is fully implemented on Stacks\n  // blockchain core\n  const defaultNetwork = new StacksMainnet();\n  const url = network\n    ? network.getTransferFeeEstimateApiUrl()\n    : defaultNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await fetchPrivate(url, fetchOptions);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error estimating contract deploy fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = new BigNum(transaction.serialize().byteLength);\n  const feeRate = new BigNum(feeRateResult);\n  return feeRate.mul(txBytes);\n}\n\n/**\n * Generates a Clarity smart contract deploy transaction\n *\n * @param  {ContractDeployOptions} txOptions - an options object for the contract deploy\n *\n * Returns a signed Stacks smart contract deploy transaction.\n *\n * @return {StacksTransaction}\n */\nexport async function makeContractDeploy(\n  txOptions: ContractDeployOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: new BigNum(0),\n    nonce: new BigNum(0),\n    network: new StacksMainnet(),\n    anchorMode: AnchorMode.Any,\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createSmartContractPayload(options.contractName, options.codeBody);\n\n  const addressHashMode = AddressHashMode.SerializeP2PKH;\n  const privKey = createStacksPrivateKey(options.senderKey);\n  const pubKey = getPublicKey(privKey);\n\n  let authorization = null;\n\n  const spendingCondition = createSingleSigSpendingCondition(\n    addressHashMode,\n    publicKeyToString(pubKey),\n    options.nonce,\n    options.fee\n  );\n\n  if (options.sponsored) {\n    authorization = new SponsoredAuthorization(spendingCondition);\n  } else {\n    authorization = new StandardAuthorization(spendingCondition);\n  }\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n\n  const lpPostConditions = createLPList(postConditions);\n  const transaction = new StacksTransaction(\n    options.network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    options.network.chainId\n  );\n\n  if (!txOptions.fee) {\n    const txFee = await estimateContractDeploy(transaction, options.network);\n    transaction.setFee(txFee);\n  }\n\n  if (!txOptions.nonce) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = publicKeyToAddress(addressVersion, pubKey);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  if (options.senderKey) {\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n  }\n\n  return transaction;\n}\n\n/**\n * Contract function call transaction options\n * @param  {String} contractAddress - the c32check address of the contract\n * @param  {String} contractName - the contract name\n * @param  {String} functionName - name of the function to be called\n * @param  {[ClarityValue]} functionArgs - an array of Clarity values as arguments to the function call\n * @param  {String} senderKey - hex string sender private key used to sign transaction\n * @param  {BigNum} fee - transaction fee in microstacks\n * @param  {BigNum} nonce - a nonce must be increased monotonically with each new transaction\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param  {anchorMode} anchorMode - identify how the the transaction should be mined\n * @param  {PostConditionMode} postConditionMode - whether post conditions must fully cover all\n *                                                 transferred assets\n * @param  {PostCondition[]} postConditions - an array of post conditions to add to the\n *                                                  transaction\n * @param  {Boolean} sponsored - true if another account is sponsoring the transaction fees\n */\nexport interface ContractCallOptions {\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  fee?: BigNum;\n  feeEstimateApiUrl?: string;\n  nonce?: BigNum;\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  postConditionMode?: PostConditionMode;\n  postConditions?: PostCondition[];\n  validateWithAbi?: boolean | ClarityAbi;\n  sponsored?: boolean;\n}\n\nexport interface UnsignedContractCallOptions extends ContractCallOptions {\n  publicKey: string;\n}\n\nexport interface SignedContractCallOptions extends ContractCallOptions {\n  senderKey: string;\n}\n\nexport interface UnsignedMultiSigContractCallOptions extends ContractCallOptions {\n  numSignatures: number;\n  publicKeys: string[];\n}\n\nexport interface SignedMultiSigContractCallOptions extends ContractCallOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys: string[];\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a contract function call\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateContractFunctionCall(\n  transaction: StacksTransaction,\n  network?: StacksNetwork\n): Promise<BigNum> {\n  if (transaction.payload.payloadType !== PayloadType.ContractCall) {\n    throw new Error(\n      `Contract call fee estimation only possible with ${\n        PayloadType[PayloadType.ContractCall]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  // Place holder estimate until contract call fee estimation is fully implemented on Stacks\n  // blockchain core\n  const defaultNetwork = new StacksMainnet();\n  const url = network\n    ? network.getTransferFeeEstimateApiUrl()\n    : defaultNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await fetchPrivate(url, fetchOptions);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error estimating contract call fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = new BigNum(transaction.serialize().byteLength);\n  const feeRate = new BigNum(feeRateResult);\n  return feeRate.mul(txBytes);\n}\n\n/**\n * Generates an unsigned Clarity smart contract function call transaction\n *\n * @param {UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions} txOptions - an options object for the contract call\n *\n * @returns {Promise<StacksTransaction>}\n */\nexport async function makeUnsignedContractCall(\n  txOptions: UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: new BigNum(0),\n    nonce: new BigNum(0),\n    network: new StacksMainnet(),\n    anchorMode: AnchorMode.Any,\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createContractCallPayload(\n    options.contractAddress,\n    options.contractName,\n    options.functionName,\n    options.functionArgs\n  );\n\n  if (options?.validateWithAbi) {\n    let abi: ClarityAbi;\n    if (typeof options.validateWithAbi === 'boolean') {\n      if (options?.network) {\n        abi = await getAbi(options.contractAddress, options.contractName, options.network);\n      } else {\n        throw new Error('Network option must be provided in order to validate with ABI');\n      }\n    } else {\n      abi = options.validateWithAbi;\n    }\n\n    validateContractCall(payload, abi);\n  }\n\n  let spendingCondition = null;\n  let authorization = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.SerializeP2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    spendingCondition = createMultiSigSpendingCondition(\n      AddressHashMode.SerializeP2SH,\n      options.numSignatures,\n      options.publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  if (options.sponsored) {\n    authorization = new SponsoredAuthorization(spendingCondition);\n  } else {\n    authorization = new StandardAuthorization(spendingCondition);\n  }\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n\n  const lpPostConditions = createLPList(postConditions);\n  const transaction = new StacksTransaction(\n    options.network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    options.network.chainId\n  );\n\n  if (!txOptions.fee) {\n    const txFee = await estimateContractFunctionCall(transaction, options.network);\n    transaction.setFee(txFee);\n  }\n\n  if (!txOptions.nonce) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a Clarity smart contract function call transaction\n *\n * @param  {SignedContractCallOptions | SignedMultiSigContractCallOptions} txOptions - an options object for the contract function call\n *\n * Returns a signed Stacks smart contract function call transaction.\n *\n * @return {StacksTransaction}\n */\nexport async function makeContractCall(\n  txOptions: SignedContractCallOptions | SignedMultiSigContractCallOptions\n): Promise<StacksTransaction> {\n  if ('senderKey' in txOptions) {\n    const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedContractCall({ publicKey, ...options });\n\n    const privKey = createStacksPrivateKey(txOptions.senderKey);\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedContractCall(options);\n\n    const signer = new TransactionSigner(transaction);\n    let pubKeys = txOptions.publicKeys;\n    for (const key of txOptions.signerKeys) {\n      const pubKey = pubKeyfromPrivKey(key);\n      pubKeys = pubKeys.filter(pk => pk !== pubKey.data.toString('hex'));\n      signer.signOrigin(createStacksPrivateKey(key));\n    }\n\n    for (const key of pubKeys) {\n      signer.appendOrigin(publicKeyFromBuffer(Buffer.from(key, 'hex')));\n    }\n\n    return transaction;\n  }\n}\n\n/**\n * Generates a STX post condition with a standard principal\n *\n * Returns a STX post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {BigNum} amount - the amount of STX tokens\n *\n * @return {STXPostCondition}\n */\nexport function makeStandardSTXPostCondition(\n  address: string,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum\n): STXPostCondition {\n  return createSTXPostCondition(createStandardPrincipal(address), conditionCode, amount);\n}\n\n/**\n * Generates a STX post condition with a contract principal\n *\n * Returns a STX post condition object\n *\n * @param  {String} address - the c32check address of the contract\n * @param  {String} contractName - the name of the contract\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {BigNum} amount - the amount of STX tokens\n *\n * @return {STXPostCondition}\n */\nexport function makeContractSTXPostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum\n): STXPostCondition {\n  return createSTXPostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    amount\n  );\n}\n\n/**\n * Generates a fungible token post condition with a standard principal\n *\n * Returns a fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {BigNum} amount - the amount of fungible tokens\n * @param  {AssetInfo} assetInfo - asset info describing the fungible token\n *\n * @return {FungiblePostCondition}\n */\nexport function makeStandardFungiblePostCondition(\n  address: string,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  return createFungiblePostCondition(\n    createStandardPrincipal(address),\n    conditionCode,\n    amount,\n    assetInfo\n  );\n}\n\n/**\n * Generates a fungible token post condition with a contract principal\n *\n * Returns a fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {String} contractName - the name of the contract\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {BigNum} amount - the amount of fungible tokens\n * @param  {AssetInfo} assetInfo - asset info describing the fungible token\n *\n * @return {FungiblePostCondition}\n */\nexport function makeContractFungiblePostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  return createFungiblePostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    amount,\n    assetInfo\n  );\n}\n\n/**\n * Generates a non-fungible token post condition with a standard principal\n *\n * Returns a non-fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {AssetInfo} assetInfo - asset info describing the non-fungible token\n * @param  {ClarityValue} assetName - asset name describing the non-fungible token\n *\n * @return {NonFungiblePostCondition}\n */\nexport function makeStandardNonFungiblePostCondition(\n  address: string,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  return createNonFungiblePostCondition(\n    createStandardPrincipal(address),\n    conditionCode,\n    assetInfo,\n    assetName\n  );\n}\n\n/**\n * Generates a non-fungible token post condition with a contract principal\n *\n * Returns a non-fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {String} contractName - the name of the contract\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {AssetInfo} assetInfo - asset info describing the non-fungible token\n * @param  {ClarityValue} assetName - asset name describing the non-fungible token\n *\n * @return {NonFungiblePostCondition}\n */\nexport function makeContractNonFungiblePostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  return createNonFungiblePostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    assetInfo,\n    assetName\n  );\n}\n\n/**\n * Read only function options\n *\n * @param  {String} contractAddress - the c32check address of the contract\n * @param  {String} contractName - the contract name\n * @param  {String} functionName - name of the function to be called\n * @param  {[ClarityValue]} functionArgs - an array of Clarity values as arguments to the function call\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param  {String} senderAddress - the c32check address of the sender\n */\n\nexport interface ReadOnlyFunctionOptions {\n  contractName: string;\n  contractAddress: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  network?: StacksNetwork;\n  senderAddress: string;\n}\n\n/**\n * Calls a read only function from a contract interface\n *\n * @param  {ReadOnlyFunctionOptions} readOnlyFunctionOptions - the options object\n *\n * Returns an object with a status bool (okay) and a result string that is a serialized clarity value in hex format.\n *\n * @return {ClarityValue}\n */\nexport async function callReadOnlyFunction(\n  readOnlyFunctionOptions: ReadOnlyFunctionOptions\n): Promise<ClarityValue> {\n  const defaultOptions = {\n    network: new StacksMainnet(),\n  };\n\n  const options = Object.assign(defaultOptions, readOnlyFunctionOptions);\n\n  const {\n    contractName,\n    contractAddress,\n    functionName,\n    functionArgs,\n    network,\n    senderAddress,\n  } = options;\n\n  const url = network.getReadOnlyFunctionCallApiUrl(contractAddress, contractName, functionName);\n\n  const args = functionArgs.map(arg => cvToHex(arg));\n\n  const body = JSON.stringify({\n    sender: senderAddress,\n    arguments: args,\n  });\n\n  const response = await fetchPrivate(url, {\n    method: 'POST',\n    body,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error calling read-only function. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return response.json().then(responseJson => parseReadOnlyResponse(responseJson));\n}\n\n/**\n * Sponsored transaction options\n *\n * @param  {StacksTransaction} transaction - the origin-signed transaction to sponsor\n * @param  {String} sponsorPrivateKey - the sponsor's private key\n * @param  {BigNum} fee - the transaction fee amount to sponsor\n * @param  {BigNum} sponsorNonce - the nonce of the sponsor account\n * @param  {AddressHashMode} sponsorAddressHashmode - the sponsor address hashmode\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n */\nexport interface SponsorOptions {\n  transaction: StacksTransaction;\n  sponsorPrivateKey: string;\n  fee?: BigNum;\n  sponsorNonce?: BigNum;\n  sponsorAddressHashmode?: AddressHashMode;\n  network?: StacksNetwork;\n}\n\n/**\n * Constructs and signs a sponsored transaction as the sponsor\n *\n * @param  {SponsorOptions} sponsorOptions - the sponsor options object\n *\n * Returns a signed sponsored transaction.\n *\n * @return {ClarityValue}\n */\nexport async function sponsorTransaction(\n  sponsorOptions: SponsorOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: new BigNum(0),\n    sponsorNonce: new BigNum(0),\n    sponsorAddressHashmode: AddressHashMode.SerializeP2PKH as SingleSigHashMode,\n  };\n\n  const options = Object.assign(defaultOptions, sponsorOptions);\n  const network =\n    sponsorOptions.network ??\n    (options.transaction.version === TransactionVersion.Mainnet\n      ? new StacksMainnet()\n      : new StacksTestnet());\n  const sponsorPubKey = pubKeyfromPrivKey(options.sponsorPrivateKey);\n\n  if (!sponsorOptions.fee) {\n    let txFee = new BigNum(0);\n    switch (options.transaction.payload.payloadType) {\n      case PayloadType.TokenTransfer:\n        txFee = await estimateTransfer(options.transaction, network);\n        break;\n      case PayloadType.SmartContract:\n        txFee = await estimateContractDeploy(options.transaction, network);\n        break;\n      case PayloadType.ContractCall:\n        txFee = await estimateContractFunctionCall(options.transaction, network);\n        break;\n      default:\n        throw new Error(\n          `Sponsored transactions not supported for transaction type ${\n            PayloadType[options.transaction.payload.payloadType]\n          }`\n        );\n    }\n    options.transaction.setFee(txFee);\n    options.fee = txFee;\n  }\n\n  if (!sponsorOptions.sponsorNonce) {\n    const addressVersion =\n      network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n\n    const senderAddress = publicKeyToAddress(addressVersion, sponsorPubKey);\n    const sponsorNonce = await getNonce(senderAddress, network);\n    options.sponsorNonce = sponsorNonce;\n  }\n\n  const sponsorSpendingCondition = createSingleSigSpendingCondition(\n    options.sponsorAddressHashmode,\n    publicKeyToString(sponsorPubKey),\n    options.sponsorNonce,\n    options.fee\n  );\n\n  options.transaction.setSponsor(sponsorSpendingCondition);\n\n  const privKey = createStacksPrivateKey(options.sponsorPrivateKey);\n  const signer = TransactionSigner.createSponsorSigner(\n    options.transaction,\n    sponsorSpendingCondition\n  );\n  signer.signSponsor(privKey);\n\n  return options.transaction;\n}\n"],"names":["getNonce","address","network","defaultNetwork","StacksMainnet","url","getAccountApiUrl","fetchPrivate","response","ok","msg","text","Error","status","statusText","json","result","BigNum","nonce","estimateTransfer","transaction","payload","payloadType","PayloadType","TokenTransfer","requestHeaders","Accept","fetchOptions","method","headers","getTransferFeeEstimateApiUrl","feeRateResult","txBytes","serialize","byteLength","feeRate","mul","broadcastTransaction","attachment","rawTx","getBroadcastApiUrl","broadcastRawTransaction","options","body","JSON","stringify","tx","toString","message","parse","getAbi","contractName","getAbiApiUrl","makeUnsignedSTXTokenTransfer","txOptions","defaultOptions","fee","anchorMode","AnchorMode","Any","postConditionMode","PostConditionMode","Deny","memo","sponsored","Object","assign","createTokenTransferPayload","recipient","amount","authorization","spendingCondition","createSingleSigSpendingCondition","AddressHashMode","SerializeP2PKH","publicKey","createMultiSigSpendingCondition","SerializeP2SH","numSignatures","publicKeys","SponsoredAuthorization","StandardAuthorization","postConditions","length","forEach","postCondition","push","lpPostConditions","createLPList","StacksTransaction","version","chainId","txFee","setFee","addressVersion","TransactionVersion","Mainnet","AddressVersion","MainnetSingleSig","TestnetSingleSig","senderAddress","c32address","auth","signer","txNonce","setNonce","makeSTXTokenTransfer","publicKeyToString","getPublicKey","createStacksPrivateKey","senderKey","omit","privKey","TransactionSigner","signOrigin","pubKeys","key","pubKey","pubKeyfromPrivKey","filter","pk","data","signerKeys","appendOrigin","publicKeyFromBuffer","Buffer","from","estimateContractDeploy","SmartContract","makeContractDeploy","createSmartContractPayload","codeBody","addressHashMode","publicKeyToAddress","estimateContractFunctionCall","ContractCall","makeUnsignedContractCall","createContractCallPayload","contractAddress","functionName","functionArgs","validateWithAbi","abi","validateContractCall","makeContractCall","makeStandardSTXPostCondition","conditionCode","createSTXPostCondition","createStandardPrincipal","makeContractSTXPostCondition","createContractPrincipal","makeStandardFungiblePostCondition","assetInfo","createFungiblePostCondition","makeContractFungiblePostCondition","makeStandardNonFungiblePostCondition","assetName","createNonFungiblePostCondition","makeContractNonFungiblePostCondition","callReadOnlyFunction","readOnlyFunctionOptions","getReadOnlyFunctionCallApiUrl","args","map","arg","cvToHex","sender","arguments","then","responseJson","parseReadOnlyResponse","sponsorTransaction","sponsorOptions","sponsorNonce","sponsorAddressHashmode","StacksTestnet","sponsorPubKey","sponsorPrivateKey","sponsorSpendingCondition","setSponsor","createSponsorSigner","signSponsor"],"mappings":"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"}