import { CLARITY_INT_SIZE } from '../constants.esm.js';
import { principalToString } from './types/principalCV.esm.js';

var ClarityType;

(function (ClarityType) {
  ClarityType[ClarityType["Int"] = 0] = "Int";
  ClarityType[ClarityType["UInt"] = 1] = "UInt";
  ClarityType[ClarityType["Buffer"] = 2] = "Buffer";
  ClarityType[ClarityType["BoolTrue"] = 3] = "BoolTrue";
  ClarityType[ClarityType["BoolFalse"] = 4] = "BoolFalse";
  ClarityType[ClarityType["PrincipalStandard"] = 5] = "PrincipalStandard";
  ClarityType[ClarityType["PrincipalContract"] = 6] = "PrincipalContract";
  ClarityType[ClarityType["ResponseOk"] = 7] = "ResponseOk";
  ClarityType[ClarityType["ResponseErr"] = 8] = "ResponseErr";
  ClarityType[ClarityType["OptionalNone"] = 9] = "OptionalNone";
  ClarityType[ClarityType["OptionalSome"] = 10] = "OptionalSome";
  ClarityType[ClarityType["List"] = 11] = "List";
  ClarityType[ClarityType["Tuple"] = 12] = "Tuple";
  ClarityType[ClarityType["StringASCII"] = 13] = "StringASCII";
  ClarityType[ClarityType["StringUTF8"] = 14] = "StringUTF8";
})(ClarityType || (ClarityType = {}));

function cvToString(val, encoding) {
  if (encoding === void 0) {
    encoding = 'hex';
  }

  switch (val.type) {
    case ClarityType.BoolTrue:
      return 'true';

    case ClarityType.BoolFalse:
      return 'false';

    case ClarityType.Int:
      return val.value.fromTwos(CLARITY_INT_SIZE).toString();

    case ClarityType.UInt:
      return "u" + val.value.toString();

    case ClarityType.Buffer:
      if (encoding === 'tryAscii') {
        var str = val.buffer.toString('ascii');

        if (/[ -~]/.test(str)) {
          return JSON.stringify(str);
        }
      }

      return "0x" + val.buffer.toString('hex');

    case ClarityType.OptionalNone:
      return 'none';

    case ClarityType.OptionalSome:
      return "(some " + cvToString(val.value, encoding) + ")";

    case ClarityType.ResponseErr:
      return "(err " + cvToString(val.value, encoding) + ")";

    case ClarityType.ResponseOk:
      return "(ok " + cvToString(val.value, encoding) + ")";

    case ClarityType.PrincipalStandard:
    case ClarityType.PrincipalContract:
      return principalToString(val);

    case ClarityType.List:
      return "(list " + val.list.map(function (v) {
        return cvToString(v, encoding);
      }).join(' ') + ")";

    case ClarityType.Tuple:
      return "(tuple " + Object.keys(val.data).map(function (key) {
        return "(" + key + " " + cvToString(val.data[key], encoding) + ")";
      }).join(' ') + ")";

    case ClarityType.StringASCII:
      return "\"" + val.data + "\"";

    case ClarityType.StringUTF8:
      return "u\"" + val.data + "\"";
  }
}
function cvToValue(val) {
  switch (val.type) {
    case ClarityType.BoolTrue:
      return true;

    case ClarityType.BoolFalse:
      return false;

    case ClarityType.Int:
      return val.value.fromTwos(CLARITY_INT_SIZE).toNumber();

    case ClarityType.UInt:
      return val.value.toNumber();

    case ClarityType.Buffer:
      return "0x" + val.buffer.toString('hex');

    case ClarityType.OptionalNone:
      return null;

    case ClarityType.OptionalSome:
      return cvToJSON(val.value);

    case ClarityType.ResponseErr:
      return cvToJSON(val.value);

    case ClarityType.ResponseOk:
      return cvToJSON(val.value);

    case ClarityType.PrincipalStandard:
    case ClarityType.PrincipalContract:
      return principalToString(val);

    case ClarityType.List:
      return val.list.map(function (v) {
        return cvToJSON(v);
      });

    case ClarityType.Tuple:
      var result = {};
      Object.keys(val.data).forEach(function (key) {
        result[key] = cvToJSON(val.data[key]);
      });
      return result;

    case ClarityType.StringASCII:
      return val.data;

    case ClarityType.StringUTF8:
      return val.data;
  }
}
function cvToJSON(val) {
  switch (val.type) {
    case ClarityType.ResponseErr:
      return {
        type: getCVTypeString(val),
        value: cvToValue(val),
        success: false
      };

    case ClarityType.ResponseOk:
      return {
        type: getCVTypeString(val),
        value: cvToValue(val),
        success: true
      };

    default:
      return {
        type: getCVTypeString(val),
        value: cvToValue(val)
      };
  }
}
function getCVTypeString(val) {
  switch (val.type) {
    case ClarityType.BoolTrue:
    case ClarityType.BoolFalse:
      return 'bool';

    case ClarityType.Int:
      return 'int';

    case ClarityType.UInt:
      return 'uint';

    case ClarityType.Buffer:
      return "(buff " + val.buffer.length + ")";

    case ClarityType.OptionalNone:
      return '(optional none)';

    case ClarityType.OptionalSome:
      return "(optional " + getCVTypeString(val.value) + ")";

    case ClarityType.ResponseErr:
      return "(response UnknownType " + getCVTypeString(val.value) + ")";

    case ClarityType.ResponseOk:
      return "(response " + getCVTypeString(val.value) + " UnknownType)";

    case ClarityType.PrincipalStandard:
    case ClarityType.PrincipalContract:
      return 'principal';

    case ClarityType.List:
      return "(list " + val.list.length + " " + getCVTypeString(val.list[0]) + ")";

    case ClarityType.Tuple:
      return "(tuple " + Object.keys(val.data).map(function (key) {
        return "(" + key + " " + getCVTypeString(val.data[key]) + ")";
      }).join(' ') + ")";

    case ClarityType.StringASCII:
      return "(string-ascii " + Buffer.from(val.data, 'ascii').length + ")";

    case ClarityType.StringUTF8:
      return "(string-utf8 " + Buffer.from(val.data, 'utf8').length + ")";
  }
}

export { ClarityType, cvToJSON, cvToString, cvToValue, getCVTypeString };
//# sourceMappingURL=clarityValue.esm.js.map
