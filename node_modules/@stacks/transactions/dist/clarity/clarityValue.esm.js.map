{"version":3,"file":"clarityValue.esm.js","sources":["../../src/clarity/clarityValue.ts"],"sourcesContent":["import {\n  BooleanCV,\n  OptionalCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseErrorCV,\n  ResponseOkCV,\n  ListCV,\n  TupleCV,\n  StringAsciiCV,\n  StringUtf8CV,\n} from '.';\n\nimport { principalToString } from './types/principalCV';\nimport { CLARITY_INT_SIZE } from '../constants';\n\n/**\n * Type IDs corresponding to each of the Clarity value types as described here:\n * {@link https://github.com/blockstack/blockstack-core/blob/sip/sip-005/sip/sip-005-blocks-and-transactions.md#clarity-value-representation}\n */\nexport enum ClarityType {\n  Int = 0x00,\n  UInt = 0x01,\n  Buffer = 0x02,\n  BoolTrue = 0x03,\n  BoolFalse = 0x04,\n  PrincipalStandard = 0x05,\n  PrincipalContract = 0x06,\n  ResponseOk = 0x07,\n  ResponseErr = 0x08,\n  OptionalNone = 0x09,\n  OptionalSome = 0x0a,\n  List = 0x0b,\n  Tuple = 0x0c,\n  StringASCII = 0x0d,\n  StringUTF8 = 0x0e,\n}\n\nexport type ClarityValue =\n  | BooleanCV\n  | OptionalCV\n  | BufferCV\n  | IntCV\n  | UIntCV\n  | StandardPrincipalCV\n  | ContractPrincipalCV\n  | ResponseErrorCV\n  | ResponseOkCV\n  | ListCV\n  | TupleCV\n  | StringAsciiCV\n  | StringUtf8CV;\n\nexport function cvToString(val: ClarityValue, encoding: 'tryAscii' | 'hex' = 'hex'): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return 'true';\n    case ClarityType.BoolFalse:\n      return 'false';\n    case ClarityType.Int:\n      return val.value.fromTwos(CLARITY_INT_SIZE).toString();\n    case ClarityType.UInt:\n      return `u${val.value.toString()}`;\n    case ClarityType.Buffer:\n      if (encoding === 'tryAscii') {\n        const str = val.buffer.toString('ascii');\n        if (/[ -~]/.test(str)) {\n          return JSON.stringify(str);\n        }\n      }\n      return `0x${val.buffer.toString('hex')}`;\n    case ClarityType.OptionalNone:\n      return 'none';\n    case ClarityType.OptionalSome:\n      return `(some ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseErr:\n      return `(err ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseOk:\n      return `(ok ${cvToString(val.value, encoding)})`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return `(list ${val.list.map(v => cvToString(v, encoding)).join(' ')})`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.data)\n        .map(key => `(${key} ${cvToString(val.data[key], encoding)})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `\"${val.data}\"`;\n    case ClarityType.StringUTF8:\n      return `u\"${val.data}\"`;\n  }\n}\n\nexport function cvToValue(val: ClarityValue): any {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return true;\n    case ClarityType.BoolFalse:\n      return false;\n    case ClarityType.Int:\n      return val.value.fromTwos(CLARITY_INT_SIZE).toNumber();\n    case ClarityType.UInt:\n      return val.value.toNumber();\n    case ClarityType.Buffer:\n      return `0x${val.buffer.toString('hex')}`;\n    case ClarityType.OptionalNone:\n      return null;\n    case ClarityType.OptionalSome:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseErr:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseOk:\n      return cvToJSON(val.value);\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return val.list.map(v => cvToJSON(v));\n    case ClarityType.Tuple:\n      const result: { [key: string]: any } = {};\n      Object.keys(val.data).forEach(key => {\n        result[key] = cvToJSON(val.data[key]);\n      });\n      return result;\n    case ClarityType.StringASCII:\n      return val.data;\n    case ClarityType.StringUTF8:\n      return val.data;\n  }\n}\n\nexport function cvToJSON(val: ClarityValue): any {\n  switch (val.type) {\n    case ClarityType.ResponseErr:\n      return { type: getCVTypeString(val), value: cvToValue(val), success: false };\n    case ClarityType.ResponseOk:\n      return { type: getCVTypeString(val), value: cvToValue(val), success: true };\n    default:\n      return { type: getCVTypeString(val), value: cvToValue(val) };\n  }\n}\n\nexport function getCVTypeString(val: ClarityValue): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return 'bool';\n    case ClarityType.Int:\n      return 'int';\n    case ClarityType.UInt:\n      return 'uint';\n    case ClarityType.Buffer:\n      return `(buff ${val.buffer.length})`;\n    case ClarityType.OptionalNone:\n      return '(optional none)';\n    case ClarityType.OptionalSome:\n      return `(optional ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseErr:\n      return `(response UnknownType ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseOk:\n      return `(response ${getCVTypeString(val.value)} UnknownType)`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return 'principal';\n    case ClarityType.List:\n      return `(list ${val.list.length} ${getCVTypeString(val.list[0])})`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.data)\n        .map(key => `(${key} ${getCVTypeString(val.data[key])})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `(string-ascii ${Buffer.from(val.data, 'ascii').length})`;\n    case ClarityType.StringUTF8:\n      return `(string-utf8 ${Buffer.from(val.data, 'utf8').length})`;\n  }\n}\n"],"names":["ClarityType","cvToString","val","encoding","type","BoolTrue","BoolFalse","Int","value","fromTwos","CLARITY_INT_SIZE","toString","UInt","Buffer","str","buffer","test","JSON","stringify","OptionalNone","OptionalSome","ResponseErr","ResponseOk","PrincipalStandard","PrincipalContract","principalToString","List","list","map","v","join","Tuple","Object","keys","data","key","StringASCII","StringUTF8","cvToValue","toNumber","cvToJSON","result","forEach","getCVTypeString","success","length","from"],"mappings":"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"}