{"version":3,"file":"serialize.esm.js","sources":["../../src/clarity/serialize.ts"],"sourcesContent":["import { serializeAddress, serializeLPString, createLPString } from '../types';\nimport {\n  BooleanCV,\n  OptionalCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseCV,\n  ListCV,\n  TupleCV,\n  ClarityType,\n  ClarityValue,\n} from '.';\nimport { BufferArray } from '../utils';\nimport { SerializationError } from '../errors';\nimport { StringAsciiCV, StringUtf8CV } from './types/stringCV';\n\nfunction bufferWithTypeID(typeId: ClarityType, buffer: Buffer): Buffer {\n  const id = Buffer.from([typeId]);\n  return Buffer.concat([id, buffer]);\n}\n\nfunction serializeBoolCV(value: BooleanCV): Buffer {\n  return Buffer.from([value.type]);\n}\n\nfunction serializeOptionalCV(cv: OptionalCV): Buffer {\n  if (cv.type === ClarityType.OptionalNone) {\n    return Buffer.from([cv.type]);\n  } else {\n    return bufferWithTypeID(cv.type, serializeCV(cv.value));\n  }\n}\n\nfunction serializeBufferCV(cv: BufferCV): Buffer {\n  const length = Buffer.alloc(4);\n  length.writeUInt32BE(cv.buffer.length, 0);\n  return bufferWithTypeID(cv.type, Buffer.concat([length, cv.buffer]));\n}\n\nfunction serializeIntCV(cv: IntCV | UIntCV): Buffer {\n  const buffer = cv.value.toArrayLike(Buffer, 'be', 16);\n  return bufferWithTypeID(cv.type, buffer);\n}\n\nfunction serializeStandardPrincipalCV(cv: StandardPrincipalCV): Buffer {\n  return bufferWithTypeID(cv.type, serializeAddress(cv.address));\n}\n\nfunction serializeContractPrincipalCV(cv: ContractPrincipalCV): Buffer {\n  return bufferWithTypeID(\n    cv.type,\n    Buffer.concat([serializeAddress(cv.address), serializeLPString(cv.contractName)])\n  );\n}\n\nfunction serializeResponseCV(cv: ResponseCV) {\n  return bufferWithTypeID(cv.type, serializeCV(cv.value));\n}\n\nfunction serializeListCV(cv: ListCV) {\n  const buffers = new BufferArray();\n\n  const length = Buffer.alloc(4);\n  length.writeUInt32BE(cv.list.length, 0);\n  buffers.push(length);\n\n  for (const value of cv.list) {\n    const serializedValue = serializeCV(value);\n    buffers.push(serializedValue);\n  }\n\n  return bufferWithTypeID(cv.type, buffers.concatBuffer());\n}\n\nfunction serializeTupleCV(cv: TupleCV) {\n  const buffers = new BufferArray();\n\n  const length = Buffer.alloc(4);\n  length.writeUInt32BE(Object.keys(cv.data).length, 0);\n  buffers.push(length);\n\n  const lexicographicOrder = Object.keys(cv.data).sort((a, b) => {\n    const bufA = Buffer.from(a);\n    const bufB = Buffer.from(b);\n    return bufA.compare(bufB);\n  });\n\n  for (const key of lexicographicOrder) {\n    const nameWithLength = createLPString(key);\n    buffers.push(serializeLPString(nameWithLength));\n\n    const serializedValue = serializeCV(cv.data[key]);\n    buffers.push(serializedValue);\n  }\n\n  return bufferWithTypeID(cv.type, buffers.concatBuffer());\n}\n\nfunction serializeStringCV(cv: StringAsciiCV | StringUtf8CV, encoding: 'ascii' | 'utf8') {\n  const buffers = new BufferArray();\n\n  const str = Buffer.from(cv.data, encoding);\n  const len = Buffer.alloc(4);\n  len.writeUInt32BE(str.length, 0);\n\n  buffers.push(len);\n  buffers.push(str);\n\n  return bufferWithTypeID(cv.type, buffers.concatBuffer());\n}\n\nfunction serializeStringAsciiCV(cv: StringAsciiCV) {\n  return serializeStringCV(cv, 'ascii');\n}\n\nfunction serializeStringUtf8CV(cv: StringUtf8CV) {\n  return serializeStringCV(cv, 'utf8');\n}\n\nexport function serializeCV(value: ClarityValue): Buffer {\n  switch (value.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return serializeBoolCV(value);\n    case ClarityType.OptionalNone:\n    case ClarityType.OptionalSome:\n      return serializeOptionalCV(value);\n    case ClarityType.Buffer:\n      return serializeBufferCV(value);\n    case ClarityType.Int:\n    case ClarityType.UInt:\n      return serializeIntCV(value);\n    case ClarityType.PrincipalStandard:\n      return serializeStandardPrincipalCV(value);\n    case ClarityType.PrincipalContract:\n      return serializeContractPrincipalCV(value);\n    case ClarityType.ResponseOk:\n    case ClarityType.ResponseErr:\n      return serializeResponseCV(value);\n    case ClarityType.List:\n      return serializeListCV(value);\n    case ClarityType.Tuple:\n      return serializeTupleCV(value);\n    case ClarityType.StringASCII:\n      return serializeStringAsciiCV(value);\n    case ClarityType.StringUTF8:\n      return serializeStringUtf8CV(value);\n    default:\n      throw new SerializationError('Unable to serialize. Invalid Clarity Value.');\n  }\n}\n"],"names":["bufferWithTypeID","typeId","buffer","id","Buffer","from","concat","serializeBoolCV","value","type","serializeOptionalCV","cv","ClarityType","OptionalNone","serializeCV","serializeBufferCV","length","alloc","writeUInt32BE","serializeIntCV","toArrayLike","serializeStandardPrincipalCV","serializeAddress","address","serializeContractPrincipalCV","serializeLPString","contractName","serializeResponseCV","serializeListCV","buffers","BufferArray","list","push","serializedValue","concatBuffer","serializeTupleCV","Object","keys","data","lexicographicOrder","sort","a","b","bufA","bufB","compare","key","nameWithLength","createLPString","serializeStringCV","encoding","str","len","serializeStringAsciiCV","serializeStringUtf8CV","BoolTrue","BoolFalse","OptionalSome","Int","UInt","PrincipalStandard","PrincipalContract","ResponseOk","ResponseErr","List","Tuple","StringASCII","StringUTF8","SerializationError"],"mappings":";;;;;;;;;AAmBA,SAASA,gBAAT,CAA0BC,MAA1B,EAA+CC,MAA/C;AACE,MAAMC,EAAE,GAAGC,MAAM,CAACC,IAAP,CAAY,CAACJ,MAAD,CAAZ,CAAX;AACA,SAAOG,MAAM,CAACE,MAAP,CAAc,CAACH,EAAD,EAAKD,MAAL,CAAd,CAAP;AACD;;AAED,SAASK,eAAT,CAAyBC,KAAzB;AACE,SAAOJ,MAAM,CAACC,IAAP,CAAY,CAACG,KAAK,CAACC,IAAP,CAAZ,CAAP;AACD;;AAED,SAASC,mBAAT,CAA6BC,EAA7B;AACE,MAAIA,EAAE,CAACF,IAAH,KAAYG,WAAW,CAACC,YAA5B,EAA0C;AACxC,WAAOT,MAAM,CAACC,IAAP,CAAY,CAACM,EAAE,CAACF,IAAJ,CAAZ,CAAP;AACD,GAFD,MAEO;AACL,WAAOT,gBAAgB,CAACW,EAAE,CAACF,IAAJ,EAAUK,WAAW,CAACH,EAAE,CAACH,KAAJ,CAArB,CAAvB;AACD;AACF;;AAED,SAASO,iBAAT,CAA2BJ,EAA3B;AACE,MAAMK,MAAM,GAAGZ,MAAM,CAACa,KAAP,CAAa,CAAb,CAAf;AACAD,EAAAA,MAAM,CAACE,aAAP,CAAqBP,EAAE,CAACT,MAAH,CAAUc,MAA/B,EAAuC,CAAvC;AACA,SAAOhB,gBAAgB,CAACW,EAAE,CAACF,IAAJ,EAAUL,MAAM,CAACE,MAAP,CAAc,CAACU,MAAD,EAASL,EAAE,CAACT,MAAZ,CAAd,CAAV,CAAvB;AACD;;AAED,SAASiB,cAAT,CAAwBR,EAAxB;AACE,MAAMT,MAAM,GAAGS,EAAE,CAACH,KAAH,CAASY,WAAT,CAAqBhB,MAArB,EAA6B,IAA7B,EAAmC,EAAnC,CAAf;AACA,SAAOJ,gBAAgB,CAACW,EAAE,CAACF,IAAJ,EAAUP,MAAV,CAAvB;AACD;;AAED,SAASmB,4BAAT,CAAsCV,EAAtC;AACE,SAAOX,gBAAgB,CAACW,EAAE,CAACF,IAAJ,EAAUa,gBAAgB,CAACX,EAAE,CAACY,OAAJ,CAA1B,CAAvB;AACD;;AAED,SAASC,4BAAT,CAAsCb,EAAtC;AACE,SAAOX,gBAAgB,CACrBW,EAAE,CAACF,IADkB,EAErBL,MAAM,CAACE,MAAP,CAAc,CAACgB,gBAAgB,CAACX,EAAE,CAACY,OAAJ,CAAjB,EAA+BE,iBAAiB,CAACd,EAAE,CAACe,YAAJ,CAAhD,CAAd,CAFqB,CAAvB;AAID;;AAED,SAASC,mBAAT,CAA6BhB,EAA7B;AACE,SAAOX,gBAAgB,CAACW,EAAE,CAACF,IAAJ,EAAUK,WAAW,CAACH,EAAE,CAACH,KAAJ,CAArB,CAAvB;AACD;;AAED,SAASoB,eAAT,CAAyBjB,EAAzB;AACE,MAAMkB,OAAO,GAAG,IAAIC,WAAJ,EAAhB;AAEA,MAAMd,MAAM,GAAGZ,MAAM,CAACa,KAAP,CAAa,CAAb,CAAf;AACAD,EAAAA,MAAM,CAACE,aAAP,CAAqBP,EAAE,CAACoB,IAAH,CAAQf,MAA7B,EAAqC,CAArC;AACAa,EAAAA,OAAO,CAACG,IAAR,CAAahB,MAAb;;AAEA,uDAAoBL,EAAE,CAACoB,IAAvB,wCAA6B;AAAA,QAAlBvB,KAAkB;AAC3B,QAAMyB,eAAe,GAAGnB,WAAW,CAACN,KAAD,CAAnC;AACAqB,IAAAA,OAAO,CAACG,IAAR,CAAaC,eAAb;AACD;;AAED,SAAOjC,gBAAgB,CAACW,EAAE,CAACF,IAAJ,EAAUoB,OAAO,CAACK,YAAR,EAAV,CAAvB;AACD;;AAED,SAASC,gBAAT,CAA0BxB,EAA1B;AACE,MAAMkB,OAAO,GAAG,IAAIC,WAAJ,EAAhB;AAEA,MAAMd,MAAM,GAAGZ,MAAM,CAACa,KAAP,CAAa,CAAb,CAAf;AACAD,EAAAA,MAAM,CAACE,aAAP,CAAqBkB,MAAM,CAACC,IAAP,CAAY1B,EAAE,CAAC2B,IAAf,EAAqBtB,MAA1C,EAAkD,CAAlD;AACAa,EAAAA,OAAO,CAACG,IAAR,CAAahB,MAAb;AAEA,MAAMuB,kBAAkB,GAAGH,MAAM,CAACC,IAAP,CAAY1B,EAAE,CAAC2B,IAAf,EAAqBE,IAArB,CAA0B,UAACC,CAAD,EAAIC,CAAJ;AACnD,QAAMC,IAAI,GAAGvC,MAAM,CAACC,IAAP,CAAYoC,CAAZ,CAAb;AACA,QAAMG,IAAI,GAAGxC,MAAM,CAACC,IAAP,CAAYqC,CAAZ,CAAb;AACA,WAAOC,IAAI,CAACE,OAAL,CAAaD,IAAb,CAAP;AACD,GAJ0B,CAA3B;;AAMA,wDAAkBL,kBAAlB,2CAAsC;AAAA,QAA3BO,GAA2B;AACpC,QAAMC,cAAc,GAAGC,cAAc,CAACF,GAAD,CAArC;AACAjB,IAAAA,OAAO,CAACG,IAAR,CAAaP,iBAAiB,CAACsB,cAAD,CAA9B;AAEA,QAAMd,eAAe,GAAGnB,WAAW,CAACH,EAAE,CAAC2B,IAAH,CAAQQ,GAAR,CAAD,CAAnC;AACAjB,IAAAA,OAAO,CAACG,IAAR,CAAaC,eAAb;AACD;;AAED,SAAOjC,gBAAgB,CAACW,EAAE,CAACF,IAAJ,EAAUoB,OAAO,CAACK,YAAR,EAAV,CAAvB;AACD;;AAED,SAASe,iBAAT,CAA2BtC,EAA3B,EAA6DuC,QAA7D;AACE,MAAMrB,OAAO,GAAG,IAAIC,WAAJ,EAAhB;AAEA,MAAMqB,GAAG,GAAG/C,MAAM,CAACC,IAAP,CAAYM,EAAE,CAAC2B,IAAf,EAAqBY,QAArB,CAAZ;AACA,MAAME,GAAG,GAAGhD,MAAM,CAACa,KAAP,CAAa,CAAb,CAAZ;AACAmC,EAAAA,GAAG,CAAClC,aAAJ,CAAkBiC,GAAG,CAACnC,MAAtB,EAA8B,CAA9B;AAEAa,EAAAA,OAAO,CAACG,IAAR,CAAaoB,GAAb;AACAvB,EAAAA,OAAO,CAACG,IAAR,CAAamB,GAAb;AAEA,SAAOnD,gBAAgB,CAACW,EAAE,CAACF,IAAJ,EAAUoB,OAAO,CAACK,YAAR,EAAV,CAAvB;AACD;;AAED,SAASmB,sBAAT,CAAgC1C,EAAhC;AACE,SAAOsC,iBAAiB,CAACtC,EAAD,EAAK,OAAL,CAAxB;AACD;;AAED,SAAS2C,qBAAT,CAA+B3C,EAA/B;AACE,SAAOsC,iBAAiB,CAACtC,EAAD,EAAK,MAAL,CAAxB;AACD;;SAEeG,YAAYN;AAC1B,UAAQA,KAAK,CAACC,IAAd;AACE,SAAKG,WAAW,CAAC2C,QAAjB;AACA,SAAK3C,WAAW,CAAC4C,SAAjB;AACE,aAAOjD,eAAe,CAACC,KAAD,CAAtB;;AACF,SAAKI,WAAW,CAACC,YAAjB;AACA,SAAKD,WAAW,CAAC6C,YAAjB;AACE,aAAO/C,mBAAmB,CAACF,KAAD,CAA1B;;AACF,SAAKI,WAAW,CAACR,MAAjB;AACE,aAAOW,iBAAiB,CAACP,KAAD,CAAxB;;AACF,SAAKI,WAAW,CAAC8C,GAAjB;AACA,SAAK9C,WAAW,CAAC+C,IAAjB;AACE,aAAOxC,cAAc,CAACX,KAAD,CAArB;;AACF,SAAKI,WAAW,CAACgD,iBAAjB;AACE,aAAOvC,4BAA4B,CAACb,KAAD,CAAnC;;AACF,SAAKI,WAAW,CAACiD,iBAAjB;AACE,aAAOrC,4BAA4B,CAAChB,KAAD,CAAnC;;AACF,SAAKI,WAAW,CAACkD,UAAjB;AACA,SAAKlD,WAAW,CAACmD,WAAjB;AACE,aAAOpC,mBAAmB,CAACnB,KAAD,CAA1B;;AACF,SAAKI,WAAW,CAACoD,IAAjB;AACE,aAAOpC,eAAe,CAACpB,KAAD,CAAtB;;AACF,SAAKI,WAAW,CAACqD,KAAjB;AACE,aAAO9B,gBAAgB,CAAC3B,KAAD,CAAvB;;AACF,SAAKI,WAAW,CAACsD,WAAjB;AACE,aAAOb,sBAAsB,CAAC7C,KAAD,CAA7B;;AACF,SAAKI,WAAW,CAACuD,UAAjB;AACE,aAAOb,qBAAqB,CAAC9C,KAAD,CAA5B;;AACF;AACE,YAAM,IAAI4D,kBAAJ,CAAuB,6CAAvB,CAAN;AA5BJ;AA8BD;;;;"}