{"version":3,"file":"deserialize.esm.js","sources":["../../src/clarity/deserialize.ts"],"sourcesContent":["import {\n  ClarityType,\n  ClarityValue,\n  intCV,\n  uintCV,\n  bufferCV,\n  trueCV,\n  falseCV,\n  standardPrincipalCVFromAddress,\n  contractPrincipalCVFromAddress,\n  responseOkCV,\n  responseErrorCV,\n  noneCV,\n  someCV,\n  listCV,\n  tupleCV,\n} from '.';\nimport { BufferReader } from '../bufferReader';\nimport { deserializeAddress, deserializeLPString } from '../types';\nimport { DeserializationError } from '../errors';\nimport { stringAsciiCV, stringUtf8CV } from './types/stringCV';\n\nexport default function deserializeCV(buffer: BufferReader | Buffer): ClarityValue {\n  const bufferReader = Buffer.isBuffer(buffer) ? new BufferReader(buffer) : buffer;\n  const type = bufferReader.readUInt8Enum(ClarityType, n => {\n    throw new DeserializationError(`Cannot recognize Clarity Type: ${n}`);\n  });\n\n  switch (type) {\n    case ClarityType.Int:\n      return intCV(bufferReader.readBuffer(16));\n\n    case ClarityType.UInt:\n      return uintCV(bufferReader.readBuffer(16));\n\n    case ClarityType.Buffer:\n      const bufferLength = bufferReader.readUInt32BE();\n      return bufferCV(bufferReader.readBuffer(bufferLength));\n\n    case ClarityType.BoolTrue:\n      return trueCV();\n\n    case ClarityType.BoolFalse:\n      return falseCV();\n\n    case ClarityType.PrincipalStandard:\n      const sAddress = deserializeAddress(bufferReader);\n      return standardPrincipalCVFromAddress(sAddress);\n\n    case ClarityType.PrincipalContract:\n      const cAddress = deserializeAddress(bufferReader);\n      const contractName = deserializeLPString(bufferReader);\n      return contractPrincipalCVFromAddress(cAddress, contractName);\n\n    case ClarityType.ResponseOk:\n      return responseOkCV(deserializeCV(bufferReader));\n\n    case ClarityType.ResponseErr:\n      return responseErrorCV(deserializeCV(bufferReader));\n\n    case ClarityType.OptionalNone:\n      return noneCV();\n\n    case ClarityType.OptionalSome:\n      return someCV(deserializeCV(bufferReader));\n\n    case ClarityType.List:\n      const listLength = bufferReader.readUInt32BE();\n      const listContents: ClarityValue[] = [];\n      for (let i = 0; i < listLength; i++) {\n        listContents.push(deserializeCV(bufferReader));\n      }\n      return listCV(listContents);\n\n    case ClarityType.Tuple:\n      const tupleLength = bufferReader.readUInt32BE();\n      const tupleContents: { [key: string]: ClarityValue } = {};\n      for (let i = 0; i < tupleLength; i++) {\n        const clarityName = deserializeLPString(bufferReader).content;\n        if (clarityName === undefined) {\n          throw new DeserializationError('\"content\" is undefined');\n        }\n        tupleContents[clarityName] = deserializeCV(bufferReader);\n      }\n      return tupleCV(tupleContents);\n\n    case ClarityType.StringASCII:\n      const asciiStrLen = bufferReader.readUInt32BE();\n      const asciiStr = bufferReader.readBuffer(asciiStrLen).toString('ascii');\n      return stringAsciiCV(asciiStr);\n\n    case ClarityType.StringUTF8:\n      const utf8StrLen = bufferReader.readUInt32BE();\n      const utf8Str = bufferReader.readBuffer(utf8StrLen).toString('utf8');\n      return stringUtf8CV(utf8Str);\n\n    default:\n      throw new DeserializationError(\n        'Unable to deserialize Clarity Value from buffer. Could not find valid Clarity Type.'\n      );\n  }\n}\n"],"names":["deserializeCV","buffer","bufferReader","Buffer","isBuffer","BufferReader","type","readUInt8Enum","ClarityType","n","DeserializationError","Int","intCV","readBuffer","UInt","uintCV","bufferLength","readUInt32BE","bufferCV","BoolTrue","trueCV","BoolFalse","falseCV","PrincipalStandard","sAddress","deserializeAddress","standardPrincipalCVFromAddress","PrincipalContract","cAddress","contractName","deserializeLPString","contractPrincipalCVFromAddress","ResponseOk","responseOkCV","ResponseErr","responseErrorCV","OptionalNone","noneCV","OptionalSome","someCV","List","listLength","listContents","i","push","listCV","Tuple","tupleLength","tupleContents","clarityName","content","undefined","tupleCV","StringASCII","asciiStrLen","asciiStr","toString","stringAsciiCV","StringUTF8","utf8StrLen","utf8Str","stringUtf8CV"],"mappings":"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"}