import { CLARITY_INT_SIZE } from '../../constants.esm.js';
import BigNum from 'bn.js';
import { ClarityType } from '../clarityValue.esm.js';

var intCV = function intCV(value) {
  var bn = new BigNum(value);
  var twos = bn.toTwos(CLARITY_INT_SIZE);

  if (twos.bitLength() > CLARITY_INT_SIZE) {
    throw new Error('Cannot construct clarity integer from value greater than INT_SIZE bits');
  }

  return {
    type: ClarityType.Int,
    value: twos
  };
};

var uintCV = function uintCV(value) {
  var bn = new BigNum(value);
  var twos = bn.toTwos(CLARITY_INT_SIZE);

  if (twos.isNeg()) {
    throw new Error('Cannot construct unsigned clarity integer from negative value');
  } else if (twos.bitLength() > CLARITY_INT_SIZE) {
    throw new Error('Cannot construct unsigned clarity integer from value greater than 128 bits');
  }

  return {
    type: ClarityType.UInt,
    value: twos
  };
};

export { intCV, uintCV };
//# sourceMappingURL=intCV.esm.js.map
