import { createAddress, createLPString, addressToString } from '../../types.esm.js';
import { ClarityType } from '../clarityValue.esm.js';

function principalToString(principal) {
  if (principal.type === ClarityType.PrincipalStandard) {
    return addressToString(principal.address);
  } else if (principal.type === ClarityType.PrincipalContract) {
    var address = addressToString(principal.address);
    return address + "." + principal.contractName.content;
  } else {
    throw new Error("Unexpected principal data: " + JSON.stringify(principal));
  }
}

function principalCV(principal) {
  if (principal.includes('.')) {
    var _principal$split = principal.split('.'),
        address = _principal$split[0],
        contractName = _principal$split[1];

    return contractPrincipalCV(address, contractName);
  } else {
    return standardPrincipalCV(principal);
  }
}

function standardPrincipalCV(addressString) {
  var addr = createAddress(addressString);
  return {
    type: ClarityType.PrincipalStandard,
    address: addr
  };
}

function standardPrincipalCVFromAddress(address) {
  return {
    type: ClarityType.PrincipalStandard,
    address: address
  };
}

function contractPrincipalCV(addressString, contractName) {
  var addr = createAddress(addressString);
  var lengthPrefixedContractName = createLPString(contractName);
  return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);
}

function contractPrincipalCVFromAddress(address, contractName) {
  if (Buffer.byteLength(contractName.content) >= 128) {
    throw new Error('Contract name must be less than 128 bytes');
  }

  return {
    type: ClarityType.PrincipalContract,
    address: address,
    contractName: contractName
  };
}

function contractPrincipalCVFromStandard(sp, contractName) {
  var lengthPrefixedContractName = createLPString(contractName);
  return {
    type: ClarityType.PrincipalContract,
    address: sp.address,
    contractName: lengthPrefixedContractName
  };
}

export { contractPrincipalCV, contractPrincipalCVFromAddress, contractPrincipalCVFromStandard, principalCV, principalToString, standardPrincipalCV, standardPrincipalCVFromAddress };
//# sourceMappingURL=principalCV.esm.js.map
