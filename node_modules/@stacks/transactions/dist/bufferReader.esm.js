import { createClass as _createClass } from './_virtual/_rollupPluginBabelHelpers.js';
import { SmartBuffer } from 'smart-buffer';

function createEnumChecker(enumVariable) {
  var enumValues = Object.values(enumVariable).filter(function (v) {
    return typeof v === 'number';
  });
  var enumValueSet = new Set(enumValues);
  return function (value) {
    return enumValueSet.has(value);
  };
}

var enumCheckFunctions = /*#__PURE__*/new Map();
function isEnum(enumVariable, value) {
  var checker = enumCheckFunctions.get(enumVariable);

  if (checker !== undefined) {
    return checker(value);
  }

  var newChecker = createEnumChecker(enumVariable);
  enumCheckFunctions.set(enumVariable, newChecker);
  return isEnum(enumVariable, value);
}
var BufferReader = /*#__PURE__*/function () {
  function BufferReader(options) {
    if (Buffer.isBuffer(options)) {
      this.smartBuffer = new SmartBuffer({
        buff: options
      });
    } else {
      this.smartBuffer = new SmartBuffer(options);
    }
  }

  BufferReader.fromBuffer = function fromBuffer(buffer) {
    return new BufferReader({
      buff: buffer
    });
  };

  var _proto = BufferReader.prototype;

  _proto.readBuffer = function readBuffer(length) {
    return this.smartBuffer.readBuffer(length);
  };

  _proto.readUInt32BE = function readUInt32BE(offset) {
    return this.smartBuffer.readUInt32BE(offset);
  };

  _proto.readUInt8 = function readUInt8() {
    return this.smartBuffer.readUInt8();
  };

  _proto.readUInt16BE = function readUInt16BE() {
    return this.smartBuffer.readUInt16BE();
  };

  _proto.readBigUIntLE = function readBigUIntLE(length) {
    var buffer = Buffer.from(this.smartBuffer.readBuffer(length)).reverse();
    var hex = buffer.toString();
    var num = BigInt("0x" + hex);
    return num;
  };

  _proto.readBigUIntBE = function readBigUIntBE(length) {
    var buffer = this.smartBuffer.readBuffer(length);
    var hex = buffer.toString('hex');
    var num = BigInt("0x" + hex);
    return num;
  };

  _proto.readBigUInt64BE = function readBigUInt64BE() {
    return this.smartBuffer.readBigUInt64BE();
  };

  _proto.readString = function readString(arg, encoding) {
    return this.smartBuffer.readString(arg, encoding);
  };

  _proto.readUInt8Enum = function readUInt8Enum(enumVariable, invalidEnumErrorFormatter) {
    var num = this.smartBuffer.readUInt8();

    if (isEnum(enumVariable, num)) {
      return num;
    } else {
      throw invalidEnumErrorFormatter(num);
    }
  };

  _createClass(BufferReader, [{
    key: "readOffset",
    get: function get() {
      return this.smartBuffer.readOffset;
    },
    set: function set(val) {
      this.smartBuffer.readOffset = val;
    }
  }, {
    key: "internalBuffer",
    get: function get() {
      return this.smartBuffer.internalBuffer;
    }
  }]);

  return BufferReader;
}();

export { BufferReader, isEnum };
//# sourceMappingURL=bufferReader.esm.js.map
