/// <reference types="node" />
import { StacksTransaction } from './transaction';
import { StacksNetwork } from '@stacks/network';
import { PostCondition, STXPostCondition, FungiblePostCondition, NonFungiblePostCondition } from './postcondition';
import { AddressHashMode, FungibleConditionCode, NonFungibleConditionCode, PostConditionMode, AnchorMode, TxRejectedReason } from './constants';
import { AssetInfo } from './types';
import BigNum from 'bn.js';
import { ClarityValue, PrincipalCV } from './clarity';
import { ClarityAbi } from './contract-abi';
export declare function getNonce(address: string, network?: StacksNetwork): Promise<BigNum>;
export declare function estimateTransfer(transaction: StacksTransaction, network?: StacksNetwork): Promise<BigNum>;
export declare type TxBroadcastResultOk = string;
export declare type TxBroadcastResultRejected = {
    error: string;
    reason: TxRejectedReason;
    reason_data: any;
    txid: string;
};
export declare type TxBroadcastResult = TxBroadcastResultOk | TxBroadcastResultRejected;
export declare function broadcastTransaction(transaction: StacksTransaction, network: StacksNetwork, attachment?: Buffer): Promise<TxBroadcastResult>;
export declare function broadcastRawTransaction(rawTx: Buffer, url: string, attachment?: Buffer): Promise<TxBroadcastResult>;
export declare function getAbi(address: string, contractName: string, network: StacksNetwork): Promise<ClarityAbi>;
export interface MultiSigOptions {
    numSignatures: number;
    publicKeys: string[];
    signerKeys?: string[];
}
export interface TokenTransferOptions {
    recipient: string | PrincipalCV;
    amount: BigNum;
    fee?: BigNum;
    nonce?: BigNum;
    network?: StacksNetwork;
    anchorMode?: AnchorMode;
    memo?: string;
    postConditionMode?: PostConditionMode;
    postConditions?: PostCondition[];
    sponsored?: boolean;
}
export interface UnsignedTokenTransferOptions extends TokenTransferOptions {
    publicKey: string;
}
export interface SignedTokenTransferOptions extends TokenTransferOptions {
    senderKey: string;
}
export interface UnsignedMultiSigTokenTransferOptions extends TokenTransferOptions {
    numSignatures: number;
    publicKeys: string[];
}
export interface SignedMultiSigTokenTransferOptions extends TokenTransferOptions {
    numSignatures: number;
    publicKeys: string[];
    signerKeys: string[];
}
export declare function makeUnsignedSTXTokenTransfer(txOptions: UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions): Promise<StacksTransaction>;
export declare function makeSTXTokenTransfer(txOptions: SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions): Promise<StacksTransaction>;
export interface ContractDeployOptions {
    contractName: string;
    codeBody: string;
    senderKey: string;
    fee?: BigNum;
    nonce?: BigNum;
    network?: StacksNetwork;
    anchorMode?: AnchorMode;
    postConditionMode?: PostConditionMode;
    postConditions?: PostCondition[];
    sponsored?: boolean;
}
export declare function estimateContractDeploy(transaction: StacksTransaction, network?: StacksNetwork): Promise<BigNum>;
export declare function makeContractDeploy(txOptions: ContractDeployOptions): Promise<StacksTransaction>;
export interface ContractCallOptions {
    contractAddress: string;
    contractName: string;
    functionName: string;
    functionArgs: ClarityValue[];
    fee?: BigNum;
    feeEstimateApiUrl?: string;
    nonce?: BigNum;
    network?: StacksNetwork;
    anchorMode?: AnchorMode;
    postConditionMode?: PostConditionMode;
    postConditions?: PostCondition[];
    validateWithAbi?: boolean | ClarityAbi;
    sponsored?: boolean;
}
export interface UnsignedContractCallOptions extends ContractCallOptions {
    publicKey: string;
}
export interface SignedContractCallOptions extends ContractCallOptions {
    senderKey: string;
}
export interface UnsignedMultiSigContractCallOptions extends ContractCallOptions {
    numSignatures: number;
    publicKeys: string[];
}
export interface SignedMultiSigContractCallOptions extends ContractCallOptions {
    numSignatures: number;
    publicKeys: string[];
    signerKeys: string[];
}
export declare function estimateContractFunctionCall(transaction: StacksTransaction, network?: StacksNetwork): Promise<BigNum>;
export declare function makeUnsignedContractCall(txOptions: UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions): Promise<StacksTransaction>;
export declare function makeContractCall(txOptions: SignedContractCallOptions | SignedMultiSigContractCallOptions): Promise<StacksTransaction>;
export declare function makeStandardSTXPostCondition(address: string, conditionCode: FungibleConditionCode, amount: BigNum): STXPostCondition;
export declare function makeContractSTXPostCondition(address: string, contractName: string, conditionCode: FungibleConditionCode, amount: BigNum): STXPostCondition;
export declare function makeStandardFungiblePostCondition(address: string, conditionCode: FungibleConditionCode, amount: BigNum, assetInfo: string | AssetInfo): FungiblePostCondition;
export declare function makeContractFungiblePostCondition(address: string, contractName: string, conditionCode: FungibleConditionCode, amount: BigNum, assetInfo: string | AssetInfo): FungiblePostCondition;
export declare function makeStandardNonFungiblePostCondition(address: string, conditionCode: NonFungibleConditionCode, assetInfo: string | AssetInfo, assetName: ClarityValue): NonFungiblePostCondition;
export declare function makeContractNonFungiblePostCondition(address: string, contractName: string, conditionCode: NonFungibleConditionCode, assetInfo: string | AssetInfo, assetName: ClarityValue): NonFungiblePostCondition;
export interface ReadOnlyFunctionOptions {
    contractName: string;
    contractAddress: string;
    functionName: string;
    functionArgs: ClarityValue[];
    network?: StacksNetwork;
    senderAddress: string;
}
export declare function callReadOnlyFunction(readOnlyFunctionOptions: ReadOnlyFunctionOptions): Promise<ClarityValue>;
export interface SponsorOptions {
    transaction: StacksTransaction;
    sponsorPrivateKey: string;
    fee?: BigNum;
    sponsorNonce?: BigNum;
    sponsorAddressHashmode?: AddressHashMode;
    network?: StacksNetwork;
}
export declare function sponsorTransaction(sponsorOptions: SponsorOptions): Promise<StacksTransaction>;
