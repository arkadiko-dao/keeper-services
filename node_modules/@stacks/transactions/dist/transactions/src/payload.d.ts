/// <reference types="node" />
import { PayloadType, StacksMessageType } from './constants';
import { Address, MemoString, LengthPrefixedString } from './types';
import { ClarityValue } from './clarity/';
import BigNum from 'bn.js';
import { BufferReader } from './bufferReader';
import { PrincipalCV } from './clarity/types/principalCV';
export declare type Payload = TokenTransferPayload | ContractCallPayload | SmartContractPayload | PoisonPayload | CoinbasePayload;
export interface TokenTransferPayload {
    readonly type: StacksMessageType.Payload;
    readonly payloadType: PayloadType.TokenTransfer;
    readonly recipient: PrincipalCV;
    readonly amount: BigNum;
    readonly memo: MemoString;
}
export declare function createTokenTransferPayload(recipient: string | PrincipalCV, amount: BigNum, memo?: string | MemoString): TokenTransferPayload;
export interface ContractCallPayload {
    readonly type: StacksMessageType.Payload;
    readonly payloadType: PayloadType.ContractCall;
    readonly contractAddress: Address;
    readonly contractName: LengthPrefixedString;
    readonly functionName: LengthPrefixedString;
    readonly functionArgs: ClarityValue[];
}
export declare function createContractCallPayload(contractAddress: string | Address, contractName: string | LengthPrefixedString, functionName: string | LengthPrefixedString, functionArgs: ClarityValue[]): ContractCallPayload;
export interface SmartContractPayload {
    readonly type: StacksMessageType.Payload;
    readonly payloadType: PayloadType.SmartContract;
    readonly contractName: LengthPrefixedString;
    readonly codeBody: LengthPrefixedString;
}
export declare function createSmartContractPayload(contractName: string | LengthPrefixedString, codeBody: string | LengthPrefixedString): SmartContractPayload;
export interface PoisonPayload {
    readonly type: StacksMessageType.Payload;
    readonly payloadType: PayloadType.PoisonMicroblock;
}
export declare function createPoisonPayload(): PoisonPayload;
export interface CoinbasePayload {
    readonly type: StacksMessageType.Payload;
    readonly payloadType: PayloadType.Coinbase;
    readonly coinbaseBuffer: Buffer;
}
export declare function createCoinbasePayload(coinbaseBuffer: Buffer): CoinbasePayload;
export declare function serializePayload(payload: Payload): Buffer;
export declare function deserializePayload(bufferReader: BufferReader): Payload;
