{"version":3,"file":"transaction.esm.js","sources":["../src/transaction.ts"],"sourcesContent":["import {\n  AnchorMode,\n  AuthType,\n  ChainID,\n  DEFAULT_CHAIN_ID,\n  PayloadType,\n  PostConditionMode,\n  PubKeyEncoding,\n  StacksMessageType,\n  TransactionVersion,\n} from './constants';\n\nimport {\n  Authorization,\n  createMessageSignature,\n  createTransactionAuthField,\n  isSingleSig,\n  nextSignature,\n  SingleSigSpendingCondition,\n  SpendingCondition,\n} from './authorization';\n\nimport { BufferArray, cloneDeep, txidFromData } from './utils';\n\nimport { deserializePayload, Payload, serializePayload } from './payload';\n\nimport { createLPList, deserializeLPList, LengthPrefixedList, serializeLPList } from './types';\n\nimport { isCompressed, StacksPrivateKey, StacksPublicKey } from './keys';\n\nimport { BufferReader } from './bufferReader';\n\nimport BigNum from 'bn.js';\nimport { SerializationError, SigningError } from './errors';\n\nexport class StacksTransaction {\n  version: TransactionVersion;\n  chainId: ChainID;\n  auth: Authorization;\n  anchorMode: AnchorMode;\n  payload: Payload;\n  postConditionMode: PostConditionMode;\n  postConditions: LengthPrefixedList;\n\n  constructor(\n    version: TransactionVersion,\n    auth: Authorization,\n    payload: Payload,\n    postConditions?: LengthPrefixedList,\n    postConditionMode?: PostConditionMode,\n    anchorMode?: AnchorMode,\n    chainId?: ChainID\n  ) {\n    this.version = version;\n    this.auth = auth;\n    this.payload = payload;\n    this.chainId = chainId ?? DEFAULT_CHAIN_ID;\n    this.postConditionMode = postConditionMode ?? PostConditionMode.Deny;\n    this.postConditions = postConditions ?? createLPList([]);\n\n    if (anchorMode) {\n      this.anchorMode = anchorMode;\n    } else {\n      switch (payload.payloadType) {\n        case PayloadType.Coinbase:\n        case PayloadType.PoisonMicroblock: {\n          this.anchorMode = AnchorMode.OnChainOnly;\n          break;\n        }\n        case PayloadType.ContractCall:\n        case PayloadType.SmartContract:\n        case PayloadType.TokenTransfer: {\n          this.anchorMode = AnchorMode.Any;\n          break;\n        }\n      }\n    }\n  }\n\n  signBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = tx.auth.intoInitialSighashAuth();\n    return tx.txid();\n  }\n\n  verifyBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = tx.auth.intoInitialSighashAuth();\n    return tx.txid();\n  }\n\n  createTxWithSignature(signature: string | Buffer): StacksTransaction {\n    const parsedSig = typeof signature === 'string' ? signature : signature.toString('hex');\n    const tx = cloneDeep(this);\n    if (!tx.auth.spendingCondition) {\n      throw new Error('Cannot set signature on transaction without spending condition');\n    }\n    (tx.auth.spendingCondition as SingleSigSpendingCondition).signature = createMessageSignature(\n      parsedSig\n    );\n    return tx;\n  }\n\n  verifyOrigin(): string {\n    return this.auth.verifyOrigin(this.verifyBegin());\n  }\n\n  signNextOrigin(sigHash: string, privateKey: StacksPrivateKey): string {\n    if (this.auth.spendingCondition === undefined) {\n      throw new Error('\"auth.spendingCondition\" is undefined');\n    }\n    if (this.auth.authType === undefined) {\n      throw new Error('\"auth.authType\" is undefined');\n    }\n    return this.signAndAppend(this.auth.spendingCondition, sigHash, AuthType.Standard, privateKey);\n  }\n\n  signNextSponsor(sigHash: string, privateKey: StacksPrivateKey): string {\n    if (this.auth.sponsorSpendingCondition === undefined) {\n      throw new Error('\"auth.spendingCondition\" is undefined');\n    }\n    if (this.auth.authType === undefined) {\n      throw new Error('\"auth.authType\" is undefined');\n    }\n    return this.signAndAppend(\n      this.auth.sponsorSpendingCondition,\n      sigHash,\n      AuthType.Sponsored,\n      privateKey\n    );\n  }\n\n  appendPubkey(publicKey: StacksPublicKey) {\n    const cond = this.auth.spendingCondition;\n    if (cond && !isSingleSig(cond)) {\n      const compressed = isCompressed(publicKey);\n      cond.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          publicKey\n        )\n      );\n    } else {\n      throw new Error(`Can't append public key to a singlesig condition`);\n    }\n  }\n\n  signAndAppend(\n    condition: SpendingCondition,\n    curSigHash: string,\n    authType: AuthType,\n    privateKey: StacksPrivateKey\n  ): string {\n    const { nextSig, nextSigHash } = nextSignature(\n      curSigHash,\n      authType,\n      condition.fee,\n      condition.nonce,\n      privateKey\n    );\n    if (isSingleSig(condition)) {\n      condition.signature = nextSig;\n    } else {\n      const compressed = privateKey.data.toString('hex').endsWith('01');\n      condition.fields.push(\n        createTransactionAuthField(\n          compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed,\n          nextSig\n        )\n      );\n    }\n\n    return nextSigHash;\n  }\n\n  txid(): string {\n    const serialized = this.serialize();\n    return txidFromData(serialized);\n  }\n\n  setSponsor(sponsorSpendingCondition: SpendingCondition) {\n    if (this.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n    }\n\n    this.auth.setSponsor(sponsorSpendingCondition);\n  }\n\n  /**\n   * Set the total fee to be paid for this transaction\n   *\n   * @param {BigNum} fee - the fee amount in microstacks\n   */\n  setFee(amount: BigNum) {\n    this.auth.setFee(amount);\n  }\n\n  /**\n   * Set the transaction nonce\n   *\n   * @param {BigNum} nonce - the nonce value\n   */\n  setNonce(nonce: BigNum) {\n    this.auth.setNonce(nonce);\n  }\n\n  /**\n   * Set the transaction sponsor nonce\n   *\n   * @param {BigNum} nonce - the sponsor nonce value\n   */\n  setSponsorNonce(nonce: BigNum) {\n    this.auth.setSponsorNonce(nonce);\n  }\n\n  serialize(): Buffer {\n    if (this.version === undefined) {\n      throw new SerializationError('\"version\" is undefined');\n    }\n    if (this.chainId === undefined) {\n      throw new SerializationError('\"chainId\" is undefined');\n    }\n    if (this.auth === undefined) {\n      throw new SerializationError('\"auth\" is undefined');\n    }\n    if (this.anchorMode === undefined) {\n      throw new SerializationError('\"anchorMode\" is undefined');\n    }\n    if (this.payload === undefined) {\n      throw new SerializationError('\"payload\" is undefined');\n    }\n\n    const bufferArray: BufferArray = new BufferArray();\n\n    bufferArray.appendByte(this.version);\n    const chainIdBuffer = Buffer.alloc(4);\n    chainIdBuffer.writeUInt32BE(this.chainId, 0);\n    bufferArray.push(chainIdBuffer);\n    bufferArray.push(this.auth.serialize());\n    bufferArray.appendByte(this.anchorMode);\n    bufferArray.appendByte(this.postConditionMode);\n    bufferArray.push(serializeLPList(this.postConditions));\n    bufferArray.push(serializePayload(this.payload));\n\n    return bufferArray.concatBuffer();\n  }\n}\n\n/**\n * @param data Buffer or hex string\n */\nexport function deserializeTransaction(data: BufferReader | Buffer | string) {\n  let bufferReader: BufferReader;\n  if (typeof data === 'string') {\n    if (data.slice(0, 2).toLowerCase() === '0x') {\n      bufferReader = new BufferReader(Buffer.from(data.slice(2), 'hex'));\n    } else {\n      bufferReader = new BufferReader(Buffer.from(data, 'hex'));\n    }\n  } else if (Buffer.isBuffer(data)) {\n    bufferReader = new BufferReader(data);\n  } else {\n    bufferReader = data;\n  }\n  const version = bufferReader.readUInt8Enum(TransactionVersion, n => {\n    throw new Error(`Could not parse ${n} as TransactionVersion`);\n  });\n  const chainId = bufferReader.readUInt32BE();\n  const auth = Authorization.deserialize(bufferReader);\n  const anchorMode = bufferReader.readUInt8Enum(AnchorMode, n => {\n    throw new Error(`Could not parse ${n} as AnchorMode`);\n  });\n  const postConditionMode = bufferReader.readUInt8Enum(PostConditionMode, n => {\n    throw new Error(`Could not parse ${n} as PostConditionMode`);\n  });\n  const postConditions = deserializeLPList(bufferReader, StacksMessageType.PostCondition);\n  const payload = deserializePayload(bufferReader);\n\n  return new StacksTransaction(\n    version,\n    auth,\n    payload,\n    postConditions,\n    postConditionMode,\n    anchorMode,\n    chainId\n  );\n}\n"],"names":["StacksTransaction","version","auth","payload","postConditions","postConditionMode","anchorMode","chainId","DEFAULT_CHAIN_ID","PostConditionMode","Deny","createLPList","payloadType","PayloadType","Coinbase","PoisonMicroblock","AnchorMode","OnChainOnly","ContractCall","SmartContract","TokenTransfer","Any","signBegin","tx","cloneDeep","intoInitialSighashAuth","txid","verifyBegin","createTxWithSignature","signature","parsedSig","toString","spendingCondition","Error","createMessageSignature","verifyOrigin","signNextOrigin","sigHash","privateKey","undefined","authType","signAndAppend","AuthType","Standard","signNextSponsor","sponsorSpendingCondition","Sponsored","appendPubkey","publicKey","cond","isSingleSig","compressed","isCompressed","fields","push","createTransactionAuthField","PubKeyEncoding","Compressed","Uncompressed","condition","curSigHash","nextSignature","fee","nonce","nextSig","nextSigHash","data","endsWith","serialized","serialize","txidFromData","setSponsor","SigningError","setFee","amount","setNonce","setSponsorNonce","SerializationError","bufferArray","BufferArray","appendByte","chainIdBuffer","Buffer","alloc","writeUInt32BE","serializeLPList","serializePayload","concatBuffer","deserializeTransaction","bufferReader","slice","toLowerCase","BufferReader","from","isBuffer","readUInt8Enum","TransactionVersion","n","readUInt32BE","Authorization","deserialize","deserializeLPList","StacksMessageType","PostCondition","deserializePayload"],"mappings":"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"}