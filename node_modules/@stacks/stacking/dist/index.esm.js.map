{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  makeContractCall,\n  bufferCV,\n  uintCV,\n  tupleCV,\n  ClarityType,\n  broadcastTransaction,\n  standardPrincipalCV,\n  ContractCallOptions,\n  TxBroadcastResult,\n  UIntCV,\n  BufferCV,\n  ContractCallPayload,\n  StacksTransaction,\n  callReadOnlyFunction,\n  cvToString,\n  ClarityValue,\n  ResponseErrorCV,\n  SomeCV,\n  TupleCV,\n  noneCV,\n  someCV,\n  validateStacksAddress,\n} from '@stacks/transactions';\nimport { StacksNetwork } from '@stacks/network';\nimport BN from 'bn.js';\nimport { StackingErrors } from './constants';\nimport { fetchPrivate } from '@stacks/common';\nimport { decodeBtcAddress } from './utils';\nexport * from './utils';\n\nexport interface PoxInfo {\n  contract_id: string;\n  first_burnchain_block_height: number;\n  min_amount_ustx: string;\n  registration_window_length: 250;\n  rejection_fraction: number;\n  reward_cycle_id: number;\n  reward_cycle_length: number;\n  rejection_votes_left_required: number;\n}\n\nexport type StackerInfo =\n  | {\n      stacked: false;\n    }\n  | {\n      stacked: true;\n      details: {\n        amount_microstx: string;\n        first_reward_cycle: number;\n        lock_period: number;\n        unlock_height: number;\n        pox_address: {\n          version: Buffer;\n          hashbytes: Buffer;\n        };\n      };\n    };\n\nexport interface BlockTimeInfo {\n  mainnet: {\n    target_block_time: number;\n  };\n  testnet: {\n    target_block_time: number;\n  };\n}\n\nexport interface CoreInfo {\n  burn_block_height: number;\n  stable_pox_consensus: string;\n}\n\nexport interface BalanceInfo {\n  balance: string;\n  nonce: number;\n}\n\nexport interface StackingEligibility {\n  eligible: boolean;\n  reason?: string;\n}\n\n/**\n * Lock stx check options\n *\n * @param  {string} poxAddress - the reward Bitcoin address\n * @param  {number} cycles - number of cycles to lock\n */\nexport interface CanLockStxOptions {\n  poxAddress: string;\n  cycles: number;\n}\n\n/**\n * Lock stx options\n *\n * @param  {string} key - private key to sign transaction\n * @param  {string} poxAddress - the reward Bitcoin address\n * @param  {number} cycles - number of cycles to lock\n * @param  {BN} amountMicroStx - number of microstacks to lock\n * @param  {number} burnBlockHeight - the burnchain block height to begin lock\n */\nexport interface LockStxOptions {\n  privateKey: string;\n  cycles: number;\n  poxAddress: string;\n  amountMicroStx: BN;\n  burnBlockHeight: number;\n}\n\n/**\n * Delegate stx options\n *\n * @param  {BN} amountMicroStx - number of microstacks to delegate\n * @param  {string} delegateTo - the STX address of the delegatee\n * @param  {number | optional} untilBurnBlockHeight - the burnchain block height after which delegation is revoked\n * @param  {string | optional} poxAddress - the reward Bitcoin address of the delegator\n * @param  {string} privateKey - private key to sign transaction\n */\nexport interface DelegateStxOptions {\n  amountMicroStx: BN;\n  delegateTo: string;\n  untilBurnBlockHeight?: number;\n  poxAddress?: string;\n  privateKey: string;\n}\n\n/**\n * Delegate stack stx options\n *\n * @param  {string} stacker - the STX address of the delegator\n * @param  {BN} amountMicroStx - number of microstacks to lock\n * @param  {string} poxAddress - the reward Bitcoin address of the delegator\n * @param  {number} burnBlockHeight - the burnchain block height to begin lock\n * @param  {number} cycles - number of cycles to lock\n * @param  {string} privateKey - private key to sign transaction\n * @param  {BN | optional} nonce - nonce for the transaction\n */\nexport interface DelegateStackStxOptions {\n  stacker: string;\n  amountMicroStx: BN;\n  poxAddress: string;\n  burnBlockHeight: number;\n  cycles: number;\n  privateKey: string;\n  nonce?: BN;\n}\n\nexport interface StackAggregationCommitOptions {\n  poxAddress: string;\n  rewardCycle: number;\n  privateKey: string;\n}\n\nexport class StackingClient {\n  constructor(public address: string, public network: StacksNetwork) {}\n\n  /**\n   * Get stacks node info\n   *\n   * @returns {Promise<CoreInfo>} that resolves to a CoreInfo response if the operation succeeds\n   */\n  async getCoreInfo(): Promise<CoreInfo> {\n    const url = this.network.getInfoUrl();\n    return fetchPrivate(url).then(res => res.json());\n  }\n\n  /**\n   * Get stacks node pox info\n   *\n   * @returns {Promise<PoxInfo>} that resolves to a PoxInfo response if the operation succeeds\n   */\n  async getPoxInfo(): Promise<PoxInfo> {\n    const url = this.network.getPoxInfoUrl();\n    return fetchPrivate(url).then(res => res.json());\n  }\n\n  /**\n   * Get stacks node target block time\n   *\n   * @returns {Promise<number>} that resolves to a number if the operation succeeds\n   */\n  async getTargetBlockTime(): Promise<number> {\n    const url = this.network.getBlockTimeInfoUrl();\n    const res = await fetchPrivate(url).then(res => res.json());\n\n    if (this.network.isMainnet()) {\n      return res.mainnet.target_block_time;\n    } else {\n      return res.testnet.target_block_time;\n    }\n  }\n\n  async getAccountStatus(): Promise<any> {\n    const url = this.network.getAccountApiUrl(this.address);\n    return fetchPrivate(url).then(res => res.json());\n  }\n\n  /**\n   * Get account balance\n   *\n   * @returns {Promise<BN>} that resolves to a BigNum if the operation succeeds\n   */\n  async getAccountBalance(): Promise<BN> {\n    return this.getAccountStatus().then(res => {\n      let balanceHex = res.balance;\n      if (res.balance.startsWith('0x')) {\n        balanceHex = res.balance.substr(2);\n      }\n      return new BN(balanceHex, 'hex');\n    });\n  }\n\n  /**\n   * Get reward cycle duration in seconds\n   *\n   * @returns {Promise<number>} that resolves to a number if the operation succeeds\n   */\n  async getCycleDuration(): Promise<number> {\n    const poxInfoPromise = this.getPoxInfo();\n    const targetBlockTimePromise = await this.getTargetBlockTime();\n\n    return Promise.all([poxInfoPromise, targetBlockTimePromise]).then(\n      ([poxInfo, targetBlockTime]) => {\n        return poxInfo.reward_cycle_length * targetBlockTime;\n      }\n    );\n  }\n\n  /**\n   * Get number of seconds until next reward cycle\n   *\n   * @returns {Promise<number>} that resolves to a number if the operation succeeds\n   */\n  async getSecondsUntilNextCycle(): Promise<number> {\n    const poxInfoPromise = this.getPoxInfo();\n    const targetBlockTimePromise = await this.getTargetBlockTime();\n    const coreInfoPromise = this.getCoreInfo();\n\n    return Promise.all([poxInfoPromise, targetBlockTimePromise, coreInfoPromise]).then(\n      ([poxInfo, targetBlockTime, coreInfo]) => {\n        const blocksToNextCycle =\n          poxInfo.reward_cycle_length -\n          ((coreInfo.burn_block_height - poxInfo.first_burnchain_block_height) %\n            poxInfo.reward_cycle_length);\n        return blocksToNextCycle * targetBlockTime;\n      }\n    );\n  }\n\n  /**\n   * Check if stacking is enabled for next reward cycle\n   *\n   * @returns {Promise<boolean>} that resolves to a bool if the operation succeeds\n   */\n  async isStackingEnabledNextCycle(): Promise<boolean> {\n    return (await this.getPoxInfo()).rejection_votes_left_required > 0;\n  }\n\n  /**\n   * Check if account has minimum require amount of Stacks for stacking\n   *\n   * @returns {Promise<boolean>} that resolves to a bool if the operation succeeds\n   */\n  async hasMinimumStx(): Promise<boolean> {\n    const balance: BN = await this.getAccountBalance();\n    const min: BN = new BN((await this.getPoxInfo()).min_amount_ustx.toString());\n    return balance.gte(min);\n  }\n\n  /**\n   * Check if account can lock stx\n   *\n   * @param {CanLockStxOptions} options - a required lock STX options object\n   *\n   * @returns {Promise<StackingEligibility>} that resolves to a StackingEligibility object if the operation succeeds\n   */\n  async canStack({ poxAddress, cycles }: CanLockStxOptions): Promise<StackingEligibility> {\n    const balancePromise: Promise<BN> = this.getAccountBalance();\n    const poxInfoPromise = this.getPoxInfo();\n\n    return Promise.all([balancePromise, poxInfoPromise])\n      .then(([balance, poxInfo]) => {\n        const { hashMode, data } = decodeBtcAddress(poxAddress);\n        const hashModeBuffer = bufferCV(new BN(hashMode, 10).toArrayLike(Buffer));\n        const hashbytes = bufferCV(data);\n        const poxAddressCV = tupleCV({\n          hashbytes,\n          version: hashModeBuffer,\n        });\n\n        const [contractAddress, contractName] = this.parseContractId(poxInfo.contract_id);\n\n        return callReadOnlyFunction({\n          network: this.network,\n          contractName,\n          contractAddress,\n          functionName: 'can-stack-stx',\n          senderAddress: this.address,\n          functionArgs: [\n            poxAddressCV,\n            uintCV(balance.toString()),\n            uintCV(poxInfo.reward_cycle_id),\n            uintCV(cycles.toString()),\n          ],\n        });\n      })\n      .then((responseCV: ClarityValue) => {\n        if (responseCV.type === ClarityType.ResponseOk) {\n          return {\n            eligible: true,\n          };\n        } else {\n          const errorCV = responseCV as ResponseErrorCV;\n          return {\n            eligible: false,\n            reason: StackingErrors[+cvToString(errorCV.value)],\n          };\n        }\n      });\n  }\n\n  /**\n   * Generate and broadcast a stacking transaction to lock STX\n   *\n   * @param {LockStxOptions} options - a required lock STX options object\n   *\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async stack({\n    amountMicroStx,\n    poxAddress,\n    cycles,\n    privateKey,\n    burnBlockHeight,\n  }: LockStxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const contract = poxInfo.contract_id;\n\n    const txOptions = this.getStackOptions({\n      amountMicroStx,\n      cycles,\n      poxAddress,\n      contract,\n      burnBlockHeight,\n    });\n    const tx = await makeContractCall({\n      ...txOptions,\n      senderKey: privateKey,\n    });\n\n    return broadcastTransaction(tx, txOptions.network as StacksNetwork);\n  }\n\n  /**\n   * As a delegatee, generate and broadcast a transaction to create a delegation relationship\n   *\n   * @param {DelegateStxOptions} options - a required delegate STX options object\n   *\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async delegateStx({\n    amountMicroStx,\n    delegateTo,\n    untilBurnBlockHeight,\n    poxAddress,\n    privateKey,\n  }: DelegateStxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const contract = poxInfo.contract_id;\n\n    const txOptions = this.getDelegateOptions({\n      contract,\n      amountMicroStx,\n      delegateTo,\n      untilBurnBlockHeight,\n      poxAddress,\n    });\n\n    const tx = await makeContractCall({\n      ...txOptions,\n      senderKey: privateKey,\n    });\n\n    return broadcastTransaction(tx, txOptions.network as StacksNetwork);\n  }\n\n  /**\n   * As a delegator, generate and broadcast transactions to stack for multiple delegatees. This will lock up tokens owned by the delegatees.\n   *\n   * @param {DelegateStackStxOptions} options - a required delegate stack STX options object\n   *\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async delegateStackStx({\n    stacker,\n    amountMicroStx,\n    poxAddress,\n    burnBlockHeight,\n    cycles,\n    privateKey,\n    nonce,\n  }: DelegateStackStxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const contract = poxInfo.contract_id;\n\n    const txOptions = this.getDelegateStackOptions({\n      contract,\n      stacker,\n      amountMicroStx,\n      poxAddress,\n      burnBlockHeight,\n      cycles,\n      nonce,\n    });\n    const tx = await makeContractCall({\n      ...txOptions,\n      senderKey: privateKey,\n    });\n\n    return broadcastTransaction(tx, txOptions.network as StacksNetwork);\n  }\n\n  /**\n   * As a delegator, generate and broadcast a transaction to commit partially committed delegatee tokens\n   *\n   * @param {StackAggregationCommitOptions} options - a required stack aggregation commit options object\n   *\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async stackAggregationCommit({\n    poxAddress,\n    rewardCycle,\n    privateKey,\n  }: StackAggregationCommitOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const contract = poxInfo.contract_id;\n\n    const txOptions = this.getStackAggregationCommitOptions({\n      contract,\n      poxAddress,\n      rewardCycle,\n    });\n    const tx = await makeContractCall({\n      ...txOptions,\n      senderKey: privateKey,\n    });\n\n    return broadcastTransaction(tx, txOptions.network as StacksNetwork);\n  }\n\n  /**\n   * As a delegatee, generate and broadcast a transaction to terminate the delegation relationship\n   *\n   * @param {string} privateKey - the private key to be used for the revoke call\n   *\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async revokeDelegateStx(privateKey: string): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const contract = poxInfo.contract_id;\n\n    const txOptions = this.getRevokeDelegateStxOptions(contract);\n\n    const tx = await makeContractCall({\n      ...txOptions,\n      senderKey: privateKey,\n    });\n\n    return broadcastTransaction(tx, txOptions.network as StacksNetwork);\n  }\n\n  getStackOptions({\n    amountMicroStx,\n    poxAddress,\n    cycles,\n    contract,\n    burnBlockHeight,\n  }: {\n    cycles: number;\n    poxAddress: string;\n    amountMicroStx: BN;\n    contract: string;\n    burnBlockHeight: number;\n  }) {\n    const { hashMode, data } = decodeBtcAddress(poxAddress);\n    const hashModeBuffer = bufferCV(new BN(hashMode, 10).toArrayLike(Buffer));\n    const hashbytes = bufferCV(data);\n    const address = tupleCV({\n      hashbytes,\n      version: hashModeBuffer,\n    });\n    const [contractAddress, contractName] = this.parseContractId(contract);\n    const network = this.network;\n    const txOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'stack-stx',\n      // sum of uStx, address, burn_block_height, num_cycles\n      functionArgs: [\n        uintCV(amountMicroStx.toString(10)),\n        address,\n        uintCV(burnBlockHeight),\n        uintCV(cycles),\n      ],\n      validateWithAbi: true,\n      network,\n    };\n    return txOptions;\n  }\n\n  getDelegateOptions({\n    contract,\n    amountMicroStx,\n    delegateTo,\n    untilBurnBlockHeight,\n    poxAddress,\n  }: {\n    contract: string;\n    amountMicroStx: BN;\n    delegateTo: string;\n    untilBurnBlockHeight?: number;\n    poxAddress?: string;\n  }) {\n    let address = undefined;\n\n    if (poxAddress) {\n      const { hashMode, data } = decodeBtcAddress(poxAddress);\n      const hashModeBuffer = bufferCV(new BN(hashMode, 10).toArrayLike(Buffer));\n      const hashbytes = bufferCV(data);\n      address = someCV(\n        tupleCV({\n          hashbytes,\n          version: hashModeBuffer,\n        })\n      );\n    }\n\n    const [contractAddress, contractName] = this.parseContractId(contract);\n    const network = this.network;\n    const txOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'delegate-stx',\n      functionArgs: [\n        uintCV(amountMicroStx.toString(10)),\n        standardPrincipalCV(delegateTo),\n        untilBurnBlockHeight ? someCV(uintCV(untilBurnBlockHeight)) : noneCV(),\n        address ? address : noneCV(),\n      ],\n      validateWithAbi: true,\n      network,\n    };\n    return txOptions;\n  }\n\n  getDelegateStackOptions({\n    contract,\n    stacker,\n    amountMicroStx,\n    poxAddress,\n    burnBlockHeight,\n    cycles,\n    nonce,\n  }: {\n    contract: string;\n    stacker: string;\n    amountMicroStx: BN;\n    poxAddress: string;\n    burnBlockHeight: number;\n    cycles: number;\n    nonce?: BN;\n  }) {\n    const { hashMode, data } = decodeBtcAddress(poxAddress);\n    const hashModeBuffer = bufferCV(new BN(hashMode, 10).toArrayLike(Buffer));\n    const hashbytes = bufferCV(data);\n    const address = tupleCV({\n      hashbytes,\n      version: hashModeBuffer,\n    });\n\n    const [contractAddress, contractName] = this.parseContractId(contract);\n    const network = this.network;\n    const txOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'delegate-stack-stx',\n      functionArgs: [\n        standardPrincipalCV(stacker),\n        uintCV(amountMicroStx.toString(10)),\n        address,\n        uintCV(burnBlockHeight),\n        uintCV(cycles),\n      ],\n      validateWithAbi: true,\n      network,\n    };\n\n    if (nonce) {\n      txOptions.nonce = nonce;\n    }\n\n    return txOptions;\n  }\n\n  getStackAggregationCommitOptions({\n    contract,\n    poxAddress,\n    rewardCycle,\n  }: {\n    contract: string;\n    poxAddress: string;\n    rewardCycle: number;\n  }) {\n    const { hashMode, data } = decodeBtcAddress(poxAddress);\n    const hashModeBuffer = bufferCV(new BN(hashMode, 10).toArrayLike(Buffer));\n    const hashbytes = bufferCV(data);\n    const address = tupleCV({\n      hashbytes,\n      version: hashModeBuffer,\n    });\n\n    const [contractAddress, contractName] = this.parseContractId(contract);\n    const network = this.network;\n    const txOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'stack-aggregation-commit',\n      functionArgs: [address, uintCV(rewardCycle)],\n      validateWithAbi: true,\n      network,\n    };\n    return txOptions;\n  }\n\n  getRevokeDelegateStxOptions(contract: string) {\n    const [contractAddress, contractName] = this.parseContractId(contract);\n    const network = this.network;\n    const txOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'revoke-delegate-stx',\n      functionArgs: [],\n      validateWithAbi: true,\n      network,\n    };\n    return txOptions;\n  }\n\n  /**\n   * Check stacking status\n   *\n   * @returns {Promise<StackerInfo>} that resolves to a StackerInfo object if the operation succeeds\n   */\n  async getStatus(): Promise<StackerInfo> {\n    const poxInfo = await this.getPoxInfo();\n    const [contractAddress, contractName] = this.parseContractId(poxInfo.contract_id);\n    const account = await this.getAccountStatus();\n    const functionName = 'get-stacker-info';\n\n    return callReadOnlyFunction({\n      contractAddress,\n      contractName,\n      functionName,\n      senderAddress: this.address,\n      functionArgs: [standardPrincipalCV(this.address)],\n      network: this.network,\n    }).then((responseCV: ClarityValue) => {\n      if (responseCV.type === ClarityType.OptionalSome) {\n        const someCV = responseCV as SomeCV;\n        const tupleCV: TupleCV = someCV.value as TupleCV;\n        const poxAddress: TupleCV = tupleCV.data['pox-addr'] as TupleCV;\n        const amountMicroStx: UIntCV = tupleCV.data['amount-ustx'] as UIntCV;\n        const firstRewardCycle: UIntCV = tupleCV.data['first-reward-cycle'] as UIntCV;\n        const lockPeriod: UIntCV = tupleCV.data['lock-period'] as UIntCV;\n        const version: BufferCV = poxAddress.data['version'] as BufferCV;\n        const hashbytes: BufferCV = poxAddress.data['hashbytes'] as BufferCV;\n\n        return {\n          stacked: true,\n          details: {\n            amount_microstx: amountMicroStx.value.toString(),\n            first_reward_cycle: firstRewardCycle.value.toNumber(),\n            lock_period: lockPeriod.value.toNumber(),\n            unlock_height: account.unlock_height,\n            pox_address: {\n              version: version.buffer,\n              hashbytes: hashbytes.buffer,\n            },\n          },\n        };\n      } else if (responseCV.type === ClarityType.OptionalNone) {\n        return {\n          stacked: false,\n        };\n      } else {\n        throw new Error(`Error fetching stacker info`);\n      }\n    });\n  }\n\n  /**\n   * Adjust microstacks amount for locking after taking into account transaction fees\n   *\n   * @returns {StacksTransaction} that resolves to a transaction object if the operation succeeds\n   */\n  modifyLockTxFee({ tx, amountMicroStx }: { tx: StacksTransaction; amountMicroStx: BN }) {\n    const fee = tx.auth.getFee() as BN;\n    (tx.payload as ContractCallPayload).functionArgs[0] = uintCV(\n      new BN(amountMicroStx.toString(10), 10).sub(fee).toArrayLike(Buffer)\n    );\n    return tx;\n  }\n\n  /**\n   * Parses a contract identifier and ensures it is formatted correctly\n   *\n   * @returns {Array<string>} a contract address and name\n   */\n  parseContractId(contract: string): Array<string> {\n    const parts = contract.split('.');\n\n    if (parts.length !== 2 || !validateStacksAddress(parts[0]) || parts[1] !== 'pox') {\n      throw new Error('Stacking contract ID is malformed');\n    }\n\n    return parts;\n  }\n}\n"],"names":["StackingClient","address","network","getCoreInfo","url","getInfoUrl","fetchPrivate","then","res","json","getPoxInfo","getPoxInfoUrl","getTargetBlockTime","getBlockTimeInfoUrl","isMainnet","mainnet","target_block_time","testnet","getAccountStatus","getAccountApiUrl","getAccountBalance","balanceHex","balance","startsWith","substr","BN","getCycleDuration","poxInfoPromise","targetBlockTimePromise","Promise","all","poxInfo","targetBlockTime","reward_cycle_length","getSecondsUntilNextCycle","coreInfoPromise","coreInfo","blocksToNextCycle","burn_block_height","first_burnchain_block_height","isStackingEnabledNextCycle","rejection_votes_left_required","hasMinimumStx","min_amount_ustx","toString","min","gte","canStack","poxAddress","cycles","balancePromise","decodeBtcAddress","hashMode","data","hashModeBuffer","bufferCV","toArrayLike","Buffer","hashbytes","poxAddressCV","tupleCV","version","parseContractId","contract_id","contractAddress","contractName","callReadOnlyFunction","functionName","senderAddress","functionArgs","uintCV","reward_cycle_id","responseCV","type","ClarityType","ResponseOk","eligible","errorCV","reason","StackingErrors","cvToString","value","stack","amountMicroStx","privateKey","burnBlockHeight","contract","txOptions","getStackOptions","makeContractCall","senderKey","tx","broadcastTransaction","delegateStx","delegateTo","untilBurnBlockHeight","getDelegateOptions","delegateStackStx","stacker","nonce","getDelegateStackOptions","stackAggregationCommit","rewardCycle","getStackAggregationCommitOptions","revokeDelegateStx","getRevokeDelegateStxOptions","validateWithAbi","undefined","someCV","standardPrincipalCV","noneCV","getStatus","account","OptionalSome","firstRewardCycle","lockPeriod","stacked","details","amount_microstx","first_reward_cycle","toNumber","lock_period","unlock_height","pox_address","buffer","OptionalNone","Error","modifyLockTxFee","fee","auth","getFee","payload","sub","parts","split","length","validateStacksAddress"],"mappings":"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"}