import { asyncToGenerator as _asyncToGenerator, extends as _extends } from './_virtual/_rollupPluginBabelHelpers.js';
import runtime_1 from './node_modules/regenerator-runtime/runtime.esm.js';
import { bufferCV, tupleCV, uintCV, someCV, standardPrincipalCV, noneCV, validateStacksAddress, callReadOnlyFunction, ClarityType, cvToString, broadcastTransaction, makeContractCall } from '@stacks/transactions';
import BN from 'bn.js';
import { StackingErrors } from './constants.esm.js';
import { fetchPrivate } from '@stacks/common';
import { decodeBtcAddress } from './utils.esm.js';
export { InvalidAddressError, btcAddressVersionToHashMode, decodeBtcAddress, getAddressHashMode, getBTCAddress, getErrorString } from './utils.esm.js';

var StackingClient = /*#__PURE__*/function () {
  function StackingClient(address, network) {
    this.address = address;
    this.network = network;
  }

  var _proto = StackingClient.prototype;

  _proto.getCoreInfo = /*#__PURE__*/function () {
    var _getCoreInfo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var url;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              url = this.network.getInfoUrl();
              return _context.abrupt("return", fetchPrivate(url).then(function (res) {
                return res.json();
              }));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getCoreInfo() {
      return _getCoreInfo.apply(this, arguments);
    }

    return getCoreInfo;
  }();

  _proto.getPoxInfo = /*#__PURE__*/function () {
    var _getPoxInfo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      var url;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              url = this.network.getPoxInfoUrl();
              return _context2.abrupt("return", fetchPrivate(url).then(function (res) {
                return res.json();
              }));

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getPoxInfo() {
      return _getPoxInfo.apply(this, arguments);
    }

    return getPoxInfo;
  }();

  _proto.getTargetBlockTime = /*#__PURE__*/function () {
    var _getTargetBlockTime = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      var url, res;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              url = this.network.getBlockTimeInfoUrl();
              _context3.next = 3;
              return fetchPrivate(url).then(function (res) {
                return res.json();
              });

            case 3:
              res = _context3.sent;

              if (!this.network.isMainnet()) {
                _context3.next = 8;
                break;
              }

              return _context3.abrupt("return", res.mainnet.target_block_time);

            case 8:
              return _context3.abrupt("return", res.testnet.target_block_time);

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getTargetBlockTime() {
      return _getTargetBlockTime.apply(this, arguments);
    }

    return getTargetBlockTime;
  }();

  _proto.getAccountStatus = /*#__PURE__*/function () {
    var _getAccountStatus = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      var url;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              url = this.network.getAccountApiUrl(this.address);
              return _context4.abrupt("return", fetchPrivate(url).then(function (res) {
                return res.json();
              }));

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getAccountStatus() {
      return _getAccountStatus.apply(this, arguments);
    }

    return getAccountStatus;
  }();

  _proto.getAccountBalance = /*#__PURE__*/function () {
    var _getAccountBalance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", this.getAccountStatus().then(function (res) {
                var balanceHex = res.balance;

                if (res.balance.startsWith('0x')) {
                  balanceHex = res.balance.substr(2);
                }

                return new BN(balanceHex, 'hex');
              }));

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getAccountBalance() {
      return _getAccountBalance.apply(this, arguments);
    }

    return getAccountBalance;
  }();

  _proto.getCycleDuration = /*#__PURE__*/function () {
    var _getCycleDuration = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
      var poxInfoPromise, targetBlockTimePromise;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              poxInfoPromise = this.getPoxInfo();
              _context6.next = 3;
              return this.getTargetBlockTime();

            case 3:
              targetBlockTimePromise = _context6.sent;
              return _context6.abrupt("return", Promise.all([poxInfoPromise, targetBlockTimePromise]).then(function (_ref) {
                var poxInfo = _ref[0],
                    targetBlockTime = _ref[1];
                return poxInfo.reward_cycle_length * targetBlockTime;
              }));

            case 5:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getCycleDuration() {
      return _getCycleDuration.apply(this, arguments);
    }

    return getCycleDuration;
  }();

  _proto.getSecondsUntilNextCycle = /*#__PURE__*/function () {
    var _getSecondsUntilNextCycle = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {
      var poxInfoPromise, targetBlockTimePromise, coreInfoPromise;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              poxInfoPromise = this.getPoxInfo();
              _context7.next = 3;
              return this.getTargetBlockTime();

            case 3:
              targetBlockTimePromise = _context7.sent;
              coreInfoPromise = this.getCoreInfo();
              return _context7.abrupt("return", Promise.all([poxInfoPromise, targetBlockTimePromise, coreInfoPromise]).then(function (_ref2) {
                var poxInfo = _ref2[0],
                    targetBlockTime = _ref2[1],
                    coreInfo = _ref2[2];
                var blocksToNextCycle = poxInfo.reward_cycle_length - (coreInfo.burn_block_height - poxInfo.first_burnchain_block_height) % poxInfo.reward_cycle_length;
                return blocksToNextCycle * targetBlockTime;
              }));

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getSecondsUntilNextCycle() {
      return _getSecondsUntilNextCycle.apply(this, arguments);
    }

    return getSecondsUntilNextCycle;
  }();

  _proto.isStackingEnabledNextCycle = /*#__PURE__*/function () {
    var _isStackingEnabledNextCycle = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8() {
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.getPoxInfo();

            case 2:
              _context8.t0 = _context8.sent.rejection_votes_left_required;
              return _context8.abrupt("return", _context8.t0 > 0);

            case 4:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function isStackingEnabledNextCycle() {
      return _isStackingEnabledNextCycle.apply(this, arguments);
    }

    return isStackingEnabledNextCycle;
  }();

  _proto.hasMinimumStx = /*#__PURE__*/function () {
    var _hasMinimumStx = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {
      var balance, min;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return this.getAccountBalance();

            case 2:
              balance = _context9.sent;
              _context9.t0 = BN;
              _context9.next = 6;
              return this.getPoxInfo();

            case 6:
              _context9.t1 = _context9.sent.min_amount_ustx.toString();
              min = new _context9.t0(_context9.t1);
              return _context9.abrupt("return", balance.gte(min));

            case 9:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    function hasMinimumStx() {
      return _hasMinimumStx.apply(this, arguments);
    }

    return hasMinimumStx;
  }();

  _proto.canStack = /*#__PURE__*/function () {
    var _canStack = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(_ref3) {
      var _this = this;

      var poxAddress, cycles, balancePromise, poxInfoPromise;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              poxAddress = _ref3.poxAddress, cycles = _ref3.cycles;
              balancePromise = this.getAccountBalance();
              poxInfoPromise = this.getPoxInfo();
              return _context10.abrupt("return", Promise.all([balancePromise, poxInfoPromise]).then(function (_ref4) {
                var balance = _ref4[0],
                    poxInfo = _ref4[1];

                var _decodeBtcAddress = decodeBtcAddress(poxAddress),
                    hashMode = _decodeBtcAddress.hashMode,
                    data = _decodeBtcAddress.data;

                var hashModeBuffer = bufferCV(new BN(hashMode, 10).toArrayLike(Buffer));
                var hashbytes = bufferCV(data);
                var poxAddressCV = tupleCV({
                  hashbytes: hashbytes,
                  version: hashModeBuffer
                });

                var _this$parseContractId = _this.parseContractId(poxInfo.contract_id),
                    contractAddress = _this$parseContractId[0],
                    contractName = _this$parseContractId[1];

                return callReadOnlyFunction({
                  network: _this.network,
                  contractName: contractName,
                  contractAddress: contractAddress,
                  functionName: 'can-stack-stx',
                  senderAddress: _this.address,
                  functionArgs: [poxAddressCV, uintCV(balance.toString()), uintCV(poxInfo.reward_cycle_id), uintCV(cycles.toString())]
                });
              }).then(function (responseCV) {
                if (responseCV.type === ClarityType.ResponseOk) {
                  return {
                    eligible: true
                  };
                } else {
                  var errorCV = responseCV;
                  return {
                    eligible: false,
                    reason: StackingErrors[+cvToString(errorCV.value)]
                  };
                }
              }));

            case 4:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    function canStack(_x) {
      return _canStack.apply(this, arguments);
    }

    return canStack;
  }();

  _proto.stack = /*#__PURE__*/function () {
    var _stack = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(_ref5) {
      var amountMicroStx, poxAddress, cycles, privateKey, burnBlockHeight, poxInfo, contract, txOptions, tx;
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              amountMicroStx = _ref5.amountMicroStx, poxAddress = _ref5.poxAddress, cycles = _ref5.cycles, privateKey = _ref5.privateKey, burnBlockHeight = _ref5.burnBlockHeight;
              _context11.next = 3;
              return this.getPoxInfo();

            case 3:
              poxInfo = _context11.sent;
              contract = poxInfo.contract_id;
              txOptions = this.getStackOptions({
                amountMicroStx: amountMicroStx,
                cycles: cycles,
                poxAddress: poxAddress,
                contract: contract,
                burnBlockHeight: burnBlockHeight
              });
              _context11.next = 8;
              return makeContractCall(_extends({}, txOptions, {
                senderKey: privateKey
              }));

            case 8:
              tx = _context11.sent;
              return _context11.abrupt("return", broadcastTransaction(tx, txOptions.network));

            case 10:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    function stack(_x2) {
      return _stack.apply(this, arguments);
    }

    return stack;
  }();

  _proto.delegateStx = /*#__PURE__*/function () {
    var _delegateStx = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(_ref6) {
      var amountMicroStx, delegateTo, untilBurnBlockHeight, poxAddress, privateKey, poxInfo, contract, txOptions, tx;
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              amountMicroStx = _ref6.amountMicroStx, delegateTo = _ref6.delegateTo, untilBurnBlockHeight = _ref6.untilBurnBlockHeight, poxAddress = _ref6.poxAddress, privateKey = _ref6.privateKey;
              _context12.next = 3;
              return this.getPoxInfo();

            case 3:
              poxInfo = _context12.sent;
              contract = poxInfo.contract_id;
              txOptions = this.getDelegateOptions({
                contract: contract,
                amountMicroStx: amountMicroStx,
                delegateTo: delegateTo,
                untilBurnBlockHeight: untilBurnBlockHeight,
                poxAddress: poxAddress
              });
              _context12.next = 8;
              return makeContractCall(_extends({}, txOptions, {
                senderKey: privateKey
              }));

            case 8:
              tx = _context12.sent;
              return _context12.abrupt("return", broadcastTransaction(tx, txOptions.network));

            case 10:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    }));

    function delegateStx(_x3) {
      return _delegateStx.apply(this, arguments);
    }

    return delegateStx;
  }();

  _proto.delegateStackStx = /*#__PURE__*/function () {
    var _delegateStackStx = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(_ref7) {
      var stacker, amountMicroStx, poxAddress, burnBlockHeight, cycles, privateKey, nonce, poxInfo, contract, txOptions, tx;
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              stacker = _ref7.stacker, amountMicroStx = _ref7.amountMicroStx, poxAddress = _ref7.poxAddress, burnBlockHeight = _ref7.burnBlockHeight, cycles = _ref7.cycles, privateKey = _ref7.privateKey, nonce = _ref7.nonce;
              _context13.next = 3;
              return this.getPoxInfo();

            case 3:
              poxInfo = _context13.sent;
              contract = poxInfo.contract_id;
              txOptions = this.getDelegateStackOptions({
                contract: contract,
                stacker: stacker,
                amountMicroStx: amountMicroStx,
                poxAddress: poxAddress,
                burnBlockHeight: burnBlockHeight,
                cycles: cycles,
                nonce: nonce
              });
              _context13.next = 8;
              return makeContractCall(_extends({}, txOptions, {
                senderKey: privateKey
              }));

            case 8:
              tx = _context13.sent;
              return _context13.abrupt("return", broadcastTransaction(tx, txOptions.network));

            case 10:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function delegateStackStx(_x4) {
      return _delegateStackStx.apply(this, arguments);
    }

    return delegateStackStx;
  }();

  _proto.stackAggregationCommit = /*#__PURE__*/function () {
    var _stackAggregationCommit = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14(_ref8) {
      var poxAddress, rewardCycle, privateKey, poxInfo, contract, txOptions, tx;
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              poxAddress = _ref8.poxAddress, rewardCycle = _ref8.rewardCycle, privateKey = _ref8.privateKey;
              _context14.next = 3;
              return this.getPoxInfo();

            case 3:
              poxInfo = _context14.sent;
              contract = poxInfo.contract_id;
              txOptions = this.getStackAggregationCommitOptions({
                contract: contract,
                poxAddress: poxAddress,
                rewardCycle: rewardCycle
              });
              _context14.next = 8;
              return makeContractCall(_extends({}, txOptions, {
                senderKey: privateKey
              }));

            case 8:
              tx = _context14.sent;
              return _context14.abrupt("return", broadcastTransaction(tx, txOptions.network));

            case 10:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function stackAggregationCommit(_x5) {
      return _stackAggregationCommit.apply(this, arguments);
    }

    return stackAggregationCommit;
  }();

  _proto.revokeDelegateStx = /*#__PURE__*/function () {
    var _revokeDelegateStx = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(privateKey) {
      var poxInfo, contract, txOptions, tx;
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return this.getPoxInfo();

            case 2:
              poxInfo = _context15.sent;
              contract = poxInfo.contract_id;
              txOptions = this.getRevokeDelegateStxOptions(contract);
              _context15.next = 7;
              return makeContractCall(_extends({}, txOptions, {
                senderKey: privateKey
              }));

            case 7:
              tx = _context15.sent;
              return _context15.abrupt("return", broadcastTransaction(tx, txOptions.network));

            case 9:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this);
    }));

    function revokeDelegateStx(_x6) {
      return _revokeDelegateStx.apply(this, arguments);
    }

    return revokeDelegateStx;
  }();

  _proto.getStackOptions = function getStackOptions(_ref9) {
    var amountMicroStx = _ref9.amountMicroStx,
        poxAddress = _ref9.poxAddress,
        cycles = _ref9.cycles,
        contract = _ref9.contract,
        burnBlockHeight = _ref9.burnBlockHeight;

    var _decodeBtcAddress2 = decodeBtcAddress(poxAddress),
        hashMode = _decodeBtcAddress2.hashMode,
        data = _decodeBtcAddress2.data;

    var hashModeBuffer = bufferCV(new BN(hashMode, 10).toArrayLike(Buffer));
    var hashbytes = bufferCV(data);
    var address = tupleCV({
      hashbytes: hashbytes,
      version: hashModeBuffer
    });

    var _this$parseContractId2 = this.parseContractId(contract),
        contractAddress = _this$parseContractId2[0],
        contractName = _this$parseContractId2[1];

    var network = this.network;
    var txOptions = {
      contractAddress: contractAddress,
      contractName: contractName,
      functionName: 'stack-stx',
      functionArgs: [uintCV(amountMicroStx.toString(10)), address, uintCV(burnBlockHeight), uintCV(cycles)],
      validateWithAbi: true,
      network: network
    };
    return txOptions;
  };

  _proto.getDelegateOptions = function getDelegateOptions(_ref10) {
    var contract = _ref10.contract,
        amountMicroStx = _ref10.amountMicroStx,
        delegateTo = _ref10.delegateTo,
        untilBurnBlockHeight = _ref10.untilBurnBlockHeight,
        poxAddress = _ref10.poxAddress;
    var address = undefined;

    if (poxAddress) {
      var _decodeBtcAddress3 = decodeBtcAddress(poxAddress),
          hashMode = _decodeBtcAddress3.hashMode,
          data = _decodeBtcAddress3.data;

      var hashModeBuffer = bufferCV(new BN(hashMode, 10).toArrayLike(Buffer));
      var hashbytes = bufferCV(data);
      address = someCV(tupleCV({
        hashbytes: hashbytes,
        version: hashModeBuffer
      }));
    }

    var _this$parseContractId3 = this.parseContractId(contract),
        contractAddress = _this$parseContractId3[0],
        contractName = _this$parseContractId3[1];

    var network = this.network;
    var txOptions = {
      contractAddress: contractAddress,
      contractName: contractName,
      functionName: 'delegate-stx',
      functionArgs: [uintCV(amountMicroStx.toString(10)), standardPrincipalCV(delegateTo), untilBurnBlockHeight ? someCV(uintCV(untilBurnBlockHeight)) : noneCV(), address ? address : noneCV()],
      validateWithAbi: true,
      network: network
    };
    return txOptions;
  };

  _proto.getDelegateStackOptions = function getDelegateStackOptions(_ref11) {
    var contract = _ref11.contract,
        stacker = _ref11.stacker,
        amountMicroStx = _ref11.amountMicroStx,
        poxAddress = _ref11.poxAddress,
        burnBlockHeight = _ref11.burnBlockHeight,
        cycles = _ref11.cycles,
        nonce = _ref11.nonce;

    var _decodeBtcAddress4 = decodeBtcAddress(poxAddress),
        hashMode = _decodeBtcAddress4.hashMode,
        data = _decodeBtcAddress4.data;

    var hashModeBuffer = bufferCV(new BN(hashMode, 10).toArrayLike(Buffer));
    var hashbytes = bufferCV(data);
    var address = tupleCV({
      hashbytes: hashbytes,
      version: hashModeBuffer
    });

    var _this$parseContractId4 = this.parseContractId(contract),
        contractAddress = _this$parseContractId4[0],
        contractName = _this$parseContractId4[1];

    var network = this.network;
    var txOptions = {
      contractAddress: contractAddress,
      contractName: contractName,
      functionName: 'delegate-stack-stx',
      functionArgs: [standardPrincipalCV(stacker), uintCV(amountMicroStx.toString(10)), address, uintCV(burnBlockHeight), uintCV(cycles)],
      validateWithAbi: true,
      network: network
    };

    if (nonce) {
      txOptions.nonce = nonce;
    }

    return txOptions;
  };

  _proto.getStackAggregationCommitOptions = function getStackAggregationCommitOptions(_ref12) {
    var contract = _ref12.contract,
        poxAddress = _ref12.poxAddress,
        rewardCycle = _ref12.rewardCycle;

    var _decodeBtcAddress5 = decodeBtcAddress(poxAddress),
        hashMode = _decodeBtcAddress5.hashMode,
        data = _decodeBtcAddress5.data;

    var hashModeBuffer = bufferCV(new BN(hashMode, 10).toArrayLike(Buffer));
    var hashbytes = bufferCV(data);
    var address = tupleCV({
      hashbytes: hashbytes,
      version: hashModeBuffer
    });

    var _this$parseContractId5 = this.parseContractId(contract),
        contractAddress = _this$parseContractId5[0],
        contractName = _this$parseContractId5[1];

    var network = this.network;
    var txOptions = {
      contractAddress: contractAddress,
      contractName: contractName,
      functionName: 'stack-aggregation-commit',
      functionArgs: [address, uintCV(rewardCycle)],
      validateWithAbi: true,
      network: network
    };
    return txOptions;
  };

  _proto.getRevokeDelegateStxOptions = function getRevokeDelegateStxOptions(contract) {
    var _this$parseContractId6 = this.parseContractId(contract),
        contractAddress = _this$parseContractId6[0],
        contractName = _this$parseContractId6[1];

    var network = this.network;
    var txOptions = {
      contractAddress: contractAddress,
      contractName: contractName,
      functionName: 'revoke-delegate-stx',
      functionArgs: [],
      validateWithAbi: true,
      network: network
    };
    return txOptions;
  };

  _proto.getStatus = /*#__PURE__*/function () {
    var _getStatus = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16() {
      var poxInfo, _this$parseContractId7, contractAddress, contractName, account, functionName;

      return runtime_1.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              _context16.next = 2;
              return this.getPoxInfo();

            case 2:
              poxInfo = _context16.sent;
              _this$parseContractId7 = this.parseContractId(poxInfo.contract_id), contractAddress = _this$parseContractId7[0], contractName = _this$parseContractId7[1];
              _context16.next = 6;
              return this.getAccountStatus();

            case 6:
              account = _context16.sent;
              functionName = 'get-stacker-info';
              return _context16.abrupt("return", callReadOnlyFunction({
                contractAddress: contractAddress,
                contractName: contractName,
                functionName: functionName,
                senderAddress: this.address,
                functionArgs: [standardPrincipalCV(this.address)],
                network: this.network
              }).then(function (responseCV) {
                if (responseCV.type === ClarityType.OptionalSome) {
                  var _someCV = responseCV;
                  var _tupleCV = _someCV.value;
                  var poxAddress = _tupleCV.data['pox-addr'];
                  var amountMicroStx = _tupleCV.data['amount-ustx'];
                  var firstRewardCycle = _tupleCV.data['first-reward-cycle'];
                  var lockPeriod = _tupleCV.data['lock-period'];
                  var version = poxAddress.data['version'];
                  var hashbytes = poxAddress.data['hashbytes'];
                  return {
                    stacked: true,
                    details: {
                      amount_microstx: amountMicroStx.value.toString(),
                      first_reward_cycle: firstRewardCycle.value.toNumber(),
                      lock_period: lockPeriod.value.toNumber(),
                      unlock_height: account.unlock_height,
                      pox_address: {
                        version: version.buffer,
                        hashbytes: hashbytes.buffer
                      }
                    }
                  };
                } else if (responseCV.type === ClarityType.OptionalNone) {
                  return {
                    stacked: false
                  };
                } else {
                  throw new Error("Error fetching stacker info");
                }
              }));

            case 9:
            case "end":
              return _context16.stop();
          }
        }
      }, _callee16, this);
    }));

    function getStatus() {
      return _getStatus.apply(this, arguments);
    }

    return getStatus;
  }();

  _proto.modifyLockTxFee = function modifyLockTxFee(_ref13) {
    var tx = _ref13.tx,
        amountMicroStx = _ref13.amountMicroStx;
    var fee = tx.auth.getFee();
    tx.payload.functionArgs[0] = uintCV(new BN(amountMicroStx.toString(10), 10).sub(fee).toArrayLike(Buffer));
    return tx;
  };

  _proto.parseContractId = function parseContractId(contract) {
    var parts = contract.split('.');

    if (parts.length !== 2 || !validateStacksAddress(parts[0]) || parts[1] !== 'pox') {
      throw new Error('Stacking contract ID is malformed');
    }

    return parts;
  };

  return StackingClient;
}();

export { StackingClient };
//# sourceMappingURL=index.esm.js.map
