{"version":3,"file":"utils.esm.js","sources":["../src/utils.ts"],"sourcesContent":["import { AddressHashMode } from '@stacks/transactions';\nimport { address } from 'bitcoinjs-lib';\nimport BN from 'bn.js';\nimport { StackingErrors } from './constants';\n\nexport class InvalidAddressError extends Error {\n  innerError?: Error;\n  constructor(address: string, innerError?: Error) {\n    const msg = `${address} is not a valid P2PKH or P2SH address -- native P2WPKH and native P2WSH are not supported in PoX.`;\n    super(msg);\n    this.message = msg;\n    this.name = this.constructor.name;\n    this.innerError = innerError;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport function btcAddressVersionToHashMode(btcAddressVersion: number): AddressHashMode {\n  switch (btcAddressVersion) {\n    case 0: // btc mainnet P2PKH\n      return AddressHashMode.SerializeP2PKH;\n    case 111: // btc mainnet P2PKH\n      return AddressHashMode.SerializeP2PKH;\n    case 5: // btc mainnet P2SH\n      return AddressHashMode.SerializeP2SH;\n    case 196: // btc testnet P2SH\n      return AddressHashMode.SerializeP2SH;\n    default:\n      throw new Error('Invalid pox address version');\n  }\n}\n\nexport function getAddressHashMode(btcAddress: string) {\n  try {\n    const { version } = address.fromBase58Check(btcAddress);\n    return btcAddressVersionToHashMode(version);\n  } catch (error) {\n    throw new InvalidAddressError(btcAddress, error);\n  }\n}\n\nexport function decodeBtcAddress(btcAddress: string) {\n  let b58Result: address.Base58CheckResult;\n  try {\n    b58Result = address.fromBase58Check(btcAddress);\n  } catch (error) {\n    throw new InvalidAddressError(btcAddress, error);\n  }\n  const hashMode = btcAddressVersionToHashMode(b58Result.version);\n  return {\n    hashMode,\n    data: b58Result.hash,\n  };\n}\n\nexport function getBTCAddress(version: Buffer, checksum: Buffer) {\n  const btcAddress = address.toBase58Check(checksum, new BN(version).toNumber());\n  return btcAddress;\n}\n\nexport function getErrorString(error: StackingErrors): string {\n  switch (error) {\n    case StackingErrors.ERR_STACKING_UNREACHABLE:\n      return 'Stacking unreachable';\n    case StackingErrors.ERR_STACKING_INSUFFICIENT_FUNDS:\n      return 'Insufficient funds';\n    case StackingErrors.ERR_STACKING_INVALID_LOCK_PERIOD:\n      return 'Invalid lock period';\n    case StackingErrors.ERR_STACKING_ALREADY_STACKED:\n      return 'Account already stacked. Concurrent stacking not allowed.';\n    case StackingErrors.ERR_STACKING_NO_SUCH_PRINCIPAL:\n      return 'Principal does not exist';\n    case StackingErrors.ERR_STACKING_EXPIRED:\n      return 'Stacking expired';\n    case StackingErrors.ERR_STACKING_STX_LOCKED:\n      return 'STX balance is locked';\n    case StackingErrors.ERR_STACKING_PERMISSION_DENIED:\n      return 'Permission denied';\n    case StackingErrors.ERR_STACKING_THRESHOLD_NOT_MET:\n      return 'Stacking threshold not met';\n    case StackingErrors.ERR_STACKING_POX_ADDRESS_IN_USE:\n      return 'PoX address already in use';\n    case StackingErrors.ERR_STACKING_INVALID_POX_ADDRESS:\n      return 'Invalid PoX address';\n    case StackingErrors.ERR_STACKING_ALREADY_REJECTED:\n      return 'Stacking already rejected';\n    case StackingErrors.ERR_STACKING_INVALID_AMOUNT:\n      return 'Invalid amount';\n    case StackingErrors.ERR_NOT_ALLOWED:\n      return 'Stacking not allowed';\n    case StackingErrors.ERR_STACKING_ALREADY_DELEGATED:\n      return 'Already delegated';\n    case StackingErrors.ERR_DELEGATION_EXPIRES_DURING_LOCK:\n      return 'Delegation expires during lock period';\n    case StackingErrors.ERR_DELEGATION_TOO_MUCH_LOCKED:\n      return 'Delegation too much locked';\n    case StackingErrors.ERR_DELEGATION_POX_ADDR_REQUIRED:\n      return 'PoX address required for delegation';\n    case StackingErrors.ERR_INVALID_START_BURN_HEIGHT:\n      return 'Invalid start burn height';\n  }\n}\n"],"names":["InvalidAddressError","address","innerError","msg","message","name","constructor","Error","captureStackTrace","btcAddressVersionToHashMode","btcAddressVersion","AddressHashMode","SerializeP2PKH","SerializeP2SH","getAddressHashMode","btcAddress","fromBase58Check","version","error","decodeBtcAddress","b58Result","hashMode","data","hash","getBTCAddress","checksum","toBase58Check","BN","toNumber","getErrorString","StackingErrors","ERR_STACKING_UNREACHABLE","ERR_STACKING_INSUFFICIENT_FUNDS","ERR_STACKING_INVALID_LOCK_PERIOD","ERR_STACKING_ALREADY_STACKED","ERR_STACKING_NO_SUCH_PRINCIPAL","ERR_STACKING_EXPIRED","ERR_STACKING_STX_LOCKED","ERR_STACKING_PERMISSION_DENIED","ERR_STACKING_THRESHOLD_NOT_MET","ERR_STACKING_POX_ADDRESS_IN_USE","ERR_STACKING_INVALID_POX_ADDRESS","ERR_STACKING_ALREADY_REJECTED","ERR_STACKING_INVALID_AMOUNT","ERR_NOT_ALLOWED","ERR_STACKING_ALREADY_DELEGATED","ERR_DELEGATION_EXPIRES_DURING_LOCK","ERR_DELEGATION_TOO_MUCH_LOCKED","ERR_DELEGATION_POX_ADDR_REQUIRED","ERR_INVALID_START_BURN_HEIGHT"],"mappings":"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"}