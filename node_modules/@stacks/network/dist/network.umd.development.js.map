{"version":3,"file":"network.umd.development.js","sources":["../src/index.ts"],"sourcesContent":["import { TransactionVersion, ChainID, fetchPrivate } from '@stacks/common';\n\nexport interface StacksNetwork {\n  version: TransactionVersion;\n  chainId: ChainID;\n  coreApiUrl: string;\n  bnsLookupUrl: string;\n  broadcastEndpoint: string;\n  transferFeeEstimateEndpoint: string;\n  accountEndpoint: string;\n  contractAbiEndpoint: string;\n  readOnlyFunctionCallEndpoint: string;\n  isMainnet(): boolean;\n  getBroadcastApiUrl: () => string;\n  getTransferFeeEstimateApiUrl: () => string;\n  getAccountApiUrl: (address: string) => string;\n  getAbiApiUrl: (address: string, contract: string) => string;\n  getReadOnlyFunctionCallApiUrl: (\n    contractAddress: string,\n    contractName: string,\n    functionName: string\n  ) => string;\n  getInfoUrl: () => string;\n  getBlockTimeInfoUrl: () => string;\n  getPoxInfoUrl: () => string;\n  getStackerInfoUrl: (contractAddress: string, contractName: string) => string;\n\n  /**\n   * Get WHOIS-like information for a name, including the address that owns it,\n   * the block at which it expires, and the zone file anchored to it (if available).\n   *\n   * This is intended for use in third-party wallets or in DApps that register names.\n   * @param fullyQualifiedName the name to query.  Can be on-chain of off-chain.\n   * @return a promise that resolves to the WHOIS-like information\n   */\n  getNameInfo: (fullyQualifiedName: string) => any;\n}\n\nexport class StacksMainnet implements StacksNetwork {\n  version = TransactionVersion.Mainnet;\n  chainId = ChainID.Mainnet;\n  coreApiUrl = 'https://stacks-node-api.mainnet.stacks.co';\n  // TODO: change this when mainnet is live. BNS endpoints are not live yet.\n  bnsLookupUrl = 'https://core.blockstack.org';\n  broadcastEndpoint = '/v2/transactions';\n  transferFeeEstimateEndpoint = '/v2/fees/transfer';\n  accountEndpoint = '/v2/accounts';\n  contractAbiEndpoint = '/v2/contracts/interface';\n  readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';\n\n  isMainnet = () => this.version === TransactionVersion.Mainnet;\n  getBroadcastApiUrl = () => `${this.coreApiUrl}${this.broadcastEndpoint}`;\n  getTransferFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transferFeeEstimateEndpoint}`;\n  getAccountApiUrl = (address: string) =>\n    `${this.coreApiUrl}${this.accountEndpoint}/${address}?proof=0`;\n  getAbiApiUrl = (address: string, contract: string) =>\n    `${this.coreApiUrl}${this.contractAbiEndpoint}/${address}/${contract}`;\n  getReadOnlyFunctionCallApiUrl = (\n    contractAddress: string,\n    contractName: string,\n    functionName: string\n  ) =>\n    `${this.coreApiUrl}${\n      this.readOnlyFunctionCallEndpoint\n    }/${contractAddress}/${contractName}/${encodeURIComponent(functionName)}`;\n  getInfoUrl = () => `${this.coreApiUrl}/v2/info`;\n  getBlockTimeInfoUrl = () => `${this.coreApiUrl}/extended/v1/info/network_block_times`;\n  getPoxInfoUrl = () => `${this.coreApiUrl}/v2/pox`;\n  getStackerInfoUrl = (contractAddress: string, contractName: string) =>\n    `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}\n    ${contractAddress}/${contractName}/get-stacker-info`;\n  getNameInfo(fullyQualifiedName: string) {\n    /*\n      TODO: Update to v2 API URL for name lookups\n    */\n    const nameLookupURL = `${this.bnsLookupUrl}/v1/names/${fullyQualifiedName}`;\n    return fetchPrivate(nameLookupURL)\n      .then(resp => {\n        if (resp.status === 404) {\n          throw new Error('Name not found');\n        } else if (resp.status !== 200) {\n          throw new Error(`Bad response status: ${resp.status}`);\n        } else {\n          return resp.json();\n        }\n      })\n      .then(nameInfo => {\n        // the returned address _should_ be in the correct network ---\n        //  blockstackd gets into trouble because it tries to coerce back to mainnet\n        //  and the regtest transaction generation libraries want to use testnet addresses\n        if (nameInfo.address) {\n          return Object.assign({}, nameInfo, { address: nameInfo.address });\n        } else {\n          return nameInfo;\n        }\n      });\n  }\n}\n\nexport class StacksTestnet extends StacksMainnet implements StacksNetwork {\n  version = TransactionVersion.Testnet;\n  chainId = ChainID.Testnet;\n  coreApiUrl = 'https://stacks-node-api.testnet.stacks.co';\n}\n\nexport class StacksMocknet extends StacksMainnet implements StacksNetwork {\n  version = TransactionVersion.Testnet;\n  chainId = ChainID.Testnet;\n  coreApiUrl = 'http://localhost:3999';\n}\n"],"names":["StacksMainnet","TransactionVersion","Mainnet","ChainID","version","coreApiUrl","broadcastEndpoint","transferFeeEstimateEndpoint","address","accountEndpoint","contract","contractAbiEndpoint","contractAddress","contractName","functionName","readOnlyFunctionCallEndpoint","encodeURIComponent","getNameInfo","fullyQualifiedName","nameLookupURL","bnsLookupUrl","fetchPrivate","then","resp","status","Error","json","nameInfo","Object","assign","StacksTestnet","Testnet","StacksMocknet"],"mappings":"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"}