{"version":3,"file":"network.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { TransactionVersion, ChainID, fetchPrivate } from '@stacks/common';\n\nexport interface StacksNetwork {\n  version: TransactionVersion;\n  chainId: ChainID;\n  coreApiUrl: string;\n  bnsLookupUrl: string;\n  broadcastEndpoint: string;\n  transferFeeEstimateEndpoint: string;\n  accountEndpoint: string;\n  contractAbiEndpoint: string;\n  readOnlyFunctionCallEndpoint: string;\n  isMainnet(): boolean;\n  getBroadcastApiUrl: () => string;\n  getTransferFeeEstimateApiUrl: () => string;\n  getAccountApiUrl: (address: string) => string;\n  getAbiApiUrl: (address: string, contract: string) => string;\n  getReadOnlyFunctionCallApiUrl: (\n    contractAddress: string,\n    contractName: string,\n    functionName: string\n  ) => string;\n  getInfoUrl: () => string;\n  getBlockTimeInfoUrl: () => string;\n  getPoxInfoUrl: () => string;\n  getStackerInfoUrl: (contractAddress: string, contractName: string) => string;\n\n  /**\n   * Get WHOIS-like information for a name, including the address that owns it,\n   * the block at which it expires, and the zone file anchored to it (if available).\n   *\n   * This is intended for use in third-party wallets or in DApps that register names.\n   * @param fullyQualifiedName the name to query.  Can be on-chain of off-chain.\n   * @return a promise that resolves to the WHOIS-like information\n   */\n  getNameInfo: (fullyQualifiedName: string) => any;\n}\n\nexport class StacksMainnet implements StacksNetwork {\n  version = TransactionVersion.Mainnet;\n  chainId = ChainID.Mainnet;\n  coreApiUrl = 'https://stacks-node-api.mainnet.stacks.co';\n  // TODO: change this when mainnet is live. BNS endpoints are not live yet.\n  bnsLookupUrl = 'https://core.blockstack.org';\n  broadcastEndpoint = '/v2/transactions';\n  transferFeeEstimateEndpoint = '/v2/fees/transfer';\n  accountEndpoint = '/v2/accounts';\n  contractAbiEndpoint = '/v2/contracts/interface';\n  readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';\n\n  isMainnet = () => this.version === TransactionVersion.Mainnet;\n  getBroadcastApiUrl = () => `${this.coreApiUrl}${this.broadcastEndpoint}`;\n  getTransferFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transferFeeEstimateEndpoint}`;\n  getAccountApiUrl = (address: string) =>\n    `${this.coreApiUrl}${this.accountEndpoint}/${address}?proof=0`;\n  getAbiApiUrl = (address: string, contract: string) =>\n    `${this.coreApiUrl}${this.contractAbiEndpoint}/${address}/${contract}`;\n  getReadOnlyFunctionCallApiUrl = (\n    contractAddress: string,\n    contractName: string,\n    functionName: string\n  ) =>\n    `${this.coreApiUrl}${\n      this.readOnlyFunctionCallEndpoint\n    }/${contractAddress}/${contractName}/${encodeURIComponent(functionName)}`;\n  getInfoUrl = () => `${this.coreApiUrl}/v2/info`;\n  getBlockTimeInfoUrl = () => `${this.coreApiUrl}/extended/v1/info/network_block_times`;\n  getPoxInfoUrl = () => `${this.coreApiUrl}/v2/pox`;\n  getStackerInfoUrl = (contractAddress: string, contractName: string) =>\n    `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}\n    ${contractAddress}/${contractName}/get-stacker-info`;\n  getNameInfo(fullyQualifiedName: string) {\n    /*\n      TODO: Update to v2 API URL for name lookups\n    */\n    const nameLookupURL = `${this.bnsLookupUrl}/v1/names/${fullyQualifiedName}`;\n    return fetchPrivate(nameLookupURL)\n      .then(resp => {\n        if (resp.status === 404) {\n          throw new Error('Name not found');\n        } else if (resp.status !== 200) {\n          throw new Error(`Bad response status: ${resp.status}`);\n        } else {\n          return resp.json();\n        }\n      })\n      .then(nameInfo => {\n        // the returned address _should_ be in the correct network ---\n        //  blockstackd gets into trouble because it tries to coerce back to mainnet\n        //  and the regtest transaction generation libraries want to use testnet addresses\n        if (nameInfo.address) {\n          return Object.assign({}, nameInfo, { address: nameInfo.address });\n        } else {\n          return nameInfo;\n        }\n      });\n  }\n}\n\nexport class StacksTestnet extends StacksMainnet implements StacksNetwork {\n  version = TransactionVersion.Testnet;\n  chainId = ChainID.Testnet;\n  coreApiUrl = 'https://stacks-node-api.testnet.stacks.co';\n}\n\nexport class StacksMocknet extends StacksMainnet implements StacksNetwork {\n  version = TransactionVersion.Testnet;\n  chainId = ChainID.Testnet;\n  coreApiUrl = 'http://localhost:3999';\n}\n"],"names":["StacksMainnet","TransactionVersion","Mainnet","ChainID","_this","version","coreApiUrl","broadcastEndpoint","transferFeeEstimateEndpoint","address","accountEndpoint","contract","contractAbiEndpoint","contractAddress","contractName","functionName","readOnlyFunctionCallEndpoint","encodeURIComponent","getNameInfo","fullyQualifiedName","fetchPrivate","this","bnsLookupUrl","then","resp","status","Error","json","nameInfo","Object","assign","StacksTestnet","Testnet","StacksMocknet"],"mappings":"uMAsCaA,kDACDC,qBAAmBC,qBACnBC,UAAQD,wBACL,8DAEE,qDACK,oDACU,yCACZ,wCACI,4DACS,yCAEnB,kBAAME,EAAKC,UAAYJ,qBAAmBC,iCACjC,oBAASE,EAAKE,WAAaF,EAAKG,qDACtB,oBAASH,EAAKE,WAAaF,EAAKI,mDAC5C,SAACC,YACfL,EAAKE,WAAaF,EAAKM,oBAAmBD,gCAChC,SAACA,EAAiBE,YAC5BP,EAAKE,WAAaF,EAAKQ,wBAAuBH,MAAWE,sCAC9B,SAC9BE,EACAC,EACAC,YAEGX,EAAKE,WACNF,EAAKY,iCACHH,MAAmBC,MAAgBG,mBAAmBF,oBAC/C,kBAASX,EAAKE,gDACL,kBAASF,EAAKE,uEACpB,kBAASF,EAAKE,6CACV,SAACO,EAAyBC,YACzCV,EAAKE,WAAaF,EAAKY,sCACxBH,MAAmBC,0CACvBI,YAAA,SAAYC,UAKHC,eADkBC,KAAKC,0BAAyBH,GAEpDI,MAAK,SAAAC,MACgB,MAAhBA,EAAKC,aACD,IAAIC,MAAM,kBACX,GAAoB,MAAhBF,EAAKC,aACR,IAAIC,8BAA8BF,EAAKC,eAEtCD,EAAKG,UAGfJ,MAAK,SAAAK,UAIAA,EAASnB,QACJoB,OAAOC,OAAO,GAAIF,EAAU,CAAEnB,QAASmB,EAASnB,UAEhDmB,WAMJG,iFACD9B,qBAAmB+B,kBACnB7B,UAAQ6B,qBACL,+DAHoBhC,GAMtBiC,iFACDhC,qBAAmB+B,kBACnB7B,UAAQ6B,qBACL,2CAHoBhC"}